
LiteOS_0.000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000410  20000000  08002b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001160  20000410  08002f38  00020410  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001570  08002f38  00021570  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010f21  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000237f  00000000  00000000  00031361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c2a  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a0  00000000  00000000  00035310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000389f  00000000  00000000  000360e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025fe  00000000  00000000  0003997f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bf7d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ed0  00000000  00000000  0003bffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000410 	.word	0x20000410
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ac8 	.word	0x08002ac8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000414 	.word	0x20000414
 80001c8:	08002ac8 	.word	0x08002ac8

080001cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_InitTick+0x24>)
{
 80001d0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001dc:	f000 f86a 	bl	80002b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4621      	mov	r1, r4
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f000 f830 	bl	800024c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001ec:	2000      	movs	r0, #0
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000040c 	.word	0x2000040c

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 f816 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f7ff ffe5 	bl	80001cc <HAL_InitTick>
  HAL_MspInit();
 8000202:	f000 fe65 	bl	8000ed0 <HAL_MspInit>
}
 8000206:	2000      	movs	r0, #0
 8000208:	bd08      	pop	{r3, pc}
	...

0800020c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800020c:	4a02      	ldr	r2, [pc, #8]	; (8000218 <HAL_IncTick+0xc>)
 800020e:	6813      	ldr	r3, [r2, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	2000042c 	.word	0x2000042c

0800021c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	2000042c 	.word	0x2000042c

08000228 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800022a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000230:	041b      	lsls	r3, r3, #16
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000238:	0200      	lsls	r0, r0, #8
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000242:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000244:	60d3      	str	r3, [r2, #12]
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800024e:	b530      	push	{r4, r5, lr}
 8000250:	68dc      	ldr	r4, [r3, #12]
 8000252:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000256:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025c:	2b04      	cmp	r3, #4
 800025e:	bf28      	it	cs
 8000260:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000264:	f04f 0501 	mov.w	r5, #1
 8000268:	fa05 f303 	lsl.w	r3, r5, r3
 800026c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf8c      	ite	hi
 8000272:	3c03      	subhi	r4, #3
 8000274:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000276:	4019      	ands	r1, r3
 8000278:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800027a:	fa05 f404 	lsl.w	r4, r5, r4
 800027e:	3c01      	subs	r4, #1
 8000280:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000282:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000284:	ea42 0201 	orr.w	r2, r2, r1
 8000288:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	bfaf      	iteee	ge
 800028e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	4b06      	ldrlt	r3, [pc, #24]	; (80002b0 <HAL_NVIC_SetPriority+0x64>)
 8000298:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	bfa5      	ittet	ge
 800029c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002a8:	bd30      	pop	{r4, r5, pc}
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000ed14 	.word	0xe000ed14

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	4a07      	ldr	r2, [pc, #28]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	21f0      	movs	r1, #240	; 0xf0
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <HAL_PWREx_GetVoltageRange+0xc>)
 8000306:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000308:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40007000 	.word	0x40007000

08000314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000316:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000318:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800031c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000320:	d11a      	bne.n	8000358 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000322:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000326:	d013      	beq.n	8000350 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000328:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800032a:	4912      	ldr	r1, [pc, #72]	; (8000374 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800032c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000334:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000338:	6812      	ldr	r2, [r2, #0]
 800033a:	fbb2 f1f1 	udiv	r1, r2, r1
 800033e:	2232      	movs	r2, #50	; 0x32
 8000340:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000342:	b112      	cbz	r2, 800034a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000344:	6959      	ldr	r1, [r3, #20]
 8000346:	0549      	lsls	r1, r1, #21
 8000348:	d404      	bmi.n	8000354 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	055b      	lsls	r3, r3, #21
 800034e:	d40d      	bmi.n	800036c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
        wait_loop_index--;
 8000354:	3a01      	subs	r2, #1
 8000356:	e7f4      	b.n	8000342 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000358:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800035c:	bf1f      	itttt	ne
 800035e:	681a      	ldrne	r2, [r3, #0]
 8000360:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000364:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000368:	601a      	strne	r2, [r3, #0]
 800036a:	e7f1      	b.n	8000350 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800036c:	2003      	movs	r0, #3
}  
 800036e:	4770      	bx	lr
 8000370:	40007000 	.word	0x40007000
 8000374:	000f4240 	.word	0x000f4240
 8000378:	2000040c 	.word	0x2000040c

0800037c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800037c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800037e:	4d1e      	ldr	r5, [pc, #120]	; (80003f8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000380:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000382:	00da      	lsls	r2, r3, #3
{
 8000384:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000386:	d518      	bpl.n	80003ba <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000388:	f7ff ffbc 	bl	8000304 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800038c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000390:	d123      	bne.n	80003da <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000392:	2c80      	cmp	r4, #128	; 0x80
 8000394:	d929      	bls.n	80003ea <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000396:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000398:	bf8c      	ite	hi
 800039a:	2002      	movhi	r0, #2
 800039c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80003a0:	6813      	ldr	r3, [r2, #0]
 80003a2:	f023 0307 	bic.w	r3, r3, #7
 80003a6:	4303      	orrs	r3, r0
 80003a8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80003b0:	1a18      	subs	r0, r3, r0
 80003b2:	bf18      	it	ne
 80003b4:	2001      	movne	r0, #1
 80003b6:	b003      	add	sp, #12
 80003b8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	65ab      	str	r3, [r5, #88]	; 0x58
 80003c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80003cc:	f7ff ff9a 	bl	8000304 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80003d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80003d8:	e7d8      	b.n	800038c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80003da:	2c80      	cmp	r4, #128	; 0x80
 80003dc:	d807      	bhi.n	80003ee <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80003de:	d008      	beq.n	80003f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80003e0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80003e4:	4258      	negs	r0, r3
 80003e6:	4158      	adcs	r0, r3
 80003e8:	e7d9      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80003ea:	2000      	movs	r0, #0
 80003ec:	e7d7      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80003ee:	2003      	movs	r0, #3
 80003f0:	e7d5      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80003f2:	2002      	movs	r0, #2
 80003f4:	e7d3      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40022000 	.word	0x40022000

08000400 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000400:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	f012 0f0c 	tst.w	r2, #12
{
 8000408:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800040a:	d009      	beq.n	8000420 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000412:	2a0c      	cmp	r2, #12
 8000414:	d12d      	bne.n	8000472 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	f002 0203 	and.w	r2, r2, #3
 800041c:	2a01      	cmp	r2, #1
 800041e:	d128      	bne.n	8000472 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000420:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000422:	4928      	ldr	r1, [pc, #160]	; (80004c4 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000424:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000426:	bf55      	itete	pl
 8000428:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800042c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800042e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000432:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000436:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800043a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 800043c:	f011 0f0c 	tst.w	r1, #12
 8000440:	bf0c      	ite	eq
 8000442:	4610      	moveq	r0, r2
 8000444:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000446:	6899      	ldr	r1, [r3, #8]
 8000448:	f001 010c 	and.w	r1, r1, #12
 800044c:	290c      	cmp	r1, #12
 800044e:	d130      	bne.n	80004b2 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000450:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000452:	68d8      	ldr	r0, [r3, #12]
 8000454:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000458:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800045a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800045e:	2802      	cmp	r0, #2
 8000460:	d019      	beq.n	8000496 <HAL_RCC_GetSysClockFreq+0x96>
 8000462:	2803      	cmp	r0, #3
 8000464:	d026      	beq.n	80004b4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000466:	fbb2 f2f1 	udiv	r2, r2, r1
 800046a:	68d8      	ldr	r0, [r3, #12]
 800046c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000470:	e017      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	f002 020c 	and.w	r2, r2, #12
 8000478:	2a04      	cmp	r2, #4
 800047a:	d007      	beq.n	800048c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	f002 020c 	and.w	r2, r2, #12
 8000482:	2a08      	cmp	r2, #8
 8000484:	d104      	bne.n	8000490 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000486:	4810      	ldr	r0, [pc, #64]	; (80004c8 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000488:	2200      	movs	r2, #0
 800048a:	e7dc      	b.n	8000446 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800048c:	480f      	ldr	r0, [pc, #60]	; (80004cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800048e:	e7fb      	b.n	8000488 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000490:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000492:	4602      	mov	r2, r0
 8000494:	e7d7      	b.n	8000446 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800049a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800049e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80004a8:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80004aa:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80004ac:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80004ae:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80004b2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80004b4:	68da      	ldr	r2, [r3, #12]
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80004b8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80004bc:	e7ef      	b.n	800049e <HAL_RCC_GetSysClockFreq+0x9e>
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	08002af0 	.word	0x08002af0
 80004c8:	007a1200 	.word	0x007a1200
 80004cc:	00f42400 	.word	0x00f42400

080004d0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004d0:	6803      	ldr	r3, [r0, #0]
{
 80004d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80004d6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004d8:	06d8      	lsls	r0, r3, #27
 80004da:	d539      	bpl.n	8000550 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004dc:	4cab      	ldr	r4, [pc, #684]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 80004de:	68a3      	ldr	r3, [r4, #8]
 80004e0:	f013 0f0c 	tst.w	r3, #12
 80004e4:	d162      	bne.n	80005ac <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	0799      	lsls	r1, r3, #30
 80004ea:	d503      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x24>
 80004ec:	69ab      	ldr	r3, [r5, #24]
 80004ee:	b90b      	cbnz	r3, 80004f4 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e07f      	b.n	80005f4 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	6a28      	ldr	r0, [r5, #32]
 80004f8:	071a      	lsls	r2, r3, #28
 80004fa:	bf56      	itet	pl
 80004fc:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000500:	6823      	ldrmi	r3, [r4, #0]
 8000502:	091b      	lsrpl	r3, r3, #4
 8000504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000508:	4283      	cmp	r3, r0
 800050a:	d23a      	bcs.n	8000582 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800050c:	f7ff ff36 	bl	800037c <RCC_SetFlashLatencyFromMSIRange>
 8000510:	2800      	cmp	r0, #0
 8000512:	d1ed      	bne.n	80004f0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6023      	str	r3, [r4, #0]
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	6a2a      	ldr	r2, [r5, #32]
 8000520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000524:	4313      	orrs	r3, r2
 8000526:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	69ea      	ldr	r2, [r5, #28]
 800052c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000534:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000536:	f7ff ff63 	bl	8000400 <HAL_RCC_GetSysClockFreq>
 800053a:	68a3      	ldr	r3, [r4, #8]
 800053c:	4a94      	ldr	r2, [pc, #592]	; (8000790 <HAL_RCC_OscConfig+0x2c0>)
 800053e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000542:	5cd3      	ldrb	r3, [r2, r3]
 8000544:	40d8      	lsrs	r0, r3
 8000546:	4b93      	ldr	r3, [pc, #588]	; (8000794 <HAL_RCC_OscConfig+0x2c4>)
 8000548:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff fe3e 	bl	80001cc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	07d8      	lsls	r0, r3, #31
 8000554:	d461      	bmi.n	800061a <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000556:	682b      	ldr	r3, [r5, #0]
 8000558:	0799      	lsls	r1, r3, #30
 800055a:	f100 80a9 	bmi.w	80006b0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800055e:	682b      	ldr	r3, [r5, #0]
 8000560:	071a      	lsls	r2, r3, #28
 8000562:	f100 80e7 	bmi.w	8000734 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000566:	682b      	ldr	r3, [r5, #0]
 8000568:	075b      	lsls	r3, r3, #29
 800056a:	f100 8115 	bmi.w	8000798 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	069a      	lsls	r2, r3, #26
 8000572:	f100 817c 	bmi.w	800086e <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000576:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000578:	2a00      	cmp	r2, #0
 800057a:	f040 81a3 	bne.w	80008c4 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 800057e:	2000      	movs	r0, #0
 8000580:	e038      	b.n	80005f4 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6023      	str	r3, [r4, #0]
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000590:	4303      	orrs	r3, r0
 8000592:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	69ea      	ldr	r2, [r5, #28]
 8000598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800059c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005a0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005a2:	f7ff feeb 	bl	800037c <RCC_SetFlashLatencyFromMSIRange>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d0c5      	beq.n	8000536 <HAL_RCC_OscConfig+0x66>
 80005aa:	e7a1      	b.n	80004f0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80005ac:	69ab      	ldr	r3, [r5, #24]
 80005ae:	b323      	cbz	r3, 80005fa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005b8:	f7ff fe30 	bl	800021c <HAL_GetTick>
 80005bc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	079b      	lsls	r3, r3, #30
 80005c2:	d511      	bpl.n	80005e8 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6023      	str	r3, [r4, #0]
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	6a2a      	ldr	r2, [r5, #32]
 80005d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005d4:	4313      	orrs	r3, r2
 80005d6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	69ea      	ldr	r2, [r5, #28]
 80005dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005e4:	6063      	str	r3, [r4, #4]
 80005e6:	e7b3      	b.n	8000550 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80005e8:	f7ff fe18 	bl	800021c <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9e5      	bls.n	80005be <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 80005f2:	2003      	movs	r0, #3
}
 80005f4:	b002      	add	sp, #8
 80005f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	f023 0301 	bic.w	r3, r3, #1
 8000600:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000602:	f7ff fe0b 	bl	800021c <HAL_GetTick>
 8000606:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	079f      	lsls	r7, r3, #30
 800060c:	d5a0      	bpl.n	8000550 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800060e:	f7ff fe05 	bl	800021c <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2802      	cmp	r0, #2
 8000616:	d9f7      	bls.n	8000608 <HAL_RCC_OscConfig+0x138>
 8000618:	e7eb      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800061a:	4c5c      	ldr	r4, [pc, #368]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 800061c:	68a3      	ldr	r3, [r4, #8]
 800061e:	f003 030c 	and.w	r3, r3, #12
 8000622:	2b08      	cmp	r3, #8
 8000624:	d009      	beq.n	800063a <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000626:	68a3      	ldr	r3, [r4, #8]
 8000628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800062c:	2b0c      	cmp	r3, #12
 800062e:	d10b      	bne.n	8000648 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000630:	68e3      	ldr	r3, [r4, #12]
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	2b03      	cmp	r3, #3
 8000638:	d106      	bne.n	8000648 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	039a      	lsls	r2, r3, #14
 800063e:	d58a      	bpl.n	8000556 <HAL_RCC_OscConfig+0x86>
 8000640:	686b      	ldr	r3, [r5, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d187      	bne.n	8000556 <HAL_RCC_OscConfig+0x86>
 8000646:	e753      	b.n	80004f0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000648:	686b      	ldr	r3, [r5, #4]
 800064a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064e:	d110      	bne.n	8000672 <HAL_RCC_OscConfig+0x1a2>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000656:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000658:	f7ff fde0 	bl	800021c <HAL_GetTick>
 800065c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	039b      	lsls	r3, r3, #14
 8000662:	f53f af78 	bmi.w	8000556 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000666:	f7ff fdd9 	bl	800021c <HAL_GetTick>
 800066a:	1b80      	subs	r0, r0, r6
 800066c:	2864      	cmp	r0, #100	; 0x64
 800066e:	d9f6      	bls.n	800065e <HAL_RCC_OscConfig+0x18e>
 8000670:	e7bf      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000676:	d104      	bne.n	8000682 <HAL_RCC_OscConfig+0x1b2>
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067e:	6023      	str	r3, [r4, #0]
 8000680:	e7e6      	b.n	8000650 <HAL_RCC_OscConfig+0x180>
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000688:	6022      	str	r2, [r4, #0]
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000690:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1e0      	bne.n	8000658 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8000696:	f7ff fdc1 	bl	800021c <HAL_GetTick>
 800069a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	039f      	lsls	r7, r3, #14
 80006a0:	f57f af59 	bpl.w	8000556 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006a4:	f7ff fdba 	bl	800021c <HAL_GetTick>
 80006a8:	1b80      	subs	r0, r0, r6
 80006aa:	2864      	cmp	r0, #100	; 0x64
 80006ac:	d9f6      	bls.n	800069c <HAL_RCC_OscConfig+0x1cc>
 80006ae:	e7a0      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80006b0:	4c36      	ldr	r4, [pc, #216]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 80006b2:	68a3      	ldr	r3, [r4, #8]
 80006b4:	f003 030c 	and.w	r3, r3, #12
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d009      	beq.n	80006d0 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006bc:	68a3      	ldr	r3, [r4, #8]
 80006be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80006c2:	2b0c      	cmp	r3, #12
 80006c4:	d113      	bne.n	80006ee <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c6:	68e3      	ldr	r3, [r4, #12]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d10e      	bne.n	80006ee <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	055e      	lsls	r6, r3, #21
 80006d4:	d503      	bpl.n	80006de <HAL_RCC_OscConfig+0x20e>
 80006d6:	68eb      	ldr	r3, [r5, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f43f af09 	beq.w	80004f0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006de:	6863      	ldr	r3, [r4, #4]
 80006e0:	692a      	ldr	r2, [r5, #16]
 80006e2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80006e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80006ea:	6063      	str	r3, [r4, #4]
 80006ec:	e737      	b.n	800055e <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ee:	68eb      	ldr	r3, [r5, #12]
 80006f0:	b17b      	cbz	r3, 8000712 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006fa:	f7ff fd8f 	bl	800021c <HAL_GetTick>
 80006fe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	0558      	lsls	r0, r3, #21
 8000704:	d4eb      	bmi.n	80006de <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000706:	f7ff fd89 	bl	800021c <HAL_GetTick>
 800070a:	1b80      	subs	r0, r0, r6
 800070c:	2802      	cmp	r0, #2
 800070e:	d9f7      	bls.n	8000700 <HAL_RCC_OscConfig+0x230>
 8000710:	e76f      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000718:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800071a:	f7ff fd7f 	bl	800021c <HAL_GetTick>
 800071e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	0559      	lsls	r1, r3, #21
 8000724:	f57f af1b 	bpl.w	800055e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000728:	f7ff fd78 	bl	800021c <HAL_GetTick>
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	2802      	cmp	r0, #2
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x250>
 8000732:	e75e      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000734:	696b      	ldr	r3, [r5, #20]
 8000736:	4c15      	ldr	r4, [pc, #84]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 8000738:	b19b      	cbz	r3, 8000762 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 800073a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000746:	f7ff fd69 	bl	800021c <HAL_GetTick>
 800074a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800074c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000750:	079f      	lsls	r7, r3, #30
 8000752:	f53f af08 	bmi.w	8000566 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000756:	f7ff fd61 	bl	800021c <HAL_GetTick>
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	2802      	cmp	r0, #2
 800075e:	d9f5      	bls.n	800074c <HAL_RCC_OscConfig+0x27c>
 8000760:	e747      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000762:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800076e:	f7ff fd55 	bl	800021c <HAL_GetTick>
 8000772:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000774:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000778:	0798      	lsls	r0, r3, #30
 800077a:	f57f aef4 	bpl.w	8000566 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800077e:	f7ff fd4d 	bl	800021c <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	2802      	cmp	r0, #2
 8000786:	d9f5      	bls.n	8000774 <HAL_RCC_OscConfig+0x2a4>
 8000788:	e733      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	08002ae0 	.word	0x08002ae0
 8000794:	2000040c 	.word	0x2000040c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000798:	4c79      	ldr	r4, [pc, #484]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 800079a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800079c:	00d9      	lsls	r1, r3, #3
 800079e:	d427      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80007a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007b2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80007b4:	4e73      	ldr	r6, [pc, #460]	; (8000984 <HAL_RCC_OscConfig+0x4b4>)
 80007b6:	6833      	ldr	r3, [r6, #0]
 80007b8:	05da      	lsls	r2, r3, #23
 80007ba:	d51b      	bpl.n	80007f4 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007bc:	68ab      	ldr	r3, [r5, #8]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d129      	bne.n	8000816 <HAL_RCC_OscConfig+0x346>
 80007c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80007ce:	f7ff fd25 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80007d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007dc:	0798      	lsls	r0, r3, #30
 80007de:	d540      	bpl.n	8000862 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	f43f aec4 	beq.w	800056e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80007ee:	e6be      	b.n	800056e <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 80007f0:	2700      	movs	r7, #0
 80007f2:	e7df      	b.n	80007b4 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007f4:	6833      	ldr	r3, [r6, #0]
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007fc:	f7ff fd0e 	bl	800021c <HAL_GetTick>
 8000800:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000802:	6833      	ldr	r3, [r6, #0]
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	d4d9      	bmi.n	80007bc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000808:	f7ff fd08 	bl	800021c <HAL_GetTick>
 800080c:	eba0 0008 	sub.w	r0, r0, r8
 8000810:	2802      	cmp	r0, #2
 8000812:	d9f6      	bls.n	8000802 <HAL_RCC_OscConfig+0x332>
 8000814:	e6ed      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000816:	2b05      	cmp	r3, #5
 8000818:	d106      	bne.n	8000828 <HAL_RCC_OscConfig+0x358>
 800081a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000826:	e7cc      	b.n	80007c2 <HAL_RCC_OscConfig+0x2f2>
 8000828:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800082c:	f022 0201 	bic.w	r2, r2, #1
 8000830:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000834:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000838:	f022 0204 	bic.w	r2, r2, #4
 800083c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1c4      	bne.n	80007ce <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8000844:	f7ff fcea 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000848:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800084c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800084e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000852:	0799      	lsls	r1, r3, #30
 8000854:	d5c4      	bpl.n	80007e0 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000856:	f7ff fce1 	bl	800021c <HAL_GetTick>
 800085a:	1b80      	subs	r0, r0, r6
 800085c:	4540      	cmp	r0, r8
 800085e:	d9f6      	bls.n	800084e <HAL_RCC_OscConfig+0x37e>
 8000860:	e6c7      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000862:	f7ff fcdb 	bl	800021c <HAL_GetTick>
 8000866:	1b80      	subs	r0, r0, r6
 8000868:	4540      	cmp	r0, r8
 800086a:	d9b5      	bls.n	80007d8 <HAL_RCC_OscConfig+0x308>
 800086c:	e6c1      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800086e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000870:	4c43      	ldr	r4, [pc, #268]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 8000872:	b19b      	cbz	r3, 800089c <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8000874:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000880:	f7ff fccc 	bl	800021c <HAL_GetTick>
 8000884:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000886:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800088a:	079b      	lsls	r3, r3, #30
 800088c:	f53f ae73 	bmi.w	8000576 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000890:	f7ff fcc4 	bl	800021c <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	2802      	cmp	r0, #2
 8000898:	d9f5      	bls.n	8000886 <HAL_RCC_OscConfig+0x3b6>
 800089a:	e6aa      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800089c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80008a8:	f7ff fcb8 	bl	800021c <HAL_GetTick>
 80008ac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80008ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80008b2:	079f      	lsls	r7, r3, #30
 80008b4:	f57f ae5f 	bpl.w	8000576 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008b8:	f7ff fcb0 	bl	800021c <HAL_GetTick>
 80008bc:	1b80      	subs	r0, r0, r6
 80008be:	2802      	cmp	r0, #2
 80008c0:	d9f5      	bls.n	80008ae <HAL_RCC_OscConfig+0x3de>
 80008c2:	e696      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80008c4:	4c2e      	ldr	r4, [pc, #184]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 80008c6:	68a3      	ldr	r3, [r4, #8]
 80008c8:	f003 030c 	and.w	r3, r3, #12
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	f43f ae0f 	beq.w	80004f0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 80008d2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80008d4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80008d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008da:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80008dc:	d136      	bne.n	800094c <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 80008de:	f7ff fc9d 	bl	800021c <HAL_GetTick>
 80008e2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	0198      	lsls	r0, r3, #6
 80008e8:	d42a      	bmi.n	8000940 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80008ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80008ee:	06db      	lsls	r3, r3, #27
 80008f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80008f6:	4313      	orrs	r3, r2
 80008f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008fa:	3a01      	subs	r2, #1
 80008fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000900:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000902:	0852      	lsrs	r2, r2, #1
 8000904:	3a01      	subs	r2, #1
 8000906:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800090a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800090c:	0852      	lsrs	r2, r2, #1
 800090e:	3a01      	subs	r2, #1
 8000910:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000914:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800091e:	68e3      	ldr	r3, [r4, #12]
 8000920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000924:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000926:	f7ff fc79 	bl	800021c <HAL_GetTick>
 800092a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	0199      	lsls	r1, r3, #6
 8000930:	f53f ae25 	bmi.w	800057e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000934:	f7ff fc72 	bl	800021c <HAL_GetTick>
 8000938:	1b40      	subs	r0, r0, r5
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x45c>
 800093e:	e658      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000940:	f7ff fc6c 	bl	800021c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	2802      	cmp	r0, #2
 8000948:	d9cc      	bls.n	80008e4 <HAL_RCC_OscConfig+0x414>
 800094a:	e652      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000950:	bf5e      	ittt	pl
 8000952:	68e3      	ldrpl	r3, [r4, #12]
 8000954:	f023 0303 	bicpl.w	r3, r3, #3
 8000958:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800095a:	68e3      	ldr	r3, [r4, #12]
 800095c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000964:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000966:	f7ff fc59 	bl	800021c <HAL_GetTick>
 800096a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	019b      	lsls	r3, r3, #6
 8000970:	f57f ae05 	bpl.w	800057e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000974:	f7ff fc52 	bl	800021c <HAL_GetTick>
 8000978:	1b40      	subs	r0, r0, r5
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x49c>
 800097e:	e638      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
 8000980:	40021000 	.word	0x40021000
 8000984:	40007000 	.word	0x40007000

08000988 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000988:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <HAL_RCC_ClockConfig+0x15c>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	428b      	cmp	r3, r1
{
 8000992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000996:	4605      	mov	r5, r0
 8000998:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800099a:	d32b      	bcc.n	80009f4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	07d9      	lsls	r1, r3, #31
 80009a0:	d435      	bmi.n	8000a0e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009a2:	6829      	ldr	r1, [r5, #0]
 80009a4:	078a      	lsls	r2, r1, #30
 80009a6:	f100 8083 	bmi.w	8000ab0 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80009aa:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <HAL_RCC_ClockConfig+0x15c>)
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	429e      	cmp	r6, r3
 80009b4:	f0c0 8084 	bcc.w	8000ac0 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009b8:	f011 0f04 	tst.w	r1, #4
 80009bc:	4c4a      	ldr	r4, [pc, #296]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 80009be:	f040 808a 	bne.w	8000ad6 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009c2:	070b      	lsls	r3, r1, #28
 80009c4:	d506      	bpl.n	80009d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009c6:	68a3      	ldr	r3, [r4, #8]
 80009c8:	692a      	ldr	r2, [r5, #16]
 80009ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009d2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009d4:	f7ff fd14 	bl	8000400 <HAL_RCC_GetSysClockFreq>
 80009d8:	68a3      	ldr	r3, [r4, #8]
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <HAL_RCC_ClockConfig+0x164>)
 80009dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	40d8      	lsrs	r0, r3
 80009e4:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <HAL_RCC_ClockConfig+0x168>)
 80009e6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fbef 	bl	80001cc <HAL_InitTick>
  return HAL_OK;
 80009ee:	2000      	movs	r0, #0
}
 80009f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80009fe:	6813      	ldr	r3, [r2, #0]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	4299      	cmp	r1, r3
 8000a06:	d0c9      	beq.n	800099c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
 8000a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0e:	686a      	ldr	r2, [r5, #4]
 8000a10:	4c35      	ldr	r4, [pc, #212]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 8000a12:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000a14:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a16:	d11c      	bne.n	8000a52 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000a18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000a1c:	d0f4      	beq.n	8000a08 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	f023 0303 	bic.w	r3, r3, #3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000a28:	f7ff fbf8 	bl	800021c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a2c:	686b      	ldr	r3, [r5, #4]
 8000a2e:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000a30:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a32:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a36:	d118      	bne.n	8000a6a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a38:	68a3      	ldr	r3, [r4, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b0c      	cmp	r3, #12
 8000a40:	d0af      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a42:	f7ff fbeb 	bl	800021c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9f5      	bls.n	8000a38 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a52:	2a02      	cmp	r2, #2
 8000a54:	d102      	bne.n	8000a5c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000a56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a5a:	e7df      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000a5c:	b912      	cbnz	r2, 8000a64 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000a5e:	f013 0f02 	tst.w	r3, #2
 8000a62:	e7db      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000a64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000a68:	e7d8      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d10a      	bne.n	8000a84 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000a6e:	68a3      	ldr	r3, [r4, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d094      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a78:	f7ff fbd0 	bl	800021c <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	4540      	cmp	r0, r8
 8000a80:	d9f5      	bls.n	8000a6e <HAL_RCC_ClockConfig+0xe6>
 8000a82:	e7e3      	b.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000a84:	b973      	cbnz	r3, 8000aa4 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000a86:	68a3      	ldr	r3, [r4, #8]
 8000a88:	f013 0f0c 	tst.w	r3, #12
 8000a8c:	d089      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a8e:	f7ff fbc5 	bl	800021c <HAL_GetTick>
 8000a92:	1bc0      	subs	r0, r0, r7
 8000a94:	4540      	cmp	r0, r8
 8000a96:	d9f6      	bls.n	8000a86 <HAL_RCC_ClockConfig+0xfe>
 8000a98:	e7d8      	b.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a9a:	f7ff fbbf 	bl	800021c <HAL_GetTick>
 8000a9e:	1bc0      	subs	r0, r0, r7
 8000aa0:	4540      	cmp	r0, r8
 8000aa2:	d8d3      	bhi.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000aa4:	68a3      	ldr	r3, [r4, #8]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d1f5      	bne.n	8000a9a <HAL_RCC_ClockConfig+0x112>
 8000aae:	e778      	b.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 8000ab2:	68a8      	ldr	r0, [r5, #8]
 8000ab4:	6893      	ldr	r3, [r2, #8]
 8000ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aba:	4303      	orrs	r3, r0
 8000abc:	6093      	str	r3, [r2, #8]
 8000abe:	e774      	b.n	80009aa <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f023 0307 	bic.w	r3, r3, #7
 8000ac6:	4333      	orrs	r3, r6
 8000ac8:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	429e      	cmp	r6, r3
 8000ad2:	d199      	bne.n	8000a08 <HAL_RCC_ClockConfig+0x80>
 8000ad4:	e770      	b.n	80009b8 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ad6:	68a3      	ldr	r3, [r4, #8]
 8000ad8:	68ea      	ldr	r2, [r5, #12]
 8000ada:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60a3      	str	r3, [r4, #8]
 8000ae2:	e76e      	b.n	80009c2 <HAL_RCC_ClockConfig+0x3a>
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	08002ae0 	.word	0x08002ae0
 8000af0:	2000040c 	.word	0x2000040c

08000af4 <HAL_RCC_GetHCLKFreq>:
}
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <HAL_RCC_GetHCLKFreq+0x8>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000040c 	.word	0x2000040c

08000b00 <adc1_enable>:

void adc1_enable(void)
{

/*Enable ADC1 CLK in RCC*/
((RCC)->AHB2ENR) |= RCC_ADC1_ENABLE;
 8000b00:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <adc1_enable+0x120>)
 8000b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b08:	64da      	str	r2, [r3, #76]	; 0x4c

/*Enable the GPIOA CLK in RCC*/
((RCC)->AHB2ENR) |= (RCC_GPIOA_ENABLE|RCC_GPIOB_ENABLE);
 8000b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b0c:	f042 0203 	orr.w	r2, r2, #3
 8000b10:	64da      	str	r2, [r3, #76]	; 0x4c

((GPIOB)->MODER) |= ((AN_MODE) << (GPIO_0_DSHIFT));
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <adc1_enable+0x124>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f042 0203 	orr.w	r2, r2, #3
 8000b1a:	601a      	str	r2, [r3, #0]
((GPIOB)->MODER) |= ((AN_MODE) << (GPIO_1_DSHIFT));
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f042 020c 	orr.w	r2, r2, #12
 8000b22:	601a      	str	r2, [r3, #0]

((GPIOA)->MODER) |= ((AN_MODE) << (GPIO_6_DSHIFT));
 8000b24:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000b2e:	6013      	str	r3, [r2, #0]


/*Disable Deep Power Down*/
while(((ADC1)->CR) & DPD)
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <adc1_enable+0x128>)
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	0090      	lsls	r0, r2, #2
 8000b36:	d464      	bmi.n	8000c02 <adc1_enable+0x102>

/*Enable the internal Temperature Sensor*/
//((ADC1_COMMON)->CCR) |= (TEMP_CHANNEL_ENABLE);

/*Adjust the CLK*/
((ADC1_COMMON)->CCR) |= ((HCLK_1)<<(ADC_CLK_SHIFT));
 8000b38:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <adc1_enable+0x12c>)
 8000b3a:	6893      	ldr	r3, [r2, #8]
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	6093      	str	r3, [r2, #8]



/*Enable the VoltageRegulator*/
while((((ADC1)->CR) & ADC_REG_GEN) == 0U)
 8000b42:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <adc1_enable+0x128>)
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	00d1      	lsls	r1, r2, #3
 8000b48:	d560      	bpl.n	8000c0c <adc1_enable+0x10c>
{((ADC1)->CR) |= ADC_REG_GEN;}
/*Prep for calibration*/

while(((ADC1)->CR) & ((ADC_JSTP)|(ADC_STP)|(ADC_JSTART)|(ADC_START)|(ADC_DIS)|(ADC_EN)))
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <adc1_enable+0x128>)
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	6899      	ldr	r1, [r3, #8]
 8000b50:	f011 0f3f 	tst.w	r1, #63	; 0x3f
{((ADC1)->CR) |= ((ADC_JSTP)|(ADC_STP));}
 8000b54:	6899      	ldr	r1, [r3, #8]
while(((ADC1)->CR) & ((ADC_JSTP)|(ADC_STP)|(ADC_JSTART)|(ADC_START)|(ADC_DIS)|(ADC_EN)))
 8000b56:	d15e      	bne.n	8000c16 <adc1_enable+0x116>
while(adci < 100U)
{adci++;}
adci=0U;

/*Calibrate*/
((ADC1)->CR) |= ADC_CALIBRATE;
 8000b58:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000b5c:	6099      	str	r1, [r3, #8]
while(((ADC1)->CR) & ADC_CALIBRATE){;}
 8000b5e:	6893      	ldr	r3, [r2, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dbfc      	blt.n	8000b5e <adc1_enable+0x5e>

while(adci < 100U)
{adci++;}
adci=0U;
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <adc1_enable+0x130>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	6019      	str	r1, [r3, #0]
/*Enable the ADC*/
((ADC1)->CR) |= ADC_EN;
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6093      	str	r3, [r2, #8]
while((((ADC1)->ISR) & ADC_READY) == 0U){;}
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <adc1_enable+0x128>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	07d2      	lsls	r2, r2, #31
 8000b78:	d5fc      	bpl.n	8000b74 <adc1_enable+0x74>



/*Clear Flag*/
((ADC1)->ISR) |= (ADC_READY);
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	f042 0201 	orr.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
/*Enable Interrupts*/
((ADC1)->IER) |= ((EOSI)|(EOCI));
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	f042 020c 	orr.w	r2, r2, #12
 8000b88:	605a      	str	r2, [r3, #4]


/*Set Channels*/
((ADC1)->SQR1) &= 0U;
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
((ADC1)->SQR1) |= ((CURRENT_SENSE_CHANNEL)<<(SQ1_SHIFT));
 8000b90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b92:	f441 7170 	orr.w	r1, r1, #960	; 0x3c0
 8000b96:	6319      	str	r1, [r3, #48]	; 0x30
((ADC1)->SQR1) |= ((OUTPUT_VOLTAGE_CHANNEL)<<(SQ3_SHIFT));
 8000b98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b9a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000b9e:	6319      	str	r1, [r3, #48]	; 0x30
((ADC1)->SQR2) |= ((INPUT_VOLTAGE_CHANNEL));
 8000ba0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ba2:	f041 0107 	orr.w	r1, r1, #7
 8000ba6:	6359      	str	r1, [r3, #52]	; 0x34
((ADC1)->SQR1) |= REG_CONV_CNT;
 8000ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000baa:	f041 0104 	orr.w	r1, r1, #4
 8000bae:	6319      	str	r1, [r3, #48]	; 0x30

((ADC1)->JSQR) &= 0U;
 8000bb0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bb2:	64da      	str	r2, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= ((INT_TEMP_CHANNEL)<<(JSQ2_SHIFT));
 8000bb4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bb6:	f441 31c0 	orr.w	r1, r1, #98304	; 0x18000
 8000bba:	64d9      	str	r1, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= ((EXT_TEMP_CHANNEL)<<(JSQ1_SHIFT));
 8000bbc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bbe:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8000bc2:	64d9      	str	r1, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= (INJ_CONV_CNT);
 8000bc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bc6:	f041 0101 	orr.w	r1, r1, #1
 8000bca:	64d9      	str	r1, [r3, #76]	; 0x4c



/*Set Sampling Time on all channels*/
((ADC1)->SMPR1) |= (SMPR1_CONF);
 8000bcc:	6959      	ldr	r1, [r3, #20]
 8000bce:	f041 6112 	orr.w	r1, r1, #153092096	; 0x9200000
 8000bd2:	f441 2192 	orr.w	r1, r1, #299008	; 0x49000
 8000bd6:	f441 7112 	orr.w	r1, r1, #584	; 0x248
 8000bda:	f041 0101 	orr.w	r1, r1, #1
 8000bde:	6159      	str	r1, [r3, #20]
((ADC1)->SMPR2) |= (SMPR2_CONF);
 8000be0:	6998      	ldr	r0, [r3, #24]
 8000be2:	4914      	ldr	r1, [pc, #80]	; (8000c34 <adc1_enable+0x134>)
 8000be4:	4301      	orrs	r1, r0
 8000be6:	6199      	str	r1, [r3, #24]

/*Configure the Setup*/
((ADC1)->CFGR) |= (AUTO_DELAY);
 8000be8:	68d9      	ldr	r1, [r3, #12]
 8000bea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000bee:	60d9      	str	r1, [r3, #12]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <adc1_enable+0x138>)
 8000bf2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000bf6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bfe:	6019      	str	r1, [r3, #0]
 8000c00:	4770      	bx	lr
{((ADC1)->CR) &= ~(DPD);}
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	e792      	b.n	8000b32 <adc1_enable+0x32>
{((ADC1)->CR) |= ADC_REG_GEN;}
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	e796      	b.n	8000b44 <adc1_enable+0x44>
{((ADC1)->CR) |= ((ADC_JSTP)|(ADC_STP));}
 8000c16:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8000c1a:	6099      	str	r1, [r3, #8]
 8000c1c:	e797      	b.n	8000b4e <adc1_enable+0x4e>
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	50040000 	.word	0x50040000
 8000c2c:	50040300 	.word	0x50040300
 8000c30:	20000430 	.word	0x20000430
 8000c34:	01249249 	.word	0x01249249
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <adc1_regular_conversions>:
}


void adc1_regular_conversions(void)
{
((ADC1)->ISR) |= ((EOSI)|(EOCI));
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <adc1_regular_conversions+0x1c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f042 020c 	orr.w	r2, r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
((ADC1)->IER) |= ((EOSI)|(EOCI));
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	f042 020c 	orr.w	r2, r2, #12
 8000c4c:	605a      	str	r2, [r3, #4]
((ADC1)->CR) |= ADC_START;
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	f042 0204 	orr.w	r2, r2, #4
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	4770      	bx	lr
 8000c58:	50040000 	.word	0x50040000

08000c5c <adc1_inject_conversions>:
}

void adc1_inject_conversions(void)
{

	((ADC1)->ISR) |= ((JEOSI));
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <adc1_inject_conversions+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c64:	601a      	str	r2, [r3, #0]
	((ADC1)->IER) |= ((JEOSI));
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	605a      	str	r2, [r3, #4]
	((ADC1)->CR) |= ADC_JSTART;
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	f042 0208 	orr.w	r2, r2, #8
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	4770      	bx	lr
 8000c78:	50040000 	.word	0x50040000

08000c7c <dac_enable>:
int32_t dac_out;


void dac_enable(void)
{
dac_out = 1000U;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <dac_enable+0x40>)
 8000c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c82:	601a      	str	r2, [r3, #0]
/*Enable RCC Clock*/
((RCC)->APB1ENR1) |= RCC_DAC_ENABLE;
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <dac_enable+0x44>)
 8000c86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c8c:	6593      	str	r3, [r2, #88]	; 0x58
/*Set GPIO PA5 to Analog Mode */
((GPIOA)->MODER) |= ((AN_MODE)<<(GPIO_5_DSHIFT));
 8000c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c92:	6813      	ldr	r3, [r2, #0]
 8000c94:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000c98:	6013      	str	r3, [r2, #0]

/*Connect DAC2 to on chip Peripheral*/
((DAC)->MCR) |= ((MODE_1) <<(CH2_SHIFT));
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <dac_enable+0x48>)
 8000c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c

/*Enable to the DAC*/
((DAC)->CR) |= CH2_ENABLE;
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000caa:	601a      	str	r2, [r3, #0]


((DAC)->DHR12RD) &= 0U;
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000cb2:	6a1a      	ldr	r2, [r3, #32]
 8000cb4:	f042 727a 	orr.w	r2, r2, #65536000	; 0x3e80000
 8000cb8:	621a      	str	r2, [r3, #32]
 8000cba:	4770      	bx	lr
 8000cbc:	20000434 	.word	0x20000434
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40007400 	.word	0x40007400

08000cc8 <dac_up>:
}


void dac_up(uint32_t increment)
{
dac_out += increment;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <dac_up+0x2c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4410      	add	r0, r2
if(dac_out > 4095U)
 8000cce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{dac_out = 4095U;}
 8000cd2:	bf24      	itt	cs
 8000cd4:	f640 72ff 	movwcs	r2, #4095	; 0xfff
 8000cd8:	601a      	strcs	r2, [r3, #0]

((DAC)->DHR12RD) &= 0U;
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <dac_up+0x30>)
dac_out += increment;
 8000cdc:	bf38      	it	cc
 8000cde:	6018      	strcc	r0, [r3, #0]
((DAC)->DHR12RD) &= 0U;
 8000ce0:	6a11      	ldr	r1, [r2, #32]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	6211      	str	r1, [r2, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000ce6:	6a11      	ldr	r1, [r2, #32]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	6213      	str	r3, [r2, #32]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000434 	.word	0x20000434
 8000cf8:	40007400 	.word	0x40007400

08000cfc <dac_down>:
}
void dac_down(uint32_t decrement)
{
	 dac_out -= decrement;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <dac_down+0x24>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
	 if(dac_out <= 0U)
 8000d00:	1a10      	subs	r0, r2, r0
	 {dac_out = 1U;}
 8000d02:	bf04      	itt	eq
 8000d04:	2201      	moveq	r2, #1
 8000d06:	601a      	streq	r2, [r3, #0]


	((DAC)->DHR12RD) &= 0U;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <dac_down+0x28>)
	 dac_out -= decrement;
 8000d0a:	bf18      	it	ne
 8000d0c:	6018      	strne	r0, [r3, #0]
	((DAC)->DHR12RD) &= 0U;
 8000d0e:	6a11      	ldr	r1, [r2, #32]
 8000d10:	2100      	movs	r1, #0
 8000d12:	6211      	str	r1, [r2, #32]
	((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000d14:	6a11      	ldr	r1, [r2, #32]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1c:	6213      	str	r3, [r2, #32]
 8000d1e:	4770      	bx	lr
 8000d20:	20000434 	.word	0x20000434
 8000d24:	40007400 	.word	0x40007400

08000d28 <dac_set>:
{set_point = 0U;}

if(set_point > 4095U)
{set_point = 4095U;}

dac_out = set_point;
 8000d28:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	bf28      	it	cs
 8000d30:	4618      	movcs	r0, r3
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <dac_set+0x20>)
 8000d34:	6018      	str	r0, [r3, #0]

((DAC)->DHR12RD) &= 0U;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <dac_set+0x24>)
 8000d38:	6a1a      	ldr	r2, [r3, #32]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000d3e:	6a1a      	ldr	r2, [r3, #32]
 8000d40:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8000d44:	6218      	str	r0, [r3, #32]
 8000d46:	4770      	bx	lr
 8000d48:	20000434 	.word	0x20000434
 8000d4c:	40007400 	.word	0x40007400

08000d50 <lptim1_enable>:
void lptim1_enable(void)
{
uint8_t i =0U;


((RCC)->APB1ENR1) |= RCC_LPTIM1_ENABLE;
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <lptim1_enable+0x48>)
 8000d52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
((LPTIM1)->CR) |= LPTIM1_ENABLE;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <lptim1_enable+0x4c>)
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	611a      	str	r2, [r3, #16]


((LPTIM1)->IER) |= ARRM;
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	f042 0202 	orr.w	r2, r2, #2
 8000d6a:	609a      	str	r2, [r3, #8]

((LPTIM1)->ARR) = QTR_MEG_OFF;
 8000d6c:	22c0      	movs	r2, #192	; 0xc0
 8000d6e:	619a      	str	r2, [r3, #24]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <lptim1_enable+0x50>)
 8000d72:	2102      	movs	r1, #2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	2020      	movs	r0, #32
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d76:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d7e:	6091      	str	r1, [r2, #8]
NVIC_ClearPendingIRQ(LPTIM1_IRQn);
NVIC_SetPriority(LPTIM1_IRQn, 2U);
NVIC_EnableIRQ(LPTIM1_IRQn);

for(i=0U; i<5U; i++)
{((&sys_time)->time_nums)[i] = 0U;}
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <lptim1_enable+0x54>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	6011      	str	r1, [r2, #0]
 8000d86:	6051      	str	r1, [r2, #4]
 8000d88:	6091      	str	r1, [r2, #8]
 8000d8a:	60d1      	str	r1, [r2, #12]
 8000d8c:	6111      	str	r1, [r2, #16]


((LPTIM1)->CR) |= CNT_START;
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	f042 0204 	orr.w	r2, r2, #4
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40007c00 	.word	0x40007c00
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	20000438 	.word	0x20000438

08000da8 <time_increment>:
}

void time_increment(void)
{
(((&sys_time)->time_nums)[ticks])++;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <time_increment+0x5c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	3201      	adds	r2, #1

if((((&sys_time)->time_nums)[ticks]) >= ticks_ovf)
 8000dae:	2af9      	cmp	r2, #249	; 0xf9
(((&sys_time)->time_nums)[ticks])++;
 8000db0:	601a      	str	r2, [r3, #0]
if((((&sys_time)->time_nums)[ticks]) >= ticks_ovf)
 8000db2:	d904      	bls.n	8000dbe <time_increment+0x16>
{
(((&sys_time)->time_nums)[millis])++;
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	3201      	adds	r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
(((&sys_time)->time_nums)[ticks]) = 0U;
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
}

if((((&sys_time)->time_nums)[millis]) >= millis_ovf)
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8000dc4:	d304      	bcc.n	8000dd0 <time_increment+0x28>
{
(((&sys_time)->time_nums)[seconds])++;
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	3201      	adds	r2, #1
 8000dca:	609a      	str	r2, [r3, #8]
(((&sys_time)->time_nums)[millis]) = 0U;
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
}

if((((&sys_time)->time_nums)[seconds]) >= seconds_ovf)
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	2a3b      	cmp	r2, #59	; 0x3b
 8000dd4:	d904      	bls.n	8000de0 <time_increment+0x38>
{
(((&sys_time)->time_nums)[minutes])++;
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	3201      	adds	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
(((&sys_time)->time_nums)[seconds]) = 0U;
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
}

if((((&sys_time)->time_nums)[minutes]) >= minutes_ovf)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	2a3b      	cmp	r2, #59	; 0x3b
 8000de4:	d904      	bls.n	8000df0 <time_increment+0x48>
{
(((&sys_time)->time_nums)[hours])++;
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	3201      	adds	r2, #1
 8000dea:	611a      	str	r2, [r3, #16]
(((&sys_time)->time_nums)[minutes]) = 0U;
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
}

if((((&sys_time)->time_nums)[hours]) >= hours_ovf)
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	2a17      	cmp	r2, #23
 8000df4:	d904      	bls.n	8000e00 <time_increment+0x58>
{
(((&sys_time)->time_nums)[days])++;
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	3201      	adds	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
(((&sys_time)->time_nums)[hours]) = 0U;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000438 	.word	0x20000438

08000e08 <read_time>:


}

TIME* read_time(void)
{return &sys_time;}
 8000e08:	4800      	ldr	r0, [pc, #0]	; (8000e0c <read_time+0x4>)
 8000e0a:	4770      	bx	lr
 8000e0c:	20000438 	.word	0x20000438

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b510      	push	{r4, lr}
 8000e12:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e14:	2310      	movs	r3, #16
 8000e16:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e1c:	22b0      	movs	r2, #176	; 0xb0
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e1e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e22:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e24:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e26:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f7ff fb52 	bl	80004d0 <HAL_RCC_OscConfig>
 8000e2c:	b100      	cbz	r0, 8000e30 <SystemClock_Config+0x20>
 8000e2e:	e7fe      	b.n	8000e2e <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e32:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e36:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	f7ff fda2 	bl	8000988 <HAL_RCC_ClockConfig>
 8000e44:	b100      	cbz	r0, 8000e48 <SystemClock_Config+0x38>
 8000e46:	e7fe      	b.n	8000e46 <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e4c:	f7ff fa62 	bl	8000314 <HAL_PWREx_ControlVoltageScaling>
 8000e50:	4604      	mov	r4, r0
 8000e52:	b100      	cbz	r0, 8000e56 <SystemClock_Config+0x46>
 8000e54:	e7fe      	b.n	8000e54 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e56:	f7ff fe4d 	bl	8000af4 <HAL_RCC_GetHCLKFreq>
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e62:	f7ff fa27 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e66:	2004      	movs	r0, #4
 8000e68:	f7ff fa3a 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e6c:	4622      	mov	r2, r4
 8000e6e:	4621      	mov	r1, r4
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff f9ea 	bl	800024c <HAL_NVIC_SetPriority>
}
 8000e78:	b016      	add	sp, #88	; 0x58
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <main>:
{
 8000e7c:	b508      	push	{r3, lr}
  HAL_Init();
 8000e7e:	f7ff f9b9 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 8000e82:	f7ff ffc5 	bl	8000e10 <SystemClock_Config>
  system_io_config();
 8000e86:	f000 fc93 	bl	80017b0 <system_io_config>
  lptim1_enable();
 8000e8a:	f7ff ff61 	bl	8000d50 <lptim1_enable>
  adc1_enable();
 8000e8e:	f7ff fe37 	bl	8000b00 <adc1_enable>
  tim1_enable(120U);
 8000e92:	2078      	movs	r0, #120	; 0x78
 8000e94:	f001 fbb6 	bl	8002604 <tim1_enable>
  dac_enable();
 8000e98:	f7ff fef0 	bl	8000c7c <dac_enable>
  system_ptr_config();
 8000e9c:	f000 f8d8 	bl	8001050 <system_ptr_config>
    flag_checker = start_up_check();
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	; (8000ecc <main+0x50>)
 8000ea2:	f000 f98d 	bl	80011c0 <start_up_check>
 8000ea6:	6020      	str	r0, [r4, #0]
    if(flag_checker)
 8000ea8:	b130      	cbz	r0, 8000eb8 <main+0x3c>
    	system_management();
 8000eaa:	f001 faf3 	bl	8002494 <system_management>
    	adc_management();
 8000eae:	f000 fddd 	bl	8001a6c <adc_management>
    	start_up_procedure();
 8000eb2:	f000 fb0d 	bl	80014d0 <start_up_procedure>
 8000eb6:	e7f4      	b.n	8000ea2 <main+0x26>
    	system_management();
 8000eb8:	f001 faec 	bl	8002494 <system_management>
    	adc_management();
 8000ebc:	f000 fdd6 	bl	8001a6c <adc_management>
    	thermal_management();
 8000ec0:	f000 fa5c 	bl	800137c <thermal_management>
    	pmic_management();
 8000ec4:	f000 fca0 	bl	8001808 <pmic_management>
 8000ec8:	e7eb      	b.n	8000ea2 <main+0x26>
 8000eca:	bf00      	nop
 8000ecc:	20000450 	.word	0x20000450

08000ed0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_MspInit+0x88>)
{
 8000ed2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
 8000edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ede:	f002 0201 	and.w	r2, r2, #1
 8000ee2:	9200      	str	r2, [sp, #0]
 8000ee4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ee8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
 8000eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efa:	f7ff f995 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	4611      	mov	r1, r2
 8000f02:	f06f 000b 	mvn.w	r0, #11
 8000f06:	f7ff f9a1 	bl	800024c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	f06f 000a 	mvn.w	r0, #10
 8000f12:	f7ff f99b 	bl	800024c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	4611      	mov	r1, r2
 8000f1a:	f06f 0009 	mvn.w	r0, #9
 8000f1e:	f7ff f995 	bl	800024c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	4611      	mov	r1, r2
 8000f26:	f06f 0004 	mvn.w	r0, #4
 8000f2a:	f7ff f98f 	bl	800024c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4611      	mov	r1, r2
 8000f32:	f06f 0003 	mvn.w	r0, #3
 8000f36:	f7ff f989 	bl	800024c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	f06f 0001 	mvn.w	r0, #1
 8000f42:	f7ff f983 	bl	800024c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	4611      	mov	r1, r2
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4e:	f7ff f97d 	bl	800024c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	b003      	add	sp, #12
 8000f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f58:	40021000 	.word	0x40021000

08000f5c <USART1_IRQHandler>:

/******************************************************************************/
/*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
/******************************************************************************/
void USART1_IRQHandler(void)
{
 8000f5c:	b510      	push	{r4, lr}
	fc = ((USART1)->ISR);
 8000f5e:	4c06      	ldr	r4, [pc, #24]	; (8000f78 <USART1_IRQHandler+0x1c>)
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <USART1_IRQHandler+0x20>)
 8000f62:	69e3      	ldr	r3, [r4, #28]
 8000f64:	6013      	str	r3, [r2, #0]

	if(fc & RXNE)
 8000f66:	069b      	lsls	r3, r3, #26
 8000f68:	d501      	bpl.n	8000f6e <USART1_IRQHandler+0x12>
	{uart1_buffer_char();}
 8000f6a:	f001 fd0f 	bl	800298c <uart1_buffer_char>
	((USART1)->ICR) |= ONES;
 8000f6e:	6a23      	ldr	r3, [r4, #32]
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	6223      	str	r3, [r4, #32]
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	20000458 	.word	0x20000458

08000f80 <LPTIM1_IRQHandler>:
}

void LPTIM1_IRQHandler(void)
{
 8000f80:	b508      	push	{r3, lr}
time_increment();
 8000f82:	f7ff ff11 	bl	8000da8 <time_increment>
((LPTIM1)->ICR) |= LPTIM1_FLAG_CLEAR;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <LPTIM1_IRQHandler+0x18>)
 8000f88:	6853      	ldr	r3, [r2, #4]
 8000f8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8000f8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8000f92:	6053      	str	r3, [r2, #4]
 8000f94:	bd08      	pop	{r3, pc}
 8000f96:	bf00      	nop
 8000f98:	40007c00 	.word	0x40007c00

08000f9c <ADC1_IRQHandler>:
}

void ADC1_IRQHandler(void)
{
 8000f9c:	b538      	push	{r3, r4, r5, lr}
fc = ((ADC1)->ISR);
 8000f9e:	4d20      	ldr	r5, [pc, #128]	; (8001020 <ADC1_IRQHandler+0x84>)
 8000fa0:	4c20      	ldr	r4, [pc, #128]	; (8001024 <ADC1_IRQHandler+0x88>)
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	6023      	str	r3, [r4, #0]

if(fc & EOCI)
 8000fa6:	0759      	lsls	r1, r3, #29
 8000fa8:	d50a      	bpl.n	8000fc0 <ADC1_IRQHandler+0x24>
{
data = ((ADC1)->DR);
 8000faa:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <ADC1_IRQHandler+0x8c>)
add_sample(data,0U);
 8000fae:	2100      	movs	r1, #0
data = ((ADC1)->DR);
 8000fb0:	8018      	strh	r0, [r3, #0]
add_sample(data,0U);
 8000fb2:	b280      	uxth	r0, r0
 8000fb4:	f000 fddc 	bl	8001b70 <add_sample>
((ADC1)->ISR) |= EOCI;
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	602b      	str	r3, [r5, #0]
}

if(fc & EOSI)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	071a      	lsls	r2, r3, #28
 8000fc4:	d506      	bpl.n	8000fd4 <ADC1_IRQHandler+0x38>
{
((ADC1)->ISR) |= EOSI;
 8000fc6:	4a16      	ldr	r2, [pc, #88]	; (8001020 <ADC1_IRQHandler+0x84>)
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6013      	str	r3, [r2, #0]
raise_avg_flag();
 8000fd0:	f000 fda2 	bl	8001b18 <raise_avg_flag>
}

if(fc & JEOSI)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	065b      	lsls	r3, r3, #25
 8000fd8:	d519      	bpl.n	800100e <ADC1_IRQHandler+0x72>
{
data = ((ADC1)->JDR1);
 8000fda:	4c11      	ldr	r4, [pc, #68]	; (8001020 <ADC1_IRQHandler+0x84>)
 8000fdc:	4d12      	ldr	r5, [pc, #72]	; (8001028 <ADC1_IRQHandler+0x8c>)
 8000fde:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000fe2:	8028      	strh	r0, [r5, #0]
add_sample(data,1U);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	b280      	uxth	r0, r0
 8000fe8:	f000 fdc2 	bl	8001b70 <add_sample>
data = ((ADC1)->JDR2);
 8000fec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8000ff0:	8028      	strh	r0, [r5, #0]
add_sample(data,1U);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	b280      	uxth	r0, r0
 8000ff6:	f000 fdbb 	bl	8001b70 <add_sample>
raise_temp_flag();
 8000ffa:	f000 fda3 	bl	8001b44 <raise_temp_flag>
((ADC1)->ISR) |= JEOSI;
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001004:	6023      	str	r3, [r4, #0]
driveB(3U,0U);
 8001006:	2100      	movs	r1, #0
 8001008:	2003      	movs	r0, #3
 800100a:	f000 fe27 	bl	8001c5c <driveB>
}

((ADC1)->ISR) |= ADC1_FLAG_CLEAR;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <ADC1_IRQHandler+0x84>)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	ea6f 23d3 	mvn.w	r3, r3, lsr #11
 8001016:	ea6f 23c3 	mvn.w	r3, r3, lsl #11
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	bf00      	nop
 8001020:	50040000 	.word	0x50040000
 8001024:	20000458 	.word	0x20000458
 8001028:	20000456 	.word	0x20000456

0800102c <TIM1_CC_IRQHandler>:

}

void TIM1_CC_IRQHandler(void)
{shift_action();}
 800102c:	f001 bc56 	b.w	80028dc <shift_action>

08001030 <NMI_Handler>:
 8001030:	4770      	bx	lr

08001032 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler>

08001034 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler>

08001036 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler>

08001038 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler>

0800103a <SVC_Handler>:
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f7ff f8e3 	bl	800020c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800104a:	f7ff b956 	b.w	80002fa <HAL_SYSTICK_IRQHandler>
	...

08001050 <system_ptr_config>:

}

void system_ptr_config(void)
{
	dbg1=0U;
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <system_ptr_config+0xe8>)
 8001052:	483a      	ldr	r0, [pc, #232]	; (800113c <system_ptr_config+0xec>)
 8001054:	493a      	ldr	r1, [pc, #232]	; (8001140 <system_ptr_config+0xf0>)
{
 8001056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dbg1=0U;
 8001058:	2300      	movs	r3, #0
 800105a:	6013      	str	r3, [r2, #0]
	dbg2=0U;
 800105c:	4a39      	ldr	r2, [pc, #228]	; (8001144 <system_ptr_config+0xf4>)
 800105e:	4d3a      	ldr	r5, [pc, #232]	; (8001148 <system_ptr_config+0xf8>)
 8001060:	6013      	str	r3, [r2, #0]

	for(sysi = 0U; sysi < 100U; sysi++)
 8001062:	4a3a      	ldr	r2, [pc, #232]	; (800114c <system_ptr_config+0xfc>)
 8001064:	461f      	mov	r7, r3
 8001066:	7013      	strb	r3, [r2, #0]
 8001068:	461c      	mov	r4, r3
 800106a:	b2de      	uxtb	r6, r3
 800106c:	2e64      	cmp	r6, #100	; 0x64
 800106e:	d159      	bne.n	8001124 <system_ptr_config+0xd4>
 8001070:	b107      	cbz	r7, 8001074 <system_ptr_config+0x24>
 8001072:	7016      	strb	r6, [r2, #0]
	{
	cs_channel.samples[sysi] = 0U;
	iv_channel.samples[sysi] = 0U;
	ov_channel.samples[sysi] = 0U;
	}
	cs_channel.avg = 0U;
 8001074:	f8c5 4320 	str.w	r4, [r5, #800]	; 0x320
	iv_channel.avg = 0U;
 8001078:	f8c0 4320 	str.w	r4, [r0, #800]	; 0x320
	ov_channel.avg = 0U;
 800107c:	f8c1 4320 	str.w	r4, [r1, #800]	; 0x320

	system_time = read_time();
 8001080:	f7ff fec2 	bl	8000e08 <read_time>
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <system_ptr_config+0x100>)
 8001086:	6018      	str	r0, [r3, #0]
	last_vsamp = 0U;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <system_ptr_config+0x104>)
 800108a:	601c      	str	r4, [r3, #0]
	last_tsamp = 0U;
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <system_ptr_config+0x108>)
 800108e:	601c      	str	r4, [r3, #0]

	system_flags = 0U;
	system_flags |= (ADC_INIT_FLAG|TEMP_INIT_FLAG|PMIC_INIT_FLAG|START_UP_FLAG);
 8001090:	4b32      	ldr	r3, [pc, #200]	; (800115c <system_ptr_config+0x10c>)
 8001092:	f640 0231 	movw	r2, #2097	; 0x831
 8001096:	601a      	str	r2, [r3, #0]
	start_up_flags = 0U;
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <system_ptr_config+0x110>)
 800109a:	601c      	str	r4, [r3, #0]
	adc_conversion_channel = 1U;
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <system_ptr_config+0x114>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
	cs_offset = 0U;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <system_ptr_config+0x118>)
 80010a4:	801c      	strh	r4, [r3, #0]
	v_ovp = DEFAULT_OVP;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <system_ptr_config+0x11c>)
 80010a8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80010ac:	801a      	strh	r2, [r3, #0]
	i_target = DEFAULT_I_TARGET;
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <system_ptr_config+0x120>)
 80010b0:	f240 23ee 	movw	r3, #750	; 0x2ee
 80010b4:	8013      	strh	r3, [r2, #0]
	hs_i_target = DEFAULT_I_TARGET;
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <system_ptr_config+0x124>)
 80010b8:	8013      	strh	r3, [r2, #0]
	us_i_target = DEFAULT_I_TARGET;
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <system_ptr_config+0x128>)
 80010bc:	8013      	strh	r3, [r2, #0]
	th_i_target = DEFAULT_I_TARGET;
 80010be:	4a2f      	ldr	r2, [pc, #188]	; (800117c <system_ptr_config+0x12c>)
 80010c0:	8013      	strh	r3, [r2, #0]
	v_uvp = DEFAULT_UVP;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <system_ptr_config+0x130>)
 80010c4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80010c8:	801a      	strh	r2, [r3, #0]
	exp_ov = EXP_VOLTAGE;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <system_ptr_config+0x134>)
 80010cc:	f240 620e 	movw	r2, #1550	; 0x60e
 80010d0:	801a      	strh	r2, [r3, #0]
	wire_error_count = 0U;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <system_ptr_config+0x138>)
 80010d4:	801c      	strh	r4, [r3, #0]
	stable_count = 0U;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <system_ptr_config+0x13c>)
 80010d8:	701c      	strb	r4, [r3, #0]
	temp_sample_level = 4095U;
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <system_ptr_config+0x140>)
 80010dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010e0:	801a      	strh	r2, [r3, #0]
	wire_sample_level = 2047U;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <system_ptr_config+0x144>)
 80010e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010e8:	801a      	strh	r2, [r3, #0]
	up_button_dbnc = 0U;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <system_ptr_config+0x148>)
	down_button_dbnc = 0U;
	up_button_hold_count = 0U;
	down_button_hold_count = 0U;
    button_delay = (((system_time)->time_nums)[millis]);
 80010ec:	6842      	ldr	r2, [r0, #4]
	up_button_dbnc = 0U;
 80010ee:	601c      	str	r4, [r3, #0]
	down_button_dbnc = 0U;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <system_ptr_config+0x14c>)
 80010f2:	601c      	str	r4, [r3, #0]
	up_button_hold_count = 0U;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <system_ptr_config+0x150>)
 80010f6:	601c      	str	r4, [r3, #0]
	down_button_hold_count = 0U;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <system_ptr_config+0x154>)
 80010fa:	601c      	str	r4, [r3, #0]
    button_delay = (((system_time)->time_nums)[millis]);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <system_ptr_config+0x158>)
 80010fe:	601a      	str	r2, [r3, #0]
    dim_step = 25U;
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <system_ptr_config+0x15c>)
 8001102:	2219      	movs	r2, #25
 8001104:	601a      	str	r2, [r3, #0]


	ts_cal1 = *((int16_t*)TS_CAL1_PTR);
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <system_ptr_config+0x160>)
 8001108:	f9b3 2000 	ldrsh.w	r2, [r3]
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <system_ptr_config+0x164>)
 800110e:	801a      	strh	r2, [r3, #0]
	ts_cal2 = *((int16_t*)TS_CAL2_PTR);
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <system_ptr_config+0x168>)
 8001112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <system_ptr_config+0x16c>)

	dac_set(0U);
 8001118:	2000      	movs	r0, #0
	ts_cal2 = *((int16_t*)TS_CAL2_PTR);
 800111a:	801a      	strh	r2, [r3, #0]

}
 800111c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	dac_set(0U);
 8001120:	f7ff be02 	b.w	8000d28 <dac_set>
	cs_channel.samples[sysi] = 0U;
 8001124:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	iv_channel.samples[sysi] = 0U;
 8001128:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	ov_channel.samples[sysi] = 0U;
 800112c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8001130:	2701      	movs	r7, #1
 8001132:	3301      	adds	r3, #1
 8001134:	e799      	b.n	800106a <system_ptr_config+0x1a>
 8001136:	bf00      	nop
 8001138:	20001478 	.word	0x20001478
 800113c:	20001150 	.word	0x20001150
 8001140:	2000045c 	.word	0x2000045c
 8001144:	20000de4 	.word	0x20000de4
 8001148:	20000ab8 	.word	0x20000ab8
 800114c:	20000df4 	.word	0x20000df4
 8001150:	20001480 	.word	0x20001480
 8001154:	200014bc 	.word	0x200014bc
 8001158:	20000ab4 	.word	0x20000ab4
 800115c:	20000dfc 	.word	0x20000dfc
 8001160:	2000148c 	.word	0x2000148c
 8001164:	20000dec 	.word	0x20000dec
 8001168:	200014a4 	.word	0x200014a4
 800116c:	20000e0e 	.word	0x20000e0e
 8001170:	2000114c 	.word	0x2000114c
 8001174:	20000ab0 	.word	0x20000ab0
 8001178:	200014a8 	.word	0x200014a8
 800117c:	200014cc 	.word	0x200014cc
 8001180:	20001138 	.word	0x20001138
 8001184:	20000e0c 	.word	0x20000e0c
 8001188:	2000113a 	.word	0x2000113a
 800118c:	20000784 	.word	0x20000784
 8001190:	20001498 	.word	0x20001498
 8001194:	200014ca 	.word	0x200014ca
 8001198:	200014b0 	.word	0x200014b0
 800119c:	20000df8 	.word	0x20000df8
 80011a0:	20000de8 	.word	0x20000de8
 80011a4:	20001494 	.word	0x20001494
 80011a8:	20000de0 	.word	0x20000de0
 80011ac:	200014b4 	.word	0x200014b4
 80011b0:	1fff75a8 	.word	0x1fff75a8
 80011b4:	200014c0 	.word	0x200014c0
 80011b8:	1fff75ca 	.word	0x1fff75ca
 80011bc:	200014a6 	.word	0x200014a6

080011c0 <start_up_check>:

uint32_t start_up_check(void)
{
if(system_flags & START_UP_FLAG)
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <start_up_check+0xc>)
 80011c2:	6818      	ldr	r0, [r3, #0]
{return 1U;}
else
{return 0U;}
}
 80011c4:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000dfc 	.word	0x20000dfc

080011d0 <button_managment>:


void button_managment(void)
{

if((((system_time)->time_nums)[millis]) != button_delay)
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <button_managment+0x174>)
 80011d2:	495d      	ldr	r1, [pc, #372]	; (8001348 <button_managment+0x178>)
 80011d4:	6803      	ldr	r3, [r0, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	429a      	cmp	r2, r3
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
if((((system_time)->time_nums)[millis]) != button_delay)
 80011de:	d03e      	beq.n	800125e <button_managment+0x8e>
{
	up_button_dbnc = up_button_dbnc << 1U;
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <button_managment+0x17c>)
	down_button_dbnc = down_button_dbnc << 1U;
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <button_managment+0x180>)
	up_button_dbnc = up_button_dbnc << 1U;
 80011e4:	681d      	ldr	r5, [r3, #0]
	down_button_dbnc = down_button_dbnc << 1U;
 80011e6:	6814      	ldr	r4, [r2, #0]

	if((((GPIOB)->IDR) & UP_BUTTON) == 0U)
 80011e8:	4e5a      	ldr	r6, [pc, #360]	; (8001354 <button_managment+0x184>)
	up_button_dbnc = up_button_dbnc << 1U;
 80011ea:	006d      	lsls	r5, r5, #1
	down_button_dbnc = down_button_dbnc << 1U;
 80011ec:	0064      	lsls	r4, r4, #1
	up_button_dbnc = up_button_dbnc << 1U;
 80011ee:	601d      	str	r5, [r3, #0]
	down_button_dbnc = down_button_dbnc << 1U;
 80011f0:	6014      	str	r4, [r2, #0]
	if((((GPIOB)->IDR) & UP_BUTTON) == 0U)
 80011f2:	6937      	ldr	r7, [r6, #16]
 80011f4:	067f      	lsls	r7, r7, #25
	{up_button_dbnc |= 1U;}
 80011f6:	bf5c      	itt	pl
 80011f8:	f045 0501 	orrpl.w	r5, r5, #1
 80011fc:	601d      	strpl	r5, [r3, #0]
	if((((GPIOB)->IDR) & DOWN_BUTTON) == 0U)
 80011fe:	6935      	ldr	r5, [r6, #16]
	{down_button_dbnc |= 1U;}


	if(up_button_dbnc == BUTTON_PRESSED)
 8001200:	681b      	ldr	r3, [r3, #0]
	if((((GPIOB)->IDR) & DOWN_BUTTON) == 0U)
 8001202:	062d      	lsls	r5, r5, #24
	{down_button_dbnc |= 1U;}
 8001204:	bf5c      	itt	pl
 8001206:	f044 0401 	orrpl.w	r4, r4, #1
 800120a:	6014      	strpl	r4, [r2, #0]
	if(up_button_dbnc == BUTTON_PRESSED)
 800120c:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8001210:	42a3      	cmp	r3, r4
 8001212:	d125      	bne.n	8001260 <button_managment+0x90>
	{up_button_hold_count = 0U;}
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <button_managment+0x188>)
 8001216:	2400      	movs	r4, #0
 8001218:	601c      	str	r4, [r3, #0]
		}

	}


	if(down_button_dbnc == BUTTON_PRESSED)
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8001220:	42a3      	cmp	r3, r4
 8001222:	d16c      	bne.n	80012fe <button_managment+0x12e>
	{down_button_hold_count = 0U;}
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <button_managment+0x18c>)
 8001226:	2400      	movs	r4, #0
 8001228:	601c      	str	r4, [r3, #0]
    down_button_hold_count = 0U;
	}

	}

    if(down_button_dbnc == BUTTON_RELEASED)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001230:	d112      	bne.n	8001258 <button_managment+0x88>
    {
    	if(us_i_target > (cs_offset + dim_step))
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <button_managment+0x190>)
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <button_managment+0x194>)
 8001236:	4c4c      	ldr	r4, [pc, #304]	; (8001368 <button_managment+0x198>)
 8001238:	6816      	ldr	r6, [r2, #0]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	8827      	ldrh	r7, [r4, #0]
 800123e:	4a4b      	ldr	r2, [pc, #300]	; (800136c <button_managment+0x19c>)
 8001240:	4433      	add	r3, r6
 8001242:	429f      	cmp	r7, r3
 8001244:	d97b      	bls.n	800133e <button_managment+0x16e>
    	{
    	   if(us_i_target > i_target)
 8001246:	8813      	ldrh	r3, [r2, #0]
 8001248:	429f      	cmp	r7, r3
    	   {us_i_target = i_target;}
 800124a:	bf88      	it	hi
 800124c:	8023      	strhhi	r3, [r4, #0]

    	   us_i_target -= dim_step;
 800124e:	8823      	ldrh	r3, [r4, #0]
 8001250:	1b9b      	subs	r3, r3, r6
 8001252:	b29b      	uxth	r3, r3
 8001254:	8023      	strh	r3, [r4, #0]
    	   i_target = us_i_target;
    	}
    	else
    	{
    	us_i_target = cs_offset+dim_step;
    	i_target = us_i_target;
 8001256:	8013      	strh	r3, [r2, #0]
    	}
    }



	button_delay = (((system_time)->time_nums)[millis]);
 8001258:	6803      	ldr	r3, [r0, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	600b      	str	r3, [r1, #0]
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(up_button_dbnc == BUTTON_HELD)
 8001260:	1c5f      	adds	r7, r3, #1
 8001262:	d127      	bne.n	80012b4 <button_managment+0xe4>
	up_button_hold_count += 1U;
 8001264:	4c3c      	ldr	r4, [pc, #240]	; (8001358 <button_managment+0x188>)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	3301      	adds	r3, #1
	if(up_button_hold_count == 50U)
 800126a:	2b32      	cmp	r3, #50	; 0x32
	up_button_hold_count += 1U;
 800126c:	6023      	str	r3, [r4, #0]
	if(up_button_hold_count == 50U)
 800126e:	d1d4      	bne.n	800121a <button_managment+0x4a>
	if(us_i_target < (hs_i_target- dim_step))
 8001270:	4c3f      	ldr	r4, [pc, #252]	; (8001370 <button_managment+0x1a0>)
 8001272:	4e3b      	ldr	r6, [pc, #236]	; (8001360 <button_managment+0x190>)
 8001274:	4d3c      	ldr	r5, [pc, #240]	; (8001368 <button_managment+0x198>)
 8001276:	8824      	ldrh	r4, [r4, #0]
 8001278:	6836      	ldr	r6, [r6, #0]
 800127a:	882b      	ldrh	r3, [r5, #0]
 800127c:	1ba7      	subs	r7, r4, r6
 800127e:	42bb      	cmp	r3, r7
 8001280:	d20e      	bcs.n	80012a0 <button_managment+0xd0>
		if(us_i_target < (th_i_target - dim_step))
 8001282:	4c3c      	ldr	r4, [pc, #240]	; (8001374 <button_managment+0x1a4>)
 8001284:	8824      	ldrh	r4, [r4, #0]
 8001286:	1ba7      	subs	r7, r4, r6
 8001288:	42bb      	cmp	r3, r7
			us_i_target += dim_step;
 800128a:	bf38      	it	cc
 800128c:	199b      	addcc	r3, r3, r6
 800128e:	4f37      	ldr	r7, [pc, #220]	; (800136c <button_managment+0x19c>)
		us_i_target = th_i_target;
 8001290:	bf2f      	iteee	cs
 8001292:	802c      	strhcs	r4, [r5, #0]
			us_i_target += dim_step;
 8001294:	b29b      	uxthcc	r3, r3
 8001296:	802b      	strhcc	r3, [r5, #0]
			i_target = us_i_target;
 8001298:	803b      	strhcc	r3, [r7, #0]
		i_target = th_i_target;
 800129a:	bf28      	it	cs
 800129c:	803c      	strhcs	r4, [r7, #0]
 800129e:	e7b9      	b.n	8001214 <button_managment+0x44>
	if((system_flags & THERMAL_CON_FLAG) == 0U)
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <button_managment+0x1a8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	05de      	lsls	r6, r3, #23
 80012a6:	d4b5      	bmi.n	8001214 <button_managment+0x44>
	th_i_target = hs_i_target;
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <button_managment+0x1a4>)
	us_i_target = hs_i_target;
 80012aa:	802c      	strh	r4, [r5, #0]
	th_i_target = hs_i_target;
 80012ac:	801c      	strh	r4, [r3, #0]
	i_target = hs_i_target;
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <button_managment+0x19c>)
 80012b0:	801c      	strh	r4, [r3, #0]
 80012b2:	e7af      	b.n	8001214 <button_managment+0x44>
	if(up_button_dbnc == BUTTON_RELEASED)
 80012b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012b8:	d1af      	bne.n	800121a <button_managment+0x4a>
		if(us_i_target < (hs_i_target- dim_step))
 80012ba:	4c2d      	ldr	r4, [pc, #180]	; (8001370 <button_managment+0x1a0>)
 80012bc:	4e28      	ldr	r6, [pc, #160]	; (8001360 <button_managment+0x190>)
 80012be:	4d2a      	ldr	r5, [pc, #168]	; (8001368 <button_managment+0x198>)
 80012c0:	8824      	ldrh	r4, [r4, #0]
 80012c2:	6836      	ldr	r6, [r6, #0]
 80012c4:	882b      	ldrh	r3, [r5, #0]
 80012c6:	1ba7      	subs	r7, r4, r6
 80012c8:	42bb      	cmp	r3, r7
 80012ca:	d20e      	bcs.n	80012ea <button_managment+0x11a>
			if(us_i_target < (th_i_target - dim_step))
 80012cc:	4c29      	ldr	r4, [pc, #164]	; (8001374 <button_managment+0x1a4>)
 80012ce:	8824      	ldrh	r4, [r4, #0]
 80012d0:	1ba7      	subs	r7, r4, r6
 80012d2:	42bb      	cmp	r3, r7
				us_i_target += dim_step;
 80012d4:	bf38      	it	cc
 80012d6:	199b      	addcc	r3, r3, r6
 80012d8:	4f24      	ldr	r7, [pc, #144]	; (800136c <button_managment+0x19c>)
			us_i_target = th_i_target;
 80012da:	bf2f      	iteee	cs
 80012dc:	802c      	strhcs	r4, [r5, #0]
				us_i_target += dim_step;
 80012de:	b29b      	uxthcc	r3, r3
 80012e0:	802b      	strhcc	r3, [r5, #0]
				i_target = us_i_target;
 80012e2:	803b      	strhcc	r3, [r7, #0]
			i_target = th_i_target;
 80012e4:	bf28      	it	cs
 80012e6:	803c      	strhcs	r4, [r7, #0]
 80012e8:	e797      	b.n	800121a <button_managment+0x4a>
		if((system_flags & THERMAL_CON_FLAG) == 0U)
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <button_managment+0x1a8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	d493      	bmi.n	800121a <button_managment+0x4a>
		th_i_target = hs_i_target;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <button_managment+0x1a4>)
		us_i_target = hs_i_target;
 80012f4:	802c      	strh	r4, [r5, #0]
		th_i_target = hs_i_target;
 80012f6:	801c      	strh	r4, [r3, #0]
		i_target = hs_i_target;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <button_managment+0x19c>)
 80012fa:	801c      	strh	r4, [r3, #0]
 80012fc:	e78d      	b.n	800121a <button_managment+0x4a>
	if(down_button_dbnc == BUTTON_HELD)
 80012fe:	3301      	adds	r3, #1
 8001300:	d193      	bne.n	800122a <button_managment+0x5a>
	down_button_hold_count += 1U;
 8001302:	4c16      	ldr	r4, [pc, #88]	; (800135c <button_managment+0x18c>)
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	3301      	adds	r3, #1
	if(down_button_hold_count == 50U)
 8001308:	2b32      	cmp	r3, #50	; 0x32
	down_button_hold_count += 1U;
 800130a:	6023      	str	r3, [r4, #0]
	if(down_button_hold_count == 50U)
 800130c:	d1a4      	bne.n	8001258 <button_managment+0x88>
	if(us_i_target > (cs_offset + dim_step))
 800130e:	4c14      	ldr	r4, [pc, #80]	; (8001360 <button_managment+0x190>)
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <button_managment+0x194>)
 8001312:	4d15      	ldr	r5, [pc, #84]	; (8001368 <button_managment+0x198>)
 8001314:	6827      	ldr	r7, [r4, #0]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	f8b5 e000 	ldrh.w	lr, [r5]
 800131c:	4c13      	ldr	r4, [pc, #76]	; (800136c <button_managment+0x19c>)
 800131e:	443b      	add	r3, r7
 8001320:	459e      	cmp	lr, r3
 8001322:	d909      	bls.n	8001338 <button_managment+0x168>
		   if(us_i_target > i_target)
 8001324:	8823      	ldrh	r3, [r4, #0]
 8001326:	459e      	cmp	lr, r3
		   {us_i_target = i_target;}
 8001328:	bf88      	it	hi
 800132a:	802b      	strhhi	r3, [r5, #0]
			us_i_target -= dim_step;
 800132c:	882b      	ldrh	r3, [r5, #0]
 800132e:	1bdb      	subs	r3, r3, r7
 8001330:	b29b      	uxth	r3, r3
 8001332:	802b      	strh	r3, [r5, #0]
	i_target = us_i_target;
 8001334:	8023      	strh	r3, [r4, #0]
 8001336:	e775      	b.n	8001224 <button_managment+0x54>
	us_i_target = cs_offset+dim_step;
 8001338:	b29b      	uxth	r3, r3
 800133a:	802b      	strh	r3, [r5, #0]
 800133c:	e7fa      	b.n	8001334 <button_managment+0x164>
    	us_i_target = cs_offset+dim_step;
 800133e:	b29b      	uxth	r3, r3
 8001340:	8023      	strh	r3, [r4, #0]
 8001342:	e788      	b.n	8001256 <button_managment+0x86>
 8001344:	20001480 	.word	0x20001480
 8001348:	20000de0 	.word	0x20000de0
 800134c:	200014b0 	.word	0x200014b0
 8001350:	20000df8 	.word	0x20000df8
 8001354:	48000400 	.word	0x48000400
 8001358:	20000de8 	.word	0x20000de8
 800135c:	20001494 	.word	0x20001494
 8001360:	200014b4 	.word	0x200014b4
 8001364:	200014a4 	.word	0x200014a4
 8001368:	200014a8 	.word	0x200014a8
 800136c:	2000114c 	.word	0x2000114c
 8001370:	20000ab0 	.word	0x20000ab0
 8001374:	200014cc 	.word	0x200014cc
 8001378:	20000dfc 	.word	0x20000dfc

0800137c <thermal_management>:
}

void thermal_management(void)
{

	if(system_flags & TEMP_INIT_FLAG)
 800137c:	484a      	ldr	r0, [pc, #296]	; (80014a8 <thermal_management+0x12c>)
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	f013 0f10 	tst.w	r3, #16
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	4601      	mov	r1, r0
	if(system_flags & TEMP_INIT_FLAG)
 8001388:	d17b      	bne.n	8001482 <thermal_management+0x106>
	{return;}
	/*Check for extreme conditions*/
	if((system_flags & PMIC_ENABLE_FLAG) == 0U)
 800138a:	065e      	lsls	r6, r3, #25
 800138c:	d579      	bpl.n	8001482 <thermal_management+0x106>
	{return;}

	if(((&ex_temp)->avg) <= SHORT_WIRE_RUN)
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <thermal_management+0x130>)
 8001390:	f8d2 2320 	ldr.w	r2, [r2, #800]	; 0x320
 8001394:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8001398:	d807      	bhi.n	80013aa <thermal_management+0x2e>
	}

	if(((&ex_temp)->avg) >= COLD_TEMP)
	{
	system_flags |= THERM_WIRE_ERR_FLAG;
	wire_error_count+=1U;
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <thermal_management+0x134>)
	system_flags |= THERM_WIRE_ERR_FLAG;
 800139c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a0:	6003      	str	r3, [r0, #0]
	wire_error_count+=1U;
 80013a2:	8813      	ldrh	r3, [r2, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	8013      	strh	r3, [r2, #0]
	return;
 80013a8:	bd70      	pop	{r4, r5, r6, pc}
	if(((&ex_temp)->avg) >= OPEN_WIRE_RUN)
 80013aa:	f640 14b4 	movw	r4, #2484	; 0x9b4
 80013ae:	42a2      	cmp	r2, r4
 80013b0:	d8f3      	bhi.n	800139a <thermal_management+0x1e>
	if(((&ex_temp)->avg) <= HOT_TEMP)
 80013b2:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 80013b6:	d9f0      	bls.n	800139a <thermal_management+0x1e>
	if(((&ex_temp)->avg) >= COLD_TEMP)
 80013b8:	f640 14a5 	movw	r4, #2469	; 0x9a5
 80013bc:	42a2      	cmp	r2, r4
 80013be:	d8ec      	bhi.n	800139a <thermal_management+0x1e>


     /*No extreme conditions were found proceed with regular thermal management*/

	/*Check to see if the threshold for thermal foldback has been reached*/
	if((system_flags & THERMAL_CON_FLAG) == 0U)
 80013c0:	05dd      	lsls	r5, r3, #23
 80013c2:	d45f      	bmi.n	8001484 <thermal_management+0x108>
	{
		if(((&ex_temp)->avg) < (FOLDBACK_TEMP - THERMAL_HYS))
 80013c4:	f240 30b5 	movw	r0, #949	; 0x3b5
 80013c8:	4282      	cmp	r2, r0
 80013ca:	d806      	bhi.n	80013da <thermal_management+0x5e>
			{
			system_flags |= THERMAL_CON_FLAG;
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
			/*Artificially set the last temperature to induce a thermal delta*/
			last_temp = ((&ex_temp)->avg) + (2U*THERMAL_MAX_DELTA);
 80013d0:	4838      	ldr	r0, [pc, #224]	; (80014b4 <thermal_management+0x138>)
			system_flags |= THERMAL_CON_FLAG;
 80013d2:	600b      	str	r3, [r1, #0]
			last_temp = ((&ex_temp)->avg) + (2U*THERMAL_MAX_DELTA);
 80013d4:	f102 0364 	add.w	r3, r2, #100	; 0x64
 80013d8:	8003      	strh	r3, [r0, #0]
			}
		system_flags &= ~(THERMAL_ACTION_FLAG);
 80013da:	680b      	ldr	r3, [r1, #0]
 80013dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	/*If the thermal con flag is popped and temps are below the
	 * foldback point turn off the thermal control*/
	else
	{
		if(((&ex_temp)->avg) > (FOLDBACK_TEMP + THERMAL_HYS))
				{system_flags &= ~(THERMAL_CON_FLAG|THERMAL_ACTION_FLAG);}
 80013e0:	600b      	str	r3, [r1, #0]
	}


	/*If the thermal control flag is set*/
	if(system_flags & THERMAL_CON_FLAG)
 80013e2:	680b      	ldr	r3, [r1, #0]
 80013e4:	05dc      	lsls	r4, r3, #23
 80013e6:	d54c      	bpl.n	8001482 <thermal_management+0x106>
	{
		/*If the delay end marker is turned off*/
		if((system_flags & THERMAL_ACTION_FLAG) == 0U)
 80013e8:	0598      	lsls	r0, r3, #22
 80013ea:	d452      	bmi.n	8001492 <thermal_management+0x116>
		{
		/*If the light is getting hotter*/
	    if(((&ex_temp)->avg) < last_temp)
 80013ec:	4831      	ldr	r0, [pc, #196]	; (80014b4 <thermal_management+0x138>)
 80013ee:	8804      	ldrh	r4, [r0, #0]
 80013f0:	42a2      	cmp	r2, r4
 80013f2:	d21c      	bcs.n	800142e <thermal_management+0xb2>
	    {
	    /*Examine the derivative to determine if enough thermal change has occured
	     *that the light requires a reduction in power*/
	    pl = last_temp - ((&ex_temp)->avg);
 80013f4:	1aa4      	subs	r4, r4, r2
 80013f6:	4d30      	ldr	r5, [pc, #192]	; (80014b8 <thermal_management+0x13c>)
	    if(pl > THERMAL_MAX_DELTA)
 80013f8:	2c32      	cmp	r4, #50	; 0x32
	    pl = last_temp - ((&ex_temp)->avg);
 80013fa:	602c      	str	r4, [r5, #0]
	    if(pl > THERMAL_MAX_DELTA)
 80013fc:	d917      	bls.n	800142e <thermal_management+0xb2>
	    {
	    /*Reduction in power*/
	    if(i_target <= 30)
 80013fe:	4d2f      	ldr	r5, [pc, #188]	; (80014bc <thermal_management+0x140>)
	    {i_target = 40U;}
	    else
	    {i_target -= 25U;}
	    /*Save the current temperature as the last temperature*/
	    last_temp = ((&ex_temp)->avg);
 8001400:	8002      	strh	r2, [r0, #0]
	    if(i_target <= 30)
 8001402:	882c      	ldrh	r4, [r5, #0]
 8001404:	2c1e      	cmp	r4, #30
	    {i_target = 40U;}
 8001406:	bf94      	ite	ls
 8001408:	2428      	movls	r4, #40	; 0x28
	    {i_target -= 25U;}
 800140a:	3c19      	subhi	r4, #25
 800140c:	802c      	strh	r4, [r5, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 800140e:	4c2c      	ldr	r4, [pc, #176]	; (80014c0 <thermal_management+0x144>)
 8001410:	4d2c      	ldr	r5, [pc, #176]	; (80014c4 <thermal_management+0x148>)
 8001412:	6824      	ldr	r4, [r4, #0]
 8001414:	6864      	ldr	r4, [r4, #4]
 8001416:	f204 26ee 	addw	r6, r4, #750	; 0x2ee

	    /*Numbers management*/
	    if(last_therm_action >= 1000U)
 800141a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
	    {last_therm_action -= 1000U;}
 800141e:	bf28      	it	cs
 8001420:	3cfa      	subcs	r4, #250	; 0xfa

	    /*Trigger the thermal action flag */
	    system_flags |= THERMAL_ACTION_FLAG;
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001426:	bf34      	ite	cc
 8001428:	602e      	strcc	r6, [r5, #0]
	    {last_therm_action -= 1000U;}
 800142a:	602c      	strcs	r4, [r5, #0]
	    system_flags |= THERMAL_ACTION_FLAG;
 800142c:	600b      	str	r3, [r1, #0]
	    }
	    }

	    /*If the temperature has lowered then */
	    if(((&ex_temp)->avg) > last_temp)
 800142e:	8803      	ldrh	r3, [r0, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d926      	bls.n	8001482 <thermal_management+0x106>
	    {
	    /*If lowered enough turn up the light to the max level possible*/
	    pl =((&ex_temp)->avg) - last_temp;
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	4c20      	ldr	r4, [pc, #128]	; (80014b8 <thermal_management+0x13c>)
	    if(pl > THERMAL_MAX_DELTA)
 8001438:	2b32      	cmp	r3, #50	; 0x32
	    pl =((&ex_temp)->avg) - last_temp;
 800143a:	6023      	str	r3, [r4, #0]
	    if(pl > THERMAL_MAX_DELTA)
 800143c:	d921      	bls.n	8001482 <thermal_management+0x106>
	    {
	    i_target += 25U;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <thermal_management+0x140>)

	    if(i_target > (hs_i_target))
 8001440:	4d21      	ldr	r5, [pc, #132]	; (80014c8 <thermal_management+0x14c>)
	    i_target += 25U;
 8001442:	881c      	ldrh	r4, [r3, #0]
	    if(i_target > (hs_i_target))
 8001444:	882d      	ldrh	r5, [r5, #0]
	    {i_target = hs_i_target;}

	    if(i_target > (us_i_target))
	    {i_target = us_i_target;}

	    last_temp = ((&ex_temp)->avg);
 8001446:	8002      	strh	r2, [r0, #0]
	    i_target += 25U;
 8001448:	3419      	adds	r4, #25
 800144a:	b2a4      	uxth	r4, r4
 800144c:	801c      	strh	r4, [r3, #0]
	    if(i_target > (hs_i_target))
 800144e:	42ac      	cmp	r4, r5
	    if(i_target > (us_i_target))
 8001450:	4c1e      	ldr	r4, [pc, #120]	; (80014cc <thermal_management+0x150>)
	    {i_target = hs_i_target;}
 8001452:	bf88      	it	hi
 8001454:	801d      	strhhi	r5, [r3, #0]
	    if(i_target > (us_i_target))
 8001456:	881d      	ldrh	r5, [r3, #0]
 8001458:	8824      	ldrh	r4, [r4, #0]
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <thermal_management+0x148>)
 800145c:	42a5      	cmp	r5, r4
	    {i_target = us_i_target;}
 800145e:	bf88      	it	hi
 8001460:	801c      	strhhi	r4, [r3, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <thermal_management+0x144>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f203 20ee 	addw	r0, r3, #750	; 0x2ee

	    if(last_therm_action >= 1000U)
 800146c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
	    {last_therm_action -= 1000U;}
 8001470:	bf24      	itt	cs
 8001472:	3bfa      	subcs	r3, #250	; 0xfa
 8001474:	6013      	strcs	r3, [r2, #0]

	    system_flags |= THERMAL_ACTION_FLAG;
 8001476:	680b      	ldr	r3, [r1, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001478:	bf38      	it	cc
 800147a:	6010      	strcc	r0, [r2, #0]
	    system_flags |= THERMAL_ACTION_FLAG;
 800147c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
		}

		else
		{
		if((((system_time)->time_nums)[millis]) == last_therm_action)
		{system_flags &= ~(THERMAL_ACTION_FLAG);}
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	bd70      	pop	{r4, r5, r6, pc}
		if(((&ex_temp)->avg) > (FOLDBACK_TEMP + THERMAL_HYS))
 8001484:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8001488:	4282      	cmp	r2, r0
 800148a:	d9aa      	bls.n	80013e2 <thermal_management+0x66>
				{system_flags &= ~(THERMAL_CON_FLAG|THERMAL_ACTION_FLAG);}
 800148c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001490:	e7a6      	b.n	80013e0 <thermal_management+0x64>
		if((((system_time)->time_nums)[millis]) == last_therm_action)
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <thermal_management+0x144>)
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	6850      	ldr	r0, [r2, #4]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <thermal_management+0x148>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4290      	cmp	r0, r2
 800149e:	d1f0      	bne.n	8001482 <thermal_management+0x106>
		{system_flags &= ~(THERMAL_ACTION_FLAG);}
 80014a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014a4:	e7ec      	b.n	8001480 <thermal_management+0x104>
 80014a6:	bf00      	nop
 80014a8:	20000dfc 	.word	0x20000dfc
 80014ac:	20000e10 	.word	0x20000e10
 80014b0:	2000113a 	.word	0x2000113a
 80014b4:	200014c8 	.word	0x200014c8
 80014b8:	20001490 	.word	0x20001490
 80014bc:	2000114c 	.word	0x2000114c
 80014c0:	20001480 	.word	0x20001480
 80014c4:	2000113c 	.word	0x2000113c
 80014c8:	20000ab0 	.word	0x20000ab0
 80014cc:	200014a8 	.word	0x200014a8

080014d0 <start_up_procedure>:

	}
}

void start_up_procedure(void)
{
 80014d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
uint8_t action_taken = 0U;
/*Fist loop through mark the system time and set the DAC to half*/
/*Trigger the flag so this block does not execute until another start-up is*/
/*Executed*/
if((start_up_flags & FIRST_LAP_FLAG) == 0U)
 80014d4:	4d9d      	ldr	r5, [pc, #628]	; (800174c <start_up_procedure+0x27c>)
 80014d6:	4e9e      	ldr	r6, [pc, #632]	; (8001750 <start_up_procedure+0x280>)
 80014d8:	682a      	ldr	r2, [r5, #0]
 80014da:	499e      	ldr	r1, [pc, #632]	; (8001754 <start_up_procedure+0x284>)
 80014dc:	f012 0001 	ands.w	r0, r2, #1
 80014e0:	462c      	mov	r4, r5
 80014e2:	d116      	bne.n	8001512 <start_up_procedure+0x42>
{
stable_count = 0U;
 80014e4:	4b9c      	ldr	r3, [pc, #624]	; (8001758 <start_up_procedure+0x288>)
 80014e6:	7018      	strb	r0, [r3, #0]
i_target = hs_i_target;
 80014e8:	4b9c      	ldr	r3, [pc, #624]	; (800175c <start_up_procedure+0x28c>)
 80014ea:	881a      	ldrh	r2, [r3, #0]
 80014ec:	4b9c      	ldr	r3, [pc, #624]	; (8001760 <start_up_procedure+0x290>)
 80014ee:	801a      	strh	r2, [r3, #0]
sample_end = (((system_time)->time_nums)[seconds]) + 2U;
 80014f0:	6833      	ldr	r3, [r6, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	1c9a      	adds	r2, r3, #2
if(sample_end >= 60U)
 80014f6:	2a3b      	cmp	r2, #59	; 0x3b
{sample_end-=60U;}
 80014f8:	bf84      	itt	hi
 80014fa:	3b3a      	subhi	r3, #58	; 0x3a
 80014fc:	600b      	strhi	r3, [r1, #0]
dac_set(wire_sample_level);
 80014fe:	4b99      	ldr	r3, [pc, #612]	; (8001764 <start_up_procedure+0x294>)
sample_end = (((system_time)->time_nums)[seconds]) + 2U;
 8001500:	bf98      	it	ls
 8001502:	600a      	strls	r2, [r1, #0]
dac_set(wire_sample_level);
 8001504:	8818      	ldrh	r0, [r3, #0]
 8001506:	f7ff fc0f 	bl	8000d28 <dac_set>
start_up_flags = FIRST_LAP_FLAG;
 800150a:	2301      	movs	r3, #1
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
            i_target = hs_i_target;
            }

            if(((&iv_channel)->avg) > (INPUT_BAD + VOLTAGE_HYS))
            {start_up_flags &= ~(INPUT_ERR_FLAG);}
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if((((system_time)->time_nums)[seconds]) == sample_end)
 8001512:	6837      	ldr	r7, [r6, #0]
 8001514:	680b      	ldr	r3, [r1, #0]
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	4298      	cmp	r0, r3
 800151a:	d128      	bne.n	800156e <start_up_procedure+0x9e>
	if(system_flags & TEMP_INIT_FLAG)
 800151c:	f8df e270 	ldr.w	lr, [pc, #624]	; 8001790 <start_up_procedure+0x2c0>
 8001520:	f8de 3000 	ldr.w	r3, [lr]
 8001524:	f013 0c10 	ands.w	ip, r3, #16
 8001528:	d007      	beq.n	800153a <start_up_procedure+0x6a>
	sample_end = (((system_time)->time_nums)[seconds])+2U;
 800152a:	1c83      	adds	r3, r0, #2
	if(sample_end >= 60U)
 800152c:	2b3b      	cmp	r3, #59	; 0x3b
	{sample_end -= 60U;}
 800152e:	bf8a      	itet	hi
 8001530:	383a      	subhi	r0, #58	; 0x3a
	sample_end = (((system_time)->time_nums)[seconds])+2U;
 8001532:	600b      	strls	r3, [r1, #0]
	{sample_end -= 60U;}
 8001534:	6008      	strhi	r0, [r1, #0]
 8001536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(((&ex_temp)->avg) > SHORT_WIRE)
 800153a:	498b      	ldr	r1, [pc, #556]	; (8001768 <start_up_procedure+0x298>)
 800153c:	f8d1 1320 	ldr.w	r1, [r1, #800]	; 0x320
 8001540:	29c8      	cmp	r1, #200	; 0xc8
 8001542:	d903      	bls.n	800154c <start_up_procedure+0x7c>
    if(((&ex_temp)->avg) < OPEN_WIRE)
 8001544:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001548:	4281      	cmp	r1, r0
 800154a:	d90d      	bls.n	8001568 <start_up_procedure+0x98>
     wire_error_count += 1U;
 800154c:	4a87      	ldr	r2, [pc, #540]	; (800176c <start_up_procedure+0x29c>)
     start_up_flags &= 0U;
 800154e:	f8c5 c000 	str.w	ip, [r5]
     system_flags &= ~(START_UP_FLAG);
 8001552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	f8ce 3000 	str.w	r3, [lr]
     wire_error_count += 1U;
 800155e:	8813      	ldrh	r3, [r2, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	8013      	strh	r3, [r2, #0]
     return;
 8001564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {start_up_flags |= NO_OPEN_FLAG;}
 8001568:	f042 0206 	orr.w	r2, r2, #6
 800156c:	602a      	str	r2, [r5, #0]
if((start_up_flags & (NO_SHORT_FLAG|NO_OPEN_FLAG)) == (NO_SHORT_FLAG|NO_OPEN_FLAG))
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	f003 0206 	and.w	r2, r3, #6
 8001574:	2a06      	cmp	r2, #6
 8001576:	d1ca      	bne.n	800150e <start_up_procedure+0x3e>
	if((start_up_flags & RELAY_ENABLE_FLAG) == 0U)
 8001578:	f013 0f08 	tst.w	r3, #8
 800157c:	4d7c      	ldr	r5, [pc, #496]	; (8001770 <start_up_procedure+0x2a0>)
 800157e:	d139      	bne.n	80015f4 <start_up_procedure+0x124>


void relay_control(uint8_t on_off)
{
if(on_off)
{((GPIOA)->ODR) |= RELAY_PIN;}
 8001580:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
	start_up_flags |= RELAY_ENABLE_FLAG;
 8001584:	f043 0308 	orr.w	r3, r3, #8
{((GPIOA)->ODR) |= RELAY_PIN;}
 8001588:	694a      	ldr	r2, [r1, #20]
 800158a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158e:	614a      	str	r2, [r1, #20]
	start_up_flags |= RELAY_ENABLE_FLAG;
 8001590:	6023      	str	r3, [r4, #0]
	stup_action = ((system_time)->time_nums)[millis] + RELAY_DELAY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
		if(stup_action >= 1000U)
 8001598:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		{stup_action -= 1000U;}
 800159c:	bf2a      	itet	cs
 800159e:	f5a3 73fa 	subcs.w	r3, r3, #500	; 0x1f4
	stup_action = ((system_time)->time_nums)[millis] + RELAY_DELAY;
 80015a2:	602a      	strcc	r2, [r5, #0]
		{stup_action -= 1000U;}
 80015a4:	602b      	strcs	r3, [r5, #0]
	if(start_up_flags & RELAY_ENGAGE_FLAG)
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	06d9      	lsls	r1, r3, #27
 80015aa:	d5b0      	bpl.n	800150e <start_up_procedure+0x3e>
		if((start_up_flags & PMIC_STUP_FLAG) == 0U)
 80015ac:	069a      	lsls	r2, r3, #26
 80015ae:	d42e      	bmi.n	800160e <start_up_procedure+0x13e>
		set_duty_cycle(3U);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f001 f9b7 	bl	8002924 <set_duty_cycle>
		if(((&iv_channel)->avg) < exp_ov)
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <start_up_procedure+0x2a4>)
 80015b8:	4a6f      	ldr	r2, [pc, #444]	; (8001778 <start_up_procedure+0x2a8>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f8d2 2320 	ldr.w	r2, [r2, #800]	; 0x320
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d221      	bcs.n	8001608 <start_up_procedure+0x138>
		{boost_mode();}
 80015c4:	f000 ffcc 	bl	8002560 <boost_mode>
		cs_offset = ((&cs_channel)->avg) - 40U;
 80015c8:	4b6c      	ldr	r3, [pc, #432]	; (800177c <start_up_procedure+0x2ac>)
 80015ca:	4a6d      	ldr	r2, [pc, #436]	; (8001780 <start_up_procedure+0x2b0>)
 80015cc:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80015d0:	3b28      	subs	r3, #40	; 0x28
 80015d2:	8013      	strh	r3, [r2, #0]
		stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f103 0232 	add.w	r2, r3, #50	; 0x32
			if(stup_action >= 1000U)
 80015dc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
			{stup_action -= 1000U;}
 80015e0:	bf24      	itt	cs
 80015e2:	f2a3 33b6 	subwcs	r3, r3, #950	; 0x3b6
 80015e6:	602b      	strcs	r3, [r5, #0]
        start_up_flags |= PMIC_STUP_FLAG;
 80015e8:	6823      	ldr	r3, [r4, #0]
		stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80015ea:	bf38      	it	cc
 80015ec:	602a      	strcc	r2, [r5, #0]
        start_up_flags |= PMIC_STUP_FLAG;
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	e78b      	b.n	800150c <start_up_procedure+0x3c>
	 if((start_up_flags & RELAY_ENGAGE_FLAG) == 0U)
 80015f4:	06d8      	lsls	r0, r3, #27
 80015f6:	d4d9      	bmi.n	80015ac <start_up_procedure+0xdc>
     if((((system_time)->time_nums)[millis]) == stup_action)
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	682a      	ldr	r2, [r5, #0]
 80015fc:	4291      	cmp	r1, r2
 80015fe:	d186      	bne.n	800150e <start_up_procedure+0x3e>
     {start_up_flags |= RELAY_ENGAGE_FLAG;}
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	e7ce      	b.n	80015a6 <start_up_procedure+0xd6>
		{buck_mode();}
 8001608:	f000 ff7e 	bl	8002508 <buck_mode>
 800160c:	e7dc      	b.n	80015c8 <start_up_procedure+0xf8>
            if((((system_time)->time_nums)[millis]) == stup_action)
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	f47f af7b 	bne.w	800150e <start_up_procedure+0x3e>
			if(((&ov_channel)->avg) < (v_ovp - VOLTAGE_HYS))
 8001618:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <start_up_procedure+0x2b4>)
 800161a:	495b      	ldr	r1, [pc, #364]	; (8001788 <start_up_procedure+0x2b8>)
 800161c:	8813      	ldrh	r3, [r2, #0]
 800161e:	f8d1 0320 	ldr.w	r0, [r1, #800]	; 0x320
 8001622:	4f4f      	ldr	r7, [pc, #316]	; (8001760 <start_up_procedure+0x290>)
 8001624:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001780 <start_up_procedure+0x2b0>
 8001628:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800177c <start_up_procedure+0x2ac>
 800162c:	3b0a      	subs	r3, #10
 800162e:	4298      	cmp	r0, r3
 8001630:	468a      	mov	sl, r1
 8001632:	4693      	mov	fp, r2
 8001634:	d258      	bcs.n	80016e8 <start_up_procedure+0x218>
			if((((&cs_channel)->avg)-cs_offset) < (i_target- CURRENT_HYS))
 8001636:	f8d9 2320 	ldr.w	r2, [r9, #800]	; 0x320
 800163a:	f8b8 3000 	ldrh.w	r3, [r8]
 800163e:	8839      	ldrh	r1, [r7, #0]
 8001640:	eba2 0e03 	sub.w	lr, r2, r3
 8001644:	f1a1 000a 	sub.w	r0, r1, #10
 8001648:	4586      	cmp	lr, r0
 800164a:	d24b      	bcs.n	80016e4 <start_up_procedure+0x214>
			if((i_target - (((&cs_channel)->avg)-cs_offset)) > 100U)
 800164c:	440b      	add	r3, r1
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	2b64      	cmp	r3, #100	; 0x64
			{duty_cycle_increment(15U);action_taken = 1U;}
 8001652:	bf8c      	ite	hi
 8001654:	200f      	movhi	r0, #15
			{duty_cycle_increment(1U);action_taken = 1U;}
 8001656:	2001      	movls	r0, #1
 8001658:	f001 f88a 	bl	8002770 <duty_cycle_increment>
 800165c:	2301      	movs	r3, #1
			if(((&cs_channel)->avg) < cs_offset)
 800165e:	f8b8 2000 	ldrh.w	r2, [r8]
 8001662:	f8d9 1320 	ldr.w	r1, [r9, #800]	; 0x320
 8001666:	4291      	cmp	r1, r2
 8001668:	d203      	bcs.n	8001672 <start_up_procedure+0x1a2>
			{duty_cycle_increment(15U);action_taken = 1U;}
 800166a:	200f      	movs	r0, #15
 800166c:	f001 f880 	bl	8002770 <duty_cycle_increment>
 8001670:	2301      	movs	r3, #1
			if(((&ov_channel)->avg) > (v_ovp+VOLTAGE_HYS))
 8001672:	f8bb 2000 	ldrh.w	r2, [fp]
 8001676:	f8da 1320 	ldr.w	r1, [sl, #800]	; 0x320
 800167a:	320a      	adds	r2, #10
 800167c:	4291      	cmp	r1, r2
 800167e:	d903      	bls.n	8001688 <start_up_procedure+0x1b8>
			{duty_cycle_decrement(1U);action_taken = 1U;}
 8001680:	2001      	movs	r0, #1
 8001682:	f001 f8d1 	bl	8002828 <duty_cycle_decrement>
 8001686:	2301      	movs	r3, #1
			if((((&cs_channel)->avg)-cs_offset) > (i_target+CURRENT_HYS))
 8001688:	f8d9 2320 	ldr.w	r2, [r9, #800]	; 0x320
 800168c:	f8b8 1000 	ldrh.w	r1, [r8]
 8001690:	1a51      	subs	r1, r2, r1
 8001692:	883a      	ldrh	r2, [r7, #0]
 8001694:	320a      	adds	r2, #10
 8001696:	4291      	cmp	r1, r2
 8001698:	d928      	bls.n	80016ec <start_up_procedure+0x21c>
			{duty_cycle_decrement(1U);action_taken = 1U;}
 800169a:	2001      	movs	r0, #1
 800169c:	f001 f8c4 	bl	8002828 <duty_cycle_decrement>
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80016a0:	6833      	ldr	r3, [r6, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f103 0232 	add.w	r2, r3, #50	; 0x32
            	if(stup_action >= 1000U)
 80016a8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
            	{stup_action -= 1000U;}
 80016ac:	bf2a      	itet	cs
 80016ae:	f2a3 33b6 	subwcs	r3, r3, #950	; 0x3b6
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80016b2:	602a      	strcc	r2, [r5, #0]
            	{stup_action -= 1000U;}
 80016b4:	602b      	strcs	r3, [r5, #0]
            if(((&iv_channel)->avg) < (INPUT_BAD - VOLTAGE_HYS))
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <start_up_procedure+0x2a8>)
 80016b8:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80016bc:	f240 3215 	movw	r2, #789	; 0x315
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d83a      	bhi.n	800173a <start_up_procedure+0x26a>
            start_up_flags |= (INPUT_ERR_FLAG|CURRENT_MOD_FLAG);
 80016c4:	6823      	ldr	r3, [r4, #0]
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
 80016c6:	f8b8 2000 	ldrh.w	r2, [r8]
            start_up_flags |= (INPUT_ERR_FLAG|CURRENT_MOD_FLAG);
 80016ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016ce:	6023      	str	r3, [r4, #0]
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
 80016d0:	f8d9 3320 	ldr.w	r3, [r9, #800]	; 0x320
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	3b19      	subs	r3, #25
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <start_up_procedure+0x28c>)
 80016da:	b29b      	uxth	r3, r3
 80016dc:	8013      	strh	r3, [r2, #0]
            i_target = hs_i_target;
 80016de:	803b      	strh	r3, [r7, #0]
 80016e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint8_t action_taken = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e7ba      	b.n	800165e <start_up_procedure+0x18e>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e7c2      	b.n	8001672 <start_up_procedure+0x1a2>
            if(action_taken)
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1d7      	bne.n	80016a0 <start_up_procedure+0x1d0>
            if((start_up_flags & INPUT_ERR_FLAG) == 0U)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	065b      	lsls	r3, r3, #25
 80016f4:	d4df      	bmi.n	80016b6 <start_up_procedure+0x1e6>
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80016f6:	6833      	ldr	r3, [r6, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
            	if(stup_action >= 1000U)
 80016fe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 8001702:	bf38      	it	cc
 8001704:	602a      	strcc	r2, [r5, #0]
            stable_count += 1U;
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <start_up_procedure+0x288>)
            	{stup_action -= 1000U;}
 8001708:	bf24      	itt	cs
 800170a:	f2a3 33b6 	subwcs	r3, r3, #950	; 0x3b6
 800170e:	602b      	strcs	r3, [r5, #0]
            stable_count += 1U;
 8001710:	7813      	ldrb	r3, [r2, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2db      	uxtb	r3, r3
            if(stable_count >= 100U)
 8001716:	2b63      	cmp	r3, #99	; 0x63
            stable_count += 1U;
 8001718:	7013      	strb	r3, [r2, #0]
            if(stable_count >= 100U)
 800171a:	d9cc      	bls.n	80016b6 <start_up_procedure+0x1e6>
            dac_set(temp_sample_level);
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <start_up_procedure+0x2bc>)
 800171e:	8818      	ldrh	r0, [r3, #0]
 8001720:	f7ff fb02 	bl	8000d28 <dac_set>
            system_flags &= ~(START_UP_FLAG);
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <start_up_procedure+0x2c0>)
            ex_sample_count = 0U;
 8001726:	491b      	ldr	r1, [pc, #108]	; (8001794 <start_up_procedure+0x2c4>)
            system_flags &= ~(START_UP_FLAG);
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            ex_sample_count = 0U;
 800172e:	2000      	movs	r0, #0
            system_flags |= (PMIC_ENABLE_FLAG|TEMP_INIT_FLAG);
 8001730:	f043 0350 	orr.w	r3, r3, #80	; 0x50
            ex_sample_count = 0U;
 8001734:	6008      	str	r0, [r1, #0]
            system_flags |= (PMIC_ENABLE_FLAG|TEMP_INIT_FLAG);
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e7bd      	b.n	80016b6 <start_up_procedure+0x1e6>
            if(((&iv_channel)->avg) > (INPUT_BAD + VOLTAGE_HYS))
 800173a:	f240 322a 	movw	r2, #810	; 0x32a
 800173e:	4293      	cmp	r3, r2
 8001740:	f67f aee5 	bls.w	800150e <start_up_procedure+0x3e>
            {start_up_flags &= ~(INPUT_ERR_FLAG);}
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800174a:	e6df      	b.n	800150c <start_up_procedure+0x3c>
 800174c:	2000148c 	.word	0x2000148c
 8001750:	20001480 	.word	0x20001480
 8001754:	20000e08 	.word	0x20000e08
 8001758:	20000784 	.word	0x20000784
 800175c:	20000ab0 	.word	0x20000ab0
 8001760:	2000114c 	.word	0x2000114c
 8001764:	200014ca 	.word	0x200014ca
 8001768:	20000e10 	.word	0x20000e10
 800176c:	2000113a 	.word	0x2000113a
 8001770:	20000e04 	.word	0x20000e04
 8001774:	20000e0c 	.word	0x20000e0c
 8001778:	20001150 	.word	0x20001150
 800177c:	20000ab8 	.word	0x20000ab8
 8001780:	200014a4 	.word	0x200014a4
 8001784:	20000e0e 	.word	0x20000e0e
 8001788:	2000045c 	.word	0x2000045c
 800178c:	20001498 	.word	0x20001498
 8001790:	20000dfc 	.word	0x20000dfc
 8001794:	20001144 	.word	0x20001144

08001798 <relay_control>:
{
 8001798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
{((GPIOA)->ODR) |= RELAY_PIN;}
 800179c:	695a      	ldr	r2, [r3, #20]
if(on_off)
 800179e:	b118      	cbz	r0, 80017a8 <relay_control+0x10>
{((GPIOA)->ODR) |= RELAY_PIN;}
 80017a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
else
{((GPIOA)->ODR) &= ~RELAY_PIN;}
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	4770      	bx	lr
 80017a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ac:	e7fa      	b.n	80017a4 <relay_control+0xc>
	...

080017b0 <system_io_config>:
((RCC)->AHB2ENR) |= (RCC_GPIOB_ENABLE|RCC_GPIOA_ENABLE);
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <system_io_config+0x54>)
 80017b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80017b4:	f043 0303 	orr.w	r3, r3, #3
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 80017ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
relay_control(off);
 80017be:	2000      	movs	r0, #0
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017c6:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((OUT_MODE)<<(GPIO_7_DSHIFT)));
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ce:	601a      	str	r2, [r3, #0]
((GPIOB)->MODER) &= (~((IN_MODE)<<(GPIO_6_DSHIFT)));
 80017d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80017d4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
((GPIOB)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 80017dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80017e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
((GPIOB)->PUPDR) |= ((1U)<<(GPIO_6_DSHIFT));
 80017e8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80017ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
((GPIOB)->PUPDR) |= ((1U)<<(GPIO_7_DSHIFT));
 80017f4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80017f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017fc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
relay_control(off);
 8001800:	f7ff bfca 	b.w	8001798 <relay_control>
 8001804:	40021000 	.word	0x40021000

08001808 <pmic_management>:
{
 8001808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
uint8_t mc = mode_check();
 800180c:	f000 ffaa 	bl	8002764 <mode_check>
if(system_flags & ADC_INIT_FLAG)
 8001810:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <pmic_management+0x138>)
 8001812:	6813      	ldr	r3, [r2, #0]
if(system_flags & TEMP_INIT_FLAG)
 8001814:	f013 0511 	ands.w	r5, r3, #17
 8001818:	4614      	mov	r4, r2
 800181a:	f040 808f 	bne.w	800193c <pmic_management+0x134>
if(system_flags & THERM_WIRE_ERR_FLAG)
 800181e:	055e      	lsls	r6, r3, #21
 8001820:	d524      	bpl.n	800186c <pmic_management+0x64>
dac_set(0U);
 8001822:	4628      	mov	r0, r5
 8001824:	f7ff fa80 	bl	8000d28 <dac_set>
lockout_mode();
 8001828:	f000 fec6 	bl	80025b8 <lockout_mode>
relay_control(off);
 800182c:	4628      	mov	r0, r5
 800182e:	f7ff ffb3 	bl	8001798 <relay_control>
if(system_flags & PMIC_ENABLE_FLAG)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	0658      	lsls	r0, r3, #25
{system_flags &= ~(PMIC_ENABLE_FLAG);}
 8001836:	bf44      	itt	mi
 8001838:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 800183c:	6023      	strmi	r3, [r4, #0]
if(wire_error_count < 10U)
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <pmic_management+0x13c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d87a      	bhi.n	800193c <pmic_management+0x134>
check_delay+=1U;
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <pmic_management+0x140>)
if(check_delay >= WIRE_ERR_DELAY)
 8001848:	4940      	ldr	r1, [pc, #256]	; (800194c <pmic_management+0x144>)
check_delay+=1U;
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	3301      	adds	r3, #1
if(check_delay >= WIRE_ERR_DELAY)
 800184e:	428b      	cmp	r3, r1
check_delay+=1U;
 8001850:	6013      	str	r3, [r2, #0]
if(check_delay >= WIRE_ERR_DELAY)
 8001852:	d973      	bls.n	800193c <pmic_management+0x134>
system_flags &=	~(THERM_WIRE_ERR_FLAG);
 8001854:	6823      	ldr	r3, [r4, #0]
start_up_flags &= 0U;
 8001856:	483e      	ldr	r0, [pc, #248]	; (8001950 <pmic_management+0x148>)
system_flags &=	~(THERM_WIRE_ERR_FLAG);
 8001858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
start_up_flags &= 0U;
 800185c:	2100      	movs	r1, #0
system_flags |= START_UP_FLAG;
 800185e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
start_up_flags &= 0U;
 8001862:	6001      	str	r1, [r0, #0]
system_flags |= START_UP_FLAG;
 8001864:	6023      	str	r3, [r4, #0]
check_delay = 0U;
 8001866:	6011      	str	r1, [r2, #0]
 8001868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if(system_flags & PMIC_ENABLE_FLAG)
 800186c:	0659      	lsls	r1, r3, #25
 800186e:	d55c      	bpl.n	800192a <pmic_management+0x122>
if((system_flags & PMIC_ACTION_FLAG) == 0U)
 8001870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001874:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001960 <pmic_management+0x158>
 8001878:	4f36      	ldr	r7, [pc, #216]	; (8001954 <pmic_management+0x14c>)
 800187a:	d14b      	bne.n	8001914 <pmic_management+0x10c>
if(((&ov_channel)->avg) < (v_ovp - VOLTAGE_HYS))
 800187c:	4e36      	ldr	r6, [pc, #216]	; (8001958 <pmic_management+0x150>)
 800187e:	4d37      	ldr	r5, [pc, #220]	; (800195c <pmic_management+0x154>)
 8001880:	8833      	ldrh	r3, [r6, #0]
 8001882:	f8d5 2320 	ldr.w	r2, [r5, #800]	; 0x320
 8001886:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001964 <pmic_management+0x15c>
 800188a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8001968 <pmic_management+0x160>
 800188e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800196c <pmic_management+0x164>
 8001892:	3b0a      	subs	r3, #10
 8001894:	429a      	cmp	r2, r3
 8001896:	d215      	bcs.n	80018c4 <pmic_management+0xbc>
if((((&cs_channel)->avg)-cs_offset) < (i_target- CURRENT_HYS))
 8001898:	f8da 3320 	ldr.w	r3, [sl, #800]	; 0x320
 800189c:	f8bb 2000 	ldrh.w	r2, [fp]
 80018a0:	1a9a      	subs	r2, r3, r2
 80018a2:	f8b9 3000 	ldrh.w	r3, [r9]
 80018a6:	3b0a      	subs	r3, #10
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d202      	bcs.n	80018b2 <pmic_management+0xaa>
{duty_cycle_increment(1U);}
 80018ac:	2001      	movs	r0, #1
 80018ae:	f000 ff5f 	bl	8002770 <duty_cycle_increment>
if(((&cs_channel)->avg) < cs_offset)
 80018b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80018b6:	f8da 2320 	ldr.w	r2, [sl, #800]	; 0x320
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d202      	bcs.n	80018c4 <pmic_management+0xbc>
{duty_cycle_increment(1U);}
 80018be:	2001      	movs	r0, #1
 80018c0:	f000 ff56 	bl	8002770 <duty_cycle_increment>
if(((&ov_channel)->avg) > (v_ovp+VOLTAGE_HYS))
 80018c4:	8833      	ldrh	r3, [r6, #0]
 80018c6:	f8d5 2320 	ldr.w	r2, [r5, #800]	; 0x320
 80018ca:	330a      	adds	r3, #10
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d902      	bls.n	80018d6 <pmic_management+0xce>
{duty_cycle_decrement(1U);}
 80018d0:	2001      	movs	r0, #1
 80018d2:	f000 ffa9 	bl	8002828 <duty_cycle_decrement>
if((((&cs_channel)->avg)-cs_offset) > (i_target+CURRENT_HYS))
 80018d6:	f8bb 3000 	ldrh.w	r3, [fp]
 80018da:	f8da 2320 	ldr.w	r2, [sl, #800]	; 0x320
 80018de:	1ad2      	subs	r2, r2, r3
 80018e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80018e4:	330a      	adds	r3, #10
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d902      	bls.n	80018f0 <pmic_management+0xe8>
{duty_cycle_decrement(1U);}
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 ff9c 	bl	8002828 <duty_cycle_decrement>
system_flags |= PMIC_ACTION_FLAG;
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	6023      	str	r3, [r4, #0]
last_pmic_action = (((system_time)->time_nums)[millis])+PMIC_DELAY;
 80018f8:	f8d8 3000 	ldr.w	r3, [r8]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f103 0264 	add.w	r2, r3, #100	; 0x64
if(last_pmic_action >= 1000U)
 8001902:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
{last_pmic_action -= 1000U;}
 8001906:	bf2a      	itet	cs
 8001908:	f5a3 7361 	subcs.w	r3, r3, #900	; 0x384
last_pmic_action = (((system_time)->time_nums)[millis])+PMIC_DELAY;
 800190c:	603a      	strcc	r2, [r7, #0]
{last_pmic_action -= 1000U;}
 800190e:	603b      	strcs	r3, [r7, #0]
 8001910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if((((system_time)->time_nums)[millis]) == last_pmic_action)
 8001914:	f8d8 1000 	ldr.w	r1, [r8]
 8001918:	6848      	ldr	r0, [r1, #4]
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	4288      	cmp	r0, r1
 800191e:	d10d      	bne.n	800193c <pmic_management+0x134>
{system_flags &= ~(PMIC_ACTION_FLAG);}
 8001920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
system_flags &= ~(PMIC_ACTION_FLAG);
 800192a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
if(mc == LOCKOUT_MODE)
 800192e:	2801      	cmp	r0, #1
system_flags &= ~(PMIC_ACTION_FLAG);
 8001930:	6013      	str	r3, [r2, #0]
if(mc == LOCKOUT_MODE)
 8001932:	d003      	beq.n	800193c <pmic_management+0x134>
}
 8001934:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{lockout_mode();}
 8001938:	f000 be3e 	b.w	80025b8 <lockout_mode>
 800193c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001940:	20000dfc 	.word	0x20000dfc
 8001944:	2000113a 	.word	0x2000113a
 8001948:	200014ac 	.word	0x200014ac
 800194c:	00030d3f 	.word	0x00030d3f
 8001950:	2000148c 	.word	0x2000148c
 8001954:	20001140 	.word	0x20001140
 8001958:	20000e0e 	.word	0x20000e0e
 800195c:	2000045c 	.word	0x2000045c
 8001960:	20001480 	.word	0x20001480
 8001964:	20000ab8 	.word	0x20000ab8
 8001968:	200014a4 	.word	0x200014a4
 800196c:	2000114c 	.word	0x2000114c

08001970 <convert_to_ascii>:
for(sysi=0U; sysi < 7U; sysi++)
{(((&num_hold)->string)[sysi]) = (((num)->ascii)[sysi]);}
}

void convert_to_ascii(uint32_t num)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
uint8_t temp;
uint32_t copy = num;
uint32_t div = 1000000U;
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <convert_to_ascii+0x68>)
 8001974:	4c19      	ldr	r4, [pc, #100]	; (80019dc <convert_to_ascii+0x6c>)
 8001976:	4e1a      	ldr	r6, [pc, #104]	; (80019e0 <convert_to_ascii+0x70>)
uint32_t copy = num;
 8001978:	4601      	mov	r1, r0

for(sysi=0U; sysi < 7U; sysi++)
 800197a:	2300      	movs	r3, #0
temp = copy / div;
temp += 48U;
((&num_1)->ascii)[sysi] = temp;
}
else
{((&num_1)->ascii)[sysi] = 48U;}
 800197c:	2730      	movs	r7, #48	; 0x30

temp = copy / div;
copy -= (temp*div);
div /= 10U;
 800197e:	f04f 0e0a 	mov.w	lr, #10
for(sysi=0U; sysi < 7U; sysi++)
 8001982:	2b07      	cmp	r3, #7
 8001984:	d10c      	bne.n	80019a0 <convert_to_ascii+0x30>
}

(&num_1)-> bin = num;

(&num_hold)->length = 7U;
 8001986:	4917      	ldr	r1, [pc, #92]	; (80019e4 <convert_to_ascii+0x74>)
(&num_1)-> bin = num;
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <convert_to_ascii+0x78>)
(&num_hold)->length = 7U;
 800198a:	700b      	strb	r3, [r1, #0]

for(sysi=0U; sysi < 7U; sysi++)
 800198c:	2300      	movs	r3, #0
(&num_1)-> bin = num;
 800198e:	6010      	str	r0, [r2, #0]
for(sysi=0U; sysi < 7U; sysi++)
 8001990:	7033      	strb	r3, [r6, #0]
 8001992:	461c      	mov	r4, r3
 8001994:	b2d8      	uxtb	r0, r3
 8001996:	2807      	cmp	r0, #7
 8001998:	d116      	bne.n	80019c8 <convert_to_ascii+0x58>
 800199a:	b104      	cbz	r4, 800199e <convert_to_ascii+0x2e>
 800199c:	7030      	strb	r0, [r6, #0]
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(copy > div)
 80019a0:	4291      	cmp	r1, r2
 80019a2:	fbb1 f5f2 	udiv	r5, r1, r2
 80019a6:	f103 0301 	add.w	r3, r3, #1
temp += 48U;
 80019aa:	bf88      	it	hi
 80019ac:	f105 0c30 	addhi.w	ip, r5, #48	; 0x30
copy -= (temp*div);
 80019b0:	b2ed      	uxtb	r5, r5
((&num_1)->ascii)[sysi] = temp;
 80019b2:	bf8c      	ite	hi
 80019b4:	f884 c000 	strbhi.w	ip, [r4]
{((&num_1)->ascii)[sysi] = 48U;}
 80019b8:	7027      	strbls	r7, [r4, #0]
copy -= (temp*div);
 80019ba:	fb02 1115 	mls	r1, r2, r5, r1
 80019be:	b2db      	uxtb	r3, r3
div /= 10U;
 80019c0:	fbb2 f2fe 	udiv	r2, r2, lr
 80019c4:	3401      	adds	r4, #1
 80019c6:	e7dc      	b.n	8001982 <convert_to_ascii+0x12>
{(((&num_hold)->string)[sysi]) = (((&num_1)->ascii)[sysi]);}
 80019c8:	18d4      	adds	r4, r2, r3
 80019ca:	18c8      	adds	r0, r1, r3
 80019cc:	7924      	ldrb	r4, [r4, #4]
 80019ce:	7044      	strb	r4, [r0, #1]
 80019d0:	3301      	adds	r3, #1
 80019d2:	2401      	movs	r4, #1
 80019d4:	e7de      	b.n	8001994 <convert_to_ascii+0x24>
 80019d6:	bf00      	nop
 80019d8:	000f4240 	.word	0x000f4240
 80019dc:	200002fc 	.word	0x200002fc
 80019e0:	20000df4 	.word	0x20000df4
 80019e4:	200014ce 	.word	0x200014ce
 80019e8:	200002f8 	.word	0x200002f8

080019ec <string_compare>:

}


uint8_t string_compare(STRING* in1, STRING* in2)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
uint8_t match = 1U;
if(((in1)->length) == ((in2)->length))
 80019ee:	780b      	ldrb	r3, [r1, #0]
 80019f0:	7807      	ldrb	r7, [r0, #0]
 80019f2:	42bb      	cmp	r3, r7
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	d109      	bne.n	8001a0e <string_compare+0x22>
{
for(sysi=0U; sysi < ((in1)->length); sysi++)
 80019fa:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <string_compare+0x3c>)
 80019fc:	461a      	mov	r2, r3
 80019fe:	7023      	strb	r3, [r4, #0]
 8001a00:	461e      	mov	r6, r3
uint8_t match = 1U;
 8001a02:	2301      	movs	r3, #1
 8001a04:	b2d5      	uxtb	r5, r2
for(sysi=0U; sysi < ((in1)->length); sysi++)
 8001a06:	42af      	cmp	r7, r5
 8001a08:	d803      	bhi.n	8001a12 <string_compare+0x26>
 8001a0a:	b106      	cbz	r6, 8001a0e <string_compare+0x22>
 8001a0c:	7025      	strb	r5, [r4, #0]
else
{return 0U;}



}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
if((((in1)->string)[sysi]) != (((in2)->string)[sysi]))
 8001a12:	1886      	adds	r6, r0, r2
 8001a14:	188d      	adds	r5, r1, r2
 8001a16:	7876      	ldrb	r6, [r6, #1]
 8001a18:	786d      	ldrb	r5, [r5, #1]
 8001a1a:	3201      	adds	r2, #1
{match = 0U;}
 8001a1c:	42ae      	cmp	r6, r5
 8001a1e:	bf18      	it	ne
 8001a20:	2300      	movne	r3, #0
 8001a22:	2601      	movs	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <string_compare+0x18>
 8001a26:	bf00      	nop
 8001a28:	20000df4 	.word	0x20000df4

08001a2c <avg_samp_bank>:

void avg_samp_bank(SAMP_BANK* in)
{
	avg_dummy = 0U;
 8001a2c:	490d      	ldr	r1, [pc, #52]	; (8001a64 <avg_samp_bank+0x38>)
 8001a2e:	2300      	movs	r3, #0
{
 8001a30:	b530      	push	{r4, r5, lr}
	avg_dummy = 0U;
 8001a32:	461a      	mov	r2, r3
 8001a34:	600b      	str	r3, [r1, #0]
 8001a36:	4604      	mov	r4, r0
	for(sysi=0U; sysi<199U; sysi++)
 8001a38:	3201      	adds	r2, #1
	{
	((in)->samples)[sysi] = ((in)->samples)[sysi+1U];
 8001a3a:	6865      	ldr	r5, [r4, #4]
 8001a3c:	f844 5b04 	str.w	r5, [r4], #4
	for(sysi=0U; sysi<199U; sysi++)
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	2ac7      	cmp	r2, #199	; 0xc7
	avg_dummy += ((in)->samples)[sysi];
 8001a44:	442b      	add	r3, r5
	for(sysi=0U; sysi<199U; sysi++)
 8001a46:	d1f7      	bne.n	8001a38 <avg_samp_bank+0xc>
 8001a48:	4c07      	ldr	r4, [pc, #28]	; (8001a68 <avg_samp_bank+0x3c>)
 8001a4a:	7022      	strb	r2, [r4, #0]
	}
	avg_dummy += ((in)->new_samp);
 8001a4c:	f8d0 2324 	ldr.w	r2, [r0, #804]	; 0x324
	((in)->samples)[199U] = ((in)->new_samp);
 8001a50:	f8c0 231c 	str.w	r2, [r0, #796]	; 0x31c
	avg_dummy += ((in)->new_samp);
 8001a54:	4413      	add	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
	((in)->avg) = (avg_dummy/200U);
 8001a58:	22c8      	movs	r2, #200	; 0xc8
 8001a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a5e:	f8c0 3320 	str.w	r3, [r0, #800]	; 0x320
 8001a62:	bd30      	pop	{r4, r5, pc}
 8001a64:	20001488 	.word	0x20001488
 8001a68:	20000df4 	.word	0x20000df4

08001a6c <adc_management>:
{
 8001a6c:	b538      	push	{r3, r4, r5, lr}
if(system_flags & AVG_BANKS_FLAG)
 8001a6e:	4c20      	ldr	r4, [pc, #128]	; (8001af0 <adc_management+0x84>)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	079a      	lsls	r2, r3, #30
 8001a74:	d51a      	bpl.n	8001aac <adc_management+0x40>
	avg_samp_bank(&cs_channel);
 8001a76:	481f      	ldr	r0, [pc, #124]	; (8001af4 <adc_management+0x88>)
 8001a78:	f7ff ffd8 	bl	8001a2c <avg_samp_bank>
	avg_samp_bank(&iv_channel);
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <adc_management+0x8c>)
 8001a7e:	f7ff ffd5 	bl	8001a2c <avg_samp_bank>
	avg_samp_bank(&ov_channel);
 8001a82:	481e      	ldr	r0, [pc, #120]	; (8001afc <adc_management+0x90>)
 8001a84:	f7ff ffd2 	bl	8001a2c <avg_samp_bank>
	system_flags &= ~(ADC_CONV_FLAG);
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f023 0306 	bic.w	r3, r3, #6
	{system_flags &= ~(ADC_CONV_FLAG);}
 8001a8e:	6023      	str	r3, [r4, #0]
if(system_flags & AVG_TEMP_FLAG)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	071b      	lsls	r3, r3, #28
 8001a94:	d51c      	bpl.n	8001ad0 <adc_management+0x64>
avg_samp_bank(&ex_temp);
 8001a96:	481a      	ldr	r0, [pc, #104]	; (8001b00 <adc_management+0x94>)
 8001a98:	f7ff ffc8 	bl	8001a2c <avg_samp_bank>
avg_samp_bank(&in_temp);
 8001a9c:	4819      	ldr	r0, [pc, #100]	; (8001b04 <adc_management+0x98>)
 8001a9e:	f7ff ffc5 	bl	8001a2c <avg_samp_bank>
system_flags &= ~(AVG_TEMP_FLAG);
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f023 0308 	bic.w	r3, r3, #8
last_tsamp = (((system_time)->time_nums)[millis]);
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
	if((system_flags & ADC_CONV_FLAG) == 0U)
 8001aac:	f013 0f04 	tst.w	r3, #4
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <adc_management+0x9c>)
 8001ab2:	d107      	bne.n	8001ac4 <adc_management+0x58>
	adc_conversion_channel = 1U;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]
	adc1_regular_conversions();
 8001ab8:	f7ff f8c0 	bl	8000c3c <adc1_regular_conversions>
	system_flags |= ADC_CONV_FLAG;
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	e7e4      	b.n	8001a8e <adc_management+0x22>
	if(adc_conversion_channel == 4U)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	2a04      	cmp	r2, #4
 8001ac8:	d1e2      	bne.n	8001a90 <adc_management+0x24>
	{system_flags &= ~(ADC_CONV_FLAG);}
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	e7de      	b.n	8001a8e <adc_management+0x22>
if((((system_time)->time_nums)[millis]) != last_tsamp)
 8001ad0:	4d0e      	ldr	r5, [pc, #56]	; (8001b0c <adc_management+0xa0>)
 8001ad2:	4c0f      	ldr	r4, [pc, #60]	; (8001b10 <adc_management+0xa4>)
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d0e5      	beq.n	8001aaa <adc_management+0x3e>
inj_conversion_channel = 1U;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <adc_management+0xa8>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
adc1_inject_conversions();
 8001ae4:	f7ff f8ba 	bl	8000c5c <adc1_inject_conversions>
last_tsamp = (((system_time)->time_nums)[millis]);
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	e7dc      	b.n	8001aa8 <adc_management+0x3c>
 8001aee:	bf00      	nop
 8001af0:	20000dfc 	.word	0x20000dfc
 8001af4:	20000ab8 	.word	0x20000ab8
 8001af8:	20001150 	.word	0x20001150
 8001afc:	2000045c 	.word	0x2000045c
 8001b00:	20000e10 	.word	0x20000e10
 8001b04:	20000788 	.word	0x20000788
 8001b08:	20000dec 	.word	0x20000dec
 8001b0c:	20001480 	.word	0x20001480
 8001b10:	20000ab4 	.word	0x20000ab4
 8001b14:	2000147c 	.word	0x2000147c

08001b18 <raise_avg_flag>:
}


void raise_avg_flag(void)
{
system_flags |= AVG_BANKS_FLAG;
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <raise_avg_flag+0x20>)
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6013      	str	r3, [r2, #0]
avg_count++;
 8001b22:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <raise_avg_flag+0x24>)
 8001b24:	6813      	ldr	r3, [r2, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	6013      	str	r3, [r2, #0]
((ADC1)->IER) &= ~(EOCI|EOSI);
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <raise_avg_flag+0x28>)
 8001b2c:	6853      	ldr	r3, [r2, #4]
 8001b2e:	f023 030c 	bic.w	r3, r3, #12
 8001b32:	6053      	str	r3, [r2, #4]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000dfc 	.word	0x20000dfc
 8001b3c:	200014c4 	.word	0x200014c4
 8001b40:	50040000 	.word	0x50040000

08001b44 <raise_temp_flag>:
}

void raise_temp_flag(void)
{
system_flags |= AVG_TEMP_FLAG;
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <raise_temp_flag+0x20>)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6013      	str	r3, [r2, #0]
avg_count++;
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <raise_temp_flag+0x24>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
((ADC1)->IER) &= ~(JEOCI|JEOSI);
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <raise_temp_flag+0x28>)
 8001b58:	6853      	ldr	r3, [r2, #4]
 8001b5a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b5e:	6053      	str	r3, [r2, #4]
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000dfc 	.word	0x20000dfc
 8001b68:	200014c4 	.word	0x200014c4
 8001b6c:	50040000 	.word	0x50040000

08001b70 <add_sample>:
}


void add_sample(uint32_t num, uint8_t inj)
{
conversion_count++;
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <add_sample+0xb4>)
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	3301      	adds	r3, #1
{
 8001b76:	b510      	push	{r4, lr}
conversion_count++;
 8001b78:	6013      	str	r3, [r2, #0]


if(inj == 0U)
 8001b7a:	2900      	cmp	r1, #0
 8001b7c:	d13b      	bne.n	8001bf6 <add_sample+0x86>
{
switch(adc_conversion_channel)
 8001b7e:	4c2a      	ldr	r4, [pc, #168]	; (8001c28 <add_sample+0xb8>)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d02b      	beq.n	8001bde <add_sample+0x6e>
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d02f      	beq.n	8001bea <add_sample+0x7a>
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d126      	bne.n	8001bdc <add_sample+0x6c>
{
case 1U:
cs_sample_count++;
 8001b8e:	4927      	ldr	r1, [pc, #156]	; (8001c2c <add_sample+0xbc>)
 8001b90:	680a      	ldr	r2, [r1, #0]
 8001b92:	3201      	adds	r2, #1
 8001b94:	600a      	str	r2, [r1, #0]
((&cs_channel)->new_samp) = num;
 8001b96:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <add_sample+0xc0>)
ov_sample_count++;
((&ov_channel)->new_samp) = num;
break;
case 3U:
iv_sample_count++;
((&iv_channel)->new_samp) = num;
 8001b98:	f8c2 0324 	str.w	r0, [r2, #804]	; 0x324
break;
default: return;
}
adc_conversion_channel++;
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	6023      	str	r3, [r4, #0]
}

inj_conversion_channel++;
}

if((ex_sample_count > 100U) && (in_sample_count > 100U))
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <add_sample+0xc4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b64      	cmp	r3, #100	; 0x64
 8001ba6:	d908      	bls.n	8001bba <add_sample+0x4a>
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <add_sample+0xc8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b64      	cmp	r3, #100	; 0x64
{system_flags &= ~(TEMP_INIT_FLAG);}
 8001bae:	bf81      	itttt	hi
 8001bb0:	4a22      	ldrhi	r2, [pc, #136]	; (8001c3c <add_sample+0xcc>)
 8001bb2:	6813      	ldrhi	r3, [r2, #0]
 8001bb4:	f023 0310 	bichi.w	r3, r3, #16
 8001bb8:	6013      	strhi	r3, [r2, #0]


if((cs_sample_count > 100U) && (ov_sample_count > 100U) && (iv_sample_count > 100U))
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <add_sample+0xbc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d90c      	bls.n	8001bdc <add_sample+0x6c>
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <add_sample+0xd0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d908      	bls.n	8001bdc <add_sample+0x6c>
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <add_sample+0xd4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b64      	cmp	r3, #100	; 0x64
{system_flags &= ~(ADC_INIT_FLAG);}
 8001bd0:	bf81      	itttt	hi
 8001bd2:	4a1a      	ldrhi	r2, [pc, #104]	; (8001c3c <add_sample+0xcc>)
 8001bd4:	6813      	ldrhi	r3, [r2, #0]
 8001bd6:	f023 0301 	bichi.w	r3, r3, #1
 8001bda:	6013      	strhi	r3, [r2, #0]
 8001bdc:	bd10      	pop	{r4, pc}
ov_sample_count++;
 8001bde:	4918      	ldr	r1, [pc, #96]	; (8001c40 <add_sample+0xd0>)
 8001be0:	680a      	ldr	r2, [r1, #0]
 8001be2:	3201      	adds	r2, #1
 8001be4:	600a      	str	r2, [r1, #0]
((&ov_channel)->new_samp) = num;
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <add_sample+0xd8>)
 8001be8:	e7d6      	b.n	8001b98 <add_sample+0x28>
iv_sample_count++;
 8001bea:	4916      	ldr	r1, [pc, #88]	; (8001c44 <add_sample+0xd4>)
 8001bec:	680a      	ldr	r2, [r1, #0]
 8001bee:	3201      	adds	r2, #1
 8001bf0:	600a      	str	r2, [r1, #0]
((&iv_channel)->new_samp) = num;
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <add_sample+0xdc>)
 8001bf4:	e7d0      	b.n	8001b98 <add_sample+0x28>
switch(inj_conversion_channel)
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <add_sample+0xe0>)
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <add_sample+0x94>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d00a      	beq.n	8001c18 <add_sample+0xa8>
 8001c02:	bd10      	pop	{r4, pc}
ex_sample_count++;
 8001c04:	4c0b      	ldr	r4, [pc, #44]	; (8001c34 <add_sample+0xc4>)
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	3101      	adds	r1, #1
 8001c0a:	6021      	str	r1, [r4, #0]
((&ex_temp)->new_samp) = num;
 8001c0c:	4911      	ldr	r1, [pc, #68]	; (8001c54 <add_sample+0xe4>)
((&in_temp)->new_samp) = num;
 8001c0e:	f8c1 0324 	str.w	r0, [r1, #804]	; 0x324
inj_conversion_channel++;
 8001c12:	3301      	adds	r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e7c3      	b.n	8001ba0 <add_sample+0x30>
in_sample_count++;
 8001c18:	4c07      	ldr	r4, [pc, #28]	; (8001c38 <add_sample+0xc8>)
 8001c1a:	6821      	ldr	r1, [r4, #0]
 8001c1c:	3101      	adds	r1, #1
 8001c1e:	6021      	str	r1, [r4, #0]
((&in_temp)->new_samp) = num;
 8001c20:	490d      	ldr	r1, [pc, #52]	; (8001c58 <add_sample+0xe8>)
 8001c22:	e7f4      	b.n	8001c0e <add_sample+0x9e>
 8001c24:	20001484 	.word	0x20001484
 8001c28:	20000dec 	.word	0x20000dec
 8001c2c:	200014f0 	.word	0x200014f0
 8001c30:	20000ab8 	.word	0x20000ab8
 8001c34:	20001144 	.word	0x20001144
 8001c38:	20000e00 	.word	0x20000e00
 8001c3c:	20000dfc 	.word	0x20000dfc
 8001c40:	2000149c 	.word	0x2000149c
 8001c44:	20000df0 	.word	0x20000df0
 8001c48:	2000045c 	.word	0x2000045c
 8001c4c:	20001150 	.word	0x20001150
 8001c50:	2000147c 	.word	0x2000147c
 8001c54:	20000e10 	.word	0x20000e10
 8001c58:	20000788 	.word	0x20000788

08001c5c <driveB>:

}

void driveB(uint8_t pin, uint8_t on_off)
{
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <driveB+0x1c>)
 8001c5e:	2301      	movs	r3, #1

if(on_off)
 8001c60:	b121      	cbz	r1, 8001c6c <driveB+0x10>
{((GPIOB)->ODR) |= ((1U)<<(pin));}
 8001c62:	6951      	ldr	r1, [r2, #20]
 8001c64:	4083      	lsls	r3, r0
 8001c66:	430b      	orrs	r3, r1
else
{((GPIOB)->ODR) &= (~((1U)<<(pin)));}
 8001c68:	6153      	str	r3, [r2, #20]
 8001c6a:	4770      	bx	lr
 8001c6c:	6951      	ldr	r1, [r2, #20]
 8001c6e:	4083      	lsls	r3, r0
 8001c70:	ea21 0303 	bic.w	r3, r1, r3
 8001c74:	e7f8      	b.n	8001c68 <driveB+0xc>
 8001c76:	bf00      	nop
 8001c78:	48000400 	.word	0x48000400

08001c7c <dc_search>:
uart1_transmit(&prompt);

}

uint8_t dc_search(STRING* cmd)
{
 8001c7c:	b508      	push	{r3, lr}
uint8_t ones;
uint8_t tens;
uint8_t new_duty;

if(((cmd)->length) != 4U)
 8001c7e:	7803      	ldrb	r3, [r0, #0]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d118      	bne.n	8001cb6 <dc_search+0x3a>
{return 0U;}


if( (((cmd)->string)[0U]) != 'd' )
 8001c84:	7843      	ldrb	r3, [r0, #1]
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d115      	bne.n	8001cb6 <dc_search+0x3a>
{return 0U;}
if( (((cmd)->string)[1U]) != 'c' )
 8001c8a:	7883      	ldrb	r3, [r0, #2]
 8001c8c:	2b63      	cmp	r3, #99	; 0x63
 8001c8e:	d112      	bne.n	8001cb6 <dc_search+0x3a>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001c90:	78c3      	ldrb	r3, [r0, #3]
 8001c92:	3b30      	subs	r3, #48	; 0x30
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d80d      	bhi.n	8001cb6 <dc_search+0x3a>
{tens = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001c9a:	7900      	ldrb	r0, [r0, #4]
 8001c9c:	3830      	subs	r0, #48	; 0x30
 8001c9e:	b2c0      	uxtb	r0, r0
 8001ca0:	2809      	cmp	r0, #9
 8001ca2:	d808      	bhi.n	8001cb6 <dc_search+0x3a>
{ones = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

new_duty = (tens*10) + ones;
 8001ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ca8:	eb00 0043 	add.w	r0, r0, r3, lsl #1

set_duty_cycle(new_duty);
 8001cac:	b2c0      	uxtb	r0, r0
 8001cae:	f000 fe39 	bl	8002924 <set_duty_cycle>

return 1U;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	bd08      	pop	{r3, pc}
{return 0U;}
 8001cb6:	2000      	movs	r0, #0

}
 8001cb8:	bd08      	pop	{r3, pc}
	...

08001cbc <current_decode>:


uint8_t current_decode(STRING* cmd)
{
 8001cbc:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_current;

if(((cmd)->length) != 6U)
 8001cbe:	7803      	ldrb	r3, [r0, #0]
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d132      	bne.n	8001d2a <current_decode+0x6e>
{return 0U;}


if( (((cmd)->string)[0U]) != 'i' )
 8001cc4:	7843      	ldrb	r3, [r0, #1]
 8001cc6:	2b69      	cmp	r3, #105	; 0x69
 8001cc8:	d12f      	bne.n	8001d2a <current_decode+0x6e>
{return 0U;}
if( (((cmd)->string)[1U]) != 's' )
 8001cca:	7883      	ldrb	r3, [r0, #2]
 8001ccc:	2b73      	cmp	r3, #115	; 0x73
 8001cce:	d12c      	bne.n	8001d2a <current_decode+0x6e>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001cd0:	78c3      	ldrb	r3, [r0, #3]
 8001cd2:	3b30      	subs	r3, #48	; 0x30
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	2a09      	cmp	r2, #9
 8001cd8:	d827      	bhi.n	8001d2a <current_decode+0x6e>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001cda:	7904      	ldrb	r4, [r0, #4]
 8001cdc:	3c30      	subs	r4, #48	; 0x30
 8001cde:	b2e2      	uxtb	r2, r4
 8001ce0:	2a09      	cmp	r2, #9
 8001ce2:	d822      	bhi.n	8001d2a <current_decode+0x6e>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001ce4:	7942      	ldrb	r2, [r0, #5]
 8001ce6:	3a30      	subs	r2, #48	; 0x30
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	2a09      	cmp	r2, #9
 8001cec:	d81d      	bhi.n	8001d2a <current_decode+0x6e>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001cee:	7981      	ldrb	r1, [r0, #6]
 8001cf0:	3930      	subs	r1, #48	; 0x30
 8001cf2:	b2c9      	uxtb	r1, r1
 8001cf4:	2909      	cmp	r1, #9
 8001cf6:	d818      	bhi.n	8001d2a <current_decode+0x6e>
else
{return 0U;}



new_current = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001cf8:	2064      	movs	r0, #100	; 0x64
 8001cfa:	4344      	muls	r4, r0
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	fb00 4303 	mla	r3, r0, r3, r4
 8001d04:	440b      	add	r3, r1
 8001d06:	210a      	movs	r1, #10
 8001d08:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_current > DEFAULT_MAX_CURRENT)
{hs_i_target = DEFAULT_MAX_CURRENT;}
 8001d0c:	f640 02f7 	movw	r2, #2295	; 0x8f7
 8001d10:	429a      	cmp	r2, r3
 8001d12:	4907      	ldr	r1, [pc, #28]	; (8001d30 <current_decode+0x74>)
 8001d14:	bf28      	it	cs
 8001d16:	461a      	movcs	r2, r3
 8001d18:	800a      	strh	r2, [r1, #0]
else
{hs_i_target = new_current;}

if((system_flags & THERMAL_CON_FLAG) == 0U)
 8001d1a:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <current_decode+0x78>)
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	05d2      	lsls	r2, r2, #23
 8001d20:	d401      	bmi.n	8001d26 <current_decode+0x6a>
{i_target = new_current;}
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <current_decode+0x7c>)
 8001d24:	8013      	strh	r3, [r2, #0]

return 1U;
 8001d26:	2001      	movs	r0, #1

}
 8001d28:	bd10      	pop	{r4, pc}
{return 0U;}
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000ab0 	.word	0x20000ab0
 8001d34:	20000dfc 	.word	0x20000dfc
 8001d38:	2000114c 	.word	0x2000114c

08001d3c <voltage_decode>:


uint8_t voltage_decode(STRING* cmd)
{
 8001d3c:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_voltage;

if(((cmd)->length) != 6U)
 8001d3e:	7803      	ldrb	r3, [r0, #0]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d12c      	bne.n	8001d9e <voltage_decode+0x62>
{return 0U;}


if( (((cmd)->string)[0U]) != 'v' )
 8001d44:	7843      	ldrb	r3, [r0, #1]
 8001d46:	2b76      	cmp	r3, #118	; 0x76
 8001d48:	d129      	bne.n	8001d9e <voltage_decode+0x62>
{return 0U;}
if( (((cmd)->string)[1U]) != 's' )
 8001d4a:	7883      	ldrb	r3, [r0, #2]
 8001d4c:	2b73      	cmp	r3, #115	; 0x73
 8001d4e:	d126      	bne.n	8001d9e <voltage_decode+0x62>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001d50:	78c3      	ldrb	r3, [r0, #3]
 8001d52:	3b30      	subs	r3, #48	; 0x30
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	2a09      	cmp	r2, #9
 8001d58:	d821      	bhi.n	8001d9e <voltage_decode+0x62>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001d5a:	7904      	ldrb	r4, [r0, #4]
 8001d5c:	3c30      	subs	r4, #48	; 0x30
 8001d5e:	b2e2      	uxtb	r2, r4
 8001d60:	2a09      	cmp	r2, #9
 8001d62:	d81c      	bhi.n	8001d9e <voltage_decode+0x62>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001d64:	7942      	ldrb	r2, [r0, #5]
 8001d66:	3a30      	subs	r2, #48	; 0x30
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	2a09      	cmp	r2, #9
 8001d6c:	d817      	bhi.n	8001d9e <voltage_decode+0x62>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001d6e:	7981      	ldrb	r1, [r0, #6]
 8001d70:	3930      	subs	r1, #48	; 0x30
 8001d72:	b2c9      	uxtb	r1, r1
 8001d74:	2909      	cmp	r1, #9
 8001d76:	d812      	bhi.n	8001d9e <voltage_decode+0x62>
else
{return 0U;}



new_voltage = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001d78:	2064      	movs	r0, #100	; 0x64
 8001d7a:	4344      	muls	r4, r0
 8001d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d80:	fb00 4303 	mla	r3, r0, r3, r4
 8001d84:	440b      	add	r3, r1
 8001d86:	210a      	movs	r1, #10
 8001d88:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_voltage > DEFAULT_MAX_VOLTAGE)
 8001d8c:	f640 4199 	movw	r1, #3225	; 0xc99
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <voltage_decode+0x68>)
 8001d92:	428b      	cmp	r3, r1
{v_ovp = DEFAULT_MAX_VOLTAGE;}
 8001d94:	bf8c      	ite	hi
 8001d96:	8011      	strhhi	r1, [r2, #0]
else
{v_ovp = new_voltage;}
 8001d98:	8013      	strhls	r3, [r2, #0]


return 1U;
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	bd10      	pop	{r4, pc}
{return 0U;}
 8001d9e:	2000      	movs	r0, #0

}
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	20000e0e 	.word	0x20000e0e

08001da8 <exp_voltage_decode>:

uint8_t exp_voltage_decode(STRING* cmd)
{
 8001da8:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_voltage;

if(((cmd)->length) != 6U)
 8001daa:	7803      	ldrb	r3, [r0, #0]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d12c      	bne.n	8001e0a <exp_voltage_decode+0x62>
{return 0U;}


if( (((cmd)->string)[0U]) != 'e' )
 8001db0:	7843      	ldrb	r3, [r0, #1]
 8001db2:	2b65      	cmp	r3, #101	; 0x65
 8001db4:	d129      	bne.n	8001e0a <exp_voltage_decode+0x62>
{return 0U;}
if( (((cmd)->string)[1U]) != 'v' )
 8001db6:	7883      	ldrb	r3, [r0, #2]
 8001db8:	2b76      	cmp	r3, #118	; 0x76
 8001dba:	d126      	bne.n	8001e0a <exp_voltage_decode+0x62>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001dbc:	78c3      	ldrb	r3, [r0, #3]
 8001dbe:	3b30      	subs	r3, #48	; 0x30
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	2a09      	cmp	r2, #9
 8001dc4:	d821      	bhi.n	8001e0a <exp_voltage_decode+0x62>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001dc6:	7904      	ldrb	r4, [r0, #4]
 8001dc8:	3c30      	subs	r4, #48	; 0x30
 8001dca:	b2e2      	uxtb	r2, r4
 8001dcc:	2a09      	cmp	r2, #9
 8001dce:	d81c      	bhi.n	8001e0a <exp_voltage_decode+0x62>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001dd0:	7942      	ldrb	r2, [r0, #5]
 8001dd2:	3a30      	subs	r2, #48	; 0x30
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	2a09      	cmp	r2, #9
 8001dd8:	d817      	bhi.n	8001e0a <exp_voltage_decode+0x62>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001dda:	7981      	ldrb	r1, [r0, #6]
 8001ddc:	3930      	subs	r1, #48	; 0x30
 8001dde:	b2c9      	uxtb	r1, r1
 8001de0:	2909      	cmp	r1, #9
 8001de2:	d812      	bhi.n	8001e0a <exp_voltage_decode+0x62>
else
{return 0U;}



new_voltage = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001de4:	2064      	movs	r0, #100	; 0x64
 8001de6:	4344      	muls	r4, r0
 8001de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dec:	fb00 4303 	mla	r3, r0, r3, r4
 8001df0:	440b      	add	r3, r1
 8001df2:	210a      	movs	r1, #10
 8001df4:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_voltage > DEFAULT_MAX_VOLTAGE)
 8001df8:	f640 4199 	movw	r1, #3225	; 0xc99
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <exp_voltage_decode+0x68>)
 8001dfe:	428b      	cmp	r3, r1
{exp_ov = DEFAULT_MAX_VOLTAGE;}
 8001e00:	bf8c      	ite	hi
 8001e02:	8011      	strhhi	r1, [r2, #0]
else
{exp_ov = new_voltage;}
 8001e04:	8013      	strhls	r3, [r2, #0]


return 1U;
 8001e06:	2001      	movs	r0, #1
 8001e08:	bd10      	pop	{r4, pc}
{return 0U;}
 8001e0a:	2000      	movs	r0, #0

}
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000e0c 	.word	0x20000e0c

08001e14 <flagclear>:



void flagclear(void)
{
system_flags &= ~(ADC_CONV_FLAG);
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <flagclear+0x10>)
uart1_transmit(&money);
 8001e16:	4804      	ldr	r0, [pc, #16]	; (8001e28 <flagclear+0x14>)
system_flags &= ~(ADC_CONV_FLAG);
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 8001e20:	f000 bd9a 	b.w	8002958 <uart1_transmit>
 8001e24:	20000dfc 	.word	0x20000dfc
 8001e28:	200002d6 	.word	0x200002d6

08001e2c <tempreport>:
}


void tempreport(void)
{
 8001e2c:	b538      	push	{r3, r4, r5, lr}
	int32_t temp;
	uart1_transmit(&capE);
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <tempreport+0x44>)
	temp = (&ex_temp)->avg;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001e30:	4d10      	ldr	r5, [pc, #64]	; (8001e74 <tempreport+0x48>)
	uart1_transmit(&cli_return);
 8001e32:	4c11      	ldr	r4, [pc, #68]	; (8001e78 <tempreport+0x4c>)
	uart1_transmit(&capE);
 8001e34:	f000 fd90 	bl	8002958 <uart1_transmit>
	temp = (&ex_temp)->avg;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <tempreport+0x50>)
	convert_to_ascii(temp);
 8001e3a:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8001e3e:	f7ff fd97 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e42:	4628      	mov	r0, r5
 8001e44:	f000 fd88 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 fd85 	bl	8002958 <uart1_transmit>

	uart1_transmit(&capI);
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <tempreport+0x54>)
 8001e50:	f000 fd82 	bl	8002958 <uart1_transmit>
	temp = (&in_temp)->avg;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <tempreport+0x58>)
	convert_to_ascii(temp);
 8001e56:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8001e5a:	f7ff fd89 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f000 fd7a 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e64:	4620      	mov	r0, r4

}
 8001e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 8001e6a:	f000 bd75 	b.w	8002958 <uart1_transmit>
 8001e6e:	bf00      	nop
 8001e70:	20000084 	.word	0x20000084
 8001e74:	200014ce 	.word	0x200014ce
 8001e78:	200000e7 	.word	0x200000e7
 8001e7c:	20000e10 	.word	0x20000e10
 8001e80:	200000a5 	.word	0x200000a5
 8001e84:	20000788 	.word	0x20000788

08001e88 <tim1report>:

void tim1report(void)
{
 8001e88:	b510      	push	{r4, lr}
	uint32_t temp;

	temp = ((TIM1)->ARR);
 8001e8a:	4c23      	ldr	r4, [pc, #140]	; (8001f18 <tim1report+0x90>)
 8001e8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	convert_to_ascii(temp);
 8001e8e:	f7ff fd6f 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e92:	4822      	ldr	r0, [pc, #136]	; (8001f1c <tim1report+0x94>)
 8001e94:	f000 fd60 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e98:	4821      	ldr	r0, [pc, #132]	; (8001f20 <tim1report+0x98>)
 8001e9a:	f000 fd5d 	bl	8002958 <uart1_transmit>


	temp = ((TIM1)->CCR1);
 8001e9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	convert_to_ascii(temp);
 8001ea0:	f7ff fd66 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001ea4:	481d      	ldr	r0, [pc, #116]	; (8001f1c <tim1report+0x94>)
 8001ea6:	f000 fd57 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001eaa:	481d      	ldr	r0, [pc, #116]	; (8001f20 <tim1report+0x98>)
 8001eac:	f000 fd54 	bl	8002958 <uart1_transmit>

	temp = ((TIM1)->CCR2);
 8001eb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	convert_to_ascii(temp);
 8001eb2:	f7ff fd5d 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001eb6:	4819      	ldr	r0, [pc, #100]	; (8001f1c <tim1report+0x94>)
 8001eb8:	f000 fd4e 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ebc:	4818      	ldr	r0, [pc, #96]	; (8001f20 <tim1report+0x98>)
 8001ebe:	f000 fd4b 	bl	8002958 <uart1_transmit>

    temp = ((TIM1)->CCR3);
 8001ec2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	convert_to_ascii(temp);
 8001ec4:	f7ff fd54 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001ec8:	4814      	ldr	r0, [pc, #80]	; (8001f1c <tim1report+0x94>)
 8001eca:	f000 fd45 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <tim1report+0x98>)
 8001ed0:	f000 fd42 	bl	8002958 <uart1_transmit>

    temp = ((TIM1)->CCR4);
 8001ed4:	6c20      	ldr	r0, [r4, #64]	; 0x40
	convert_to_ascii(temp);
 8001ed6:	f7ff fd4b 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <tim1report+0x94>)
 8001edc:	f000 fd3c 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ee0:	480f      	ldr	r0, [pc, #60]	; (8001f20 <tim1report+0x98>)
 8001ee2:	f000 fd39 	bl	8002958 <uart1_transmit>


	temp = mode_check();
 8001ee6:	f000 fc3d 	bl	8002764 <mode_check>

	switch(temp)
 8001eea:	3801      	subs	r0, #1
 8001eec:	2803      	cmp	r0, #3
 8001eee:	d811      	bhi.n	8001f14 <tim1report+0x8c>
 8001ef0:	e8df f000 	tbb	[pc, r0]
 8001ef4:	0e0c0a02 	.word	0x0e0c0a02
	{
	case LOCKOUT_MODE:uart1_transmit(&lock); break;
 8001ef8:	480a      	ldr	r0, [pc, #40]	; (8001f24 <tim1report+0x9c>)
	case PASSTHRU_MODE:uart1_transmit(&pass); break;
	case BOOST_MODE:uart1_transmit(&boost); break;
	case BUCK_MODE:uart1_transmit(&buck); break;
	default:uart1_transmit(&cp1); break;
 8001efa:	f000 fd2d 	bl	8002958 <uart1_transmit>
	}

	uart1_transmit(&cli_return);
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <tim1report+0x98>)
}
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uart1_transmit(&cli_return);
 8001f04:	f000 bd28 	b.w	8002958 <uart1_transmit>
	case PASSTHRU_MODE:uart1_transmit(&pass); break;
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <tim1report+0xa0>)
 8001f0a:	e7f6      	b.n	8001efa <tim1report+0x72>
	case BOOST_MODE:uart1_transmit(&boost); break;
 8001f0c:	4807      	ldr	r0, [pc, #28]	; (8001f2c <tim1report+0xa4>)
 8001f0e:	e7f4      	b.n	8001efa <tim1report+0x72>
	case BUCK_MODE:uart1_transmit(&buck); break;
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <tim1report+0xa8>)
 8001f12:	e7f2      	b.n	8001efa <tim1report+0x72>
	default:uart1_transmit(&cp1); break;
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <tim1report+0xac>)
 8001f16:	e7f0      	b.n	8001efa <tim1report+0x72>
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	200014ce 	.word	0x200014ce
 8001f20:	200000e7 	.word	0x200000e7
 8001f24:	200002b5 	.word	0x200002b5
 8001f28:	20000304 	.word	0x20000304
 8001f2c:	20000021 	.word	0x20000021
 8001f30:	20000042 	.word	0x20000042
 8001f34:	20000129 	.word	0x20000129

08001f38 <voltreport>:

void voltreport(void)
{
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t temp;


	uart1_transmit(&capC);
 8001f3a:	4f1f      	ldr	r7, [pc, #124]	; (8001fb8 <voltreport+0x80>)
	temp = (cs_channel.avg- cs_offset);
 8001f3c:	4e1f      	ldr	r6, [pc, #124]	; (8001fbc <voltreport+0x84>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001f3e:	4d20      	ldr	r5, [pc, #128]	; (8001fc0 <voltreport+0x88>)
	uart1_transmit(&cli_return);
 8001f40:	4c20      	ldr	r4, [pc, #128]	; (8001fc4 <voltreport+0x8c>)
	uart1_transmit(&capC);
 8001f42:	4638      	mov	r0, r7
 8001f44:	f000 fd08 	bl	8002958 <uart1_transmit>
	temp = (cs_channel.avg- cs_offset);
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <voltreport+0x90>)
 8001f4a:	f8d6 0320 	ldr.w	r0, [r6, #800]	; 0x320
 8001f4e:	881b      	ldrh	r3, [r3, #0]
	convert_to_ascii(temp);
 8001f50:	1ac0      	subs	r0, r0, r3
 8001f52:	f7ff fd0d 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f56:	4628      	mov	r0, r5
 8001f58:	f000 fcfe 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f000 fcfb 	bl	8002958 <uart1_transmit>


	uart1_transmit(&capC);
 8001f62:	4638      	mov	r0, r7
 8001f64:	f000 fcf8 	bl	8002958 <uart1_transmit>
	temp = (cs_channel.avg);
	convert_to_ascii(temp);
 8001f68:	f8d6 0320 	ldr.w	r0, [r6, #800]	; 0x320
 8001f6c:	f7ff fd00 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f70:	4628      	mov	r0, r5
 8001f72:	f000 fcf1 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 fcee 	bl	8002958 <uart1_transmit>



	uart1_transmit(&capO);
 8001f7c:	4813      	ldr	r0, [pc, #76]	; (8001fcc <voltreport+0x94>)
 8001f7e:	f000 fceb 	bl	8002958 <uart1_transmit>
	temp = ov_channel.avg;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <voltreport+0x98>)
	convert_to_ascii(temp);
 8001f84:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8001f88:	f7ff fcf2 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f000 fce3 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 fce0 	bl	8002958 <uart1_transmit>

	uart1_transmit(&capI);
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <voltreport+0x9c>)
 8001f9a:	f000 fcdd 	bl	8002958 <uart1_transmit>
	temp = iv_channel.avg;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <voltreport+0xa0>)
	convert_to_ascii(temp);
 8001fa0:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8001fa4:	f7ff fce4 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001fa8:	4628      	mov	r0, r5
 8001faa:	f000 fcd5 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001fae:	4620      	mov	r0, r4
}
 8001fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	uart1_transmit(&cli_return);
 8001fb4:	f000 bcd0 	b.w	8002958 <uart1_transmit>
 8001fb8:	20000063 	.word	0x20000063
 8001fbc:	20000ab8 	.word	0x20000ab8
 8001fc0:	200014ce 	.word	0x200014ce
 8001fc4:	200000e7 	.word	0x200000e7
 8001fc8:	200014a4 	.word	0x200014a4
 8001fcc:	200000c6 	.word	0x200000c6
 8001fd0:	2000045c 	.word	0x2000045c
 8001fd4:	200000a5 	.word	0x200000a5
 8001fd8:	20001150 	.word	0x20001150

08001fdc <timereport>:

void timereport(void)
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
	uint32_t temp;

	temp = (((system_time)->time_nums)[ticks]);
 8001fde:	4e1b      	ldr	r6, [pc, #108]	; (800204c <timereport+0x70>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001fe0:	4d1b      	ldr	r5, [pc, #108]	; (8002050 <timereport+0x74>)
	temp = (((system_time)->time_nums)[ticks]);
 8001fe2:	6833      	ldr	r3, [r6, #0]
	uart1_transmit(&cli_return);
 8001fe4:	4c1b      	ldr	r4, [pc, #108]	; (8002054 <timereport+0x78>)
	convert_to_ascii(temp);
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	f7ff fcc2 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001fec:	4628      	mov	r0, r5
 8001fee:	f000 fcb3 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f000 fcb0 	bl	8002958 <uart1_transmit>

	temp = (((system_time)->time_nums)[millis]);
 8001ff8:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	f7ff fcb8 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002000:	4628      	mov	r0, r5
 8002002:	f000 fca9 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002006:	4620      	mov	r0, r4
 8002008:	f000 fca6 	bl	8002958 <uart1_transmit>

	temp = (((system_time)->time_nums)[seconds]);
 800200c:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 800200e:	6898      	ldr	r0, [r3, #8]
 8002010:	f7ff fcae 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002014:	4628      	mov	r0, r5
 8002016:	f000 fc9f 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 800201a:	4620      	mov	r0, r4
 800201c:	f000 fc9c 	bl	8002958 <uart1_transmit>

	temp = (((system_time)->time_nums)[minutes]);
 8002020:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8002022:	68d8      	ldr	r0, [r3, #12]
 8002024:	f7ff fca4 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002028:	4628      	mov	r0, r5
 800202a:	f000 fc95 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 800202e:	4620      	mov	r0, r4
 8002030:	f000 fc92 	bl	8002958 <uart1_transmit>

	temp = (((system_time)->time_nums)[hours]);
 8002034:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8002036:	6918      	ldr	r0, [r3, #16]
 8002038:	f7ff fc9a 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800203c:	4628      	mov	r0, r5
 800203e:	f000 fc8b 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002042:	4620      	mov	r0, r4
}
 8002044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart1_transmit(&cli_return);
 8002048:	f000 bc86 	b.w	8002958 <uart1_transmit>
 800204c:	20001480 	.word	0x20001480
 8002050:	200014ce 	.word	0x200014ce
 8002054:	200000e7 	.word	0x200000e7

08002058 <bankreport>:


void bankreport(void)
{
 8002058:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	uart1_transmit(&capC);
 800205a:	4815      	ldr	r0, [pc, #84]	; (80020b0 <bankreport+0x58>)
	temp = cs_sample_count;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 800205c:	4d15      	ldr	r5, [pc, #84]	; (80020b4 <bankreport+0x5c>)
	uart1_transmit(&cli_return);
 800205e:	4c16      	ldr	r4, [pc, #88]	; (80020b8 <bankreport+0x60>)
	uart1_transmit(&capC);
 8002060:	f000 fc7a 	bl	8002958 <uart1_transmit>
	temp = cs_sample_count;
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <bankreport+0x64>)
	convert_to_ascii(temp);
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f7ff fc82 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800206c:	4628      	mov	r0, r5
 800206e:	f000 fc73 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002072:	4620      	mov	r0, r4
 8002074:	f000 fc70 	bl	8002958 <uart1_transmit>

	uart1_transmit(&capO);
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <bankreport+0x68>)
 800207a:	f000 fc6d 	bl	8002958 <uart1_transmit>
	temp = ov_sample_count;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <bankreport+0x6c>)
	convert_to_ascii(temp);
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f7ff fc75 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002086:	4628      	mov	r0, r5
 8002088:	f000 fc66 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 800208c:	4620      	mov	r0, r4
 800208e:	f000 fc63 	bl	8002958 <uart1_transmit>

	uart1_transmit(&capI);
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <bankreport+0x70>)
 8002094:	f000 fc60 	bl	8002958 <uart1_transmit>
	temp = iv_sample_count;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <bankreport+0x74>)
	convert_to_ascii(temp);
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	f7ff fc68 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80020a0:	4628      	mov	r0, r5
 80020a2:	f000 fc59 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 80020a6:	4620      	mov	r0, r4

}
 80020a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 80020ac:	f000 bc54 	b.w	8002958 <uart1_transmit>
 80020b0:	20000063 	.word	0x20000063
 80020b4:	200014ce 	.word	0x200014ce
 80020b8:	200000e7 	.word	0x200000e7
 80020bc:	200014f0 	.word	0x200014f0
 80020c0:	200000c6 	.word	0x200000c6
 80020c4:	2000149c 	.word	0x2000149c
 80020c8:	200000a5 	.word	0x200000a5
 80020cc:	20000df0 	.word	0x20000df0

080020d0 <flagreport>:


void flagreport(void)
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	temp = system_flags;
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <flagreport+0x34>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 80020d4:	4d0c      	ldr	r5, [pc, #48]	; (8002108 <flagreport+0x38>)
	convert_to_ascii(temp);
 80020d6:	6818      	ldr	r0, [r3, #0]
	uart1_transmit(&cli_return);
 80020d8:	4c0c      	ldr	r4, [pc, #48]	; (800210c <flagreport+0x3c>)
	convert_to_ascii(temp);
 80020da:	f7ff fc49 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80020de:	4628      	mov	r0, r5
 80020e0:	f000 fc3a 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f000 fc37 	bl	8002958 <uart1_transmit>

	temp = adc_conversion_channel;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <flagreport+0x40>)
	convert_to_ascii(temp);
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f7ff fc3f 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80020f2:	4628      	mov	r0, r5
 80020f4:	f000 fc30 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 80020f8:	4620      	mov	r0, r4


}
 80020fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 80020fe:	f000 bc2b 	b.w	8002958 <uart1_transmit>
 8002102:	bf00      	nop
 8002104:	20000dfc 	.word	0x20000dfc
 8002108:	200014ce 	.word	0x200014ce
 800210c:	200000e7 	.word	0x200000e7
 8002110:	20000dec 	.word	0x20000dec

08002114 <convreport>:

void convreport(void)
{
 8002114:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	temp = conversion_count;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <convreport+0x48>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8002118:	4d11      	ldr	r5, [pc, #68]	; (8002160 <convreport+0x4c>)
	convert_to_ascii(temp);
 800211a:	6818      	ldr	r0, [r3, #0]
	uart1_transmit(&cli_return);
 800211c:	4c11      	ldr	r4, [pc, #68]	; (8002164 <convreport+0x50>)
	convert_to_ascii(temp);
 800211e:	f7ff fc27 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002122:	4628      	mov	r0, r5
 8002124:	f000 fc18 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002128:	4620      	mov	r0, r4
 800212a:	f000 fc15 	bl	8002958 <uart1_transmit>

	temp = avg_count;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <convreport+0x54>)
	convert_to_ascii(temp);
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	f7ff fc1d 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002136:	4628      	mov	r0, r5
 8002138:	f000 fc0e 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 800213c:	4620      	mov	r0, r4
 800213e:	f000 fc0b 	bl	8002958 <uart1_transmit>

	temp = ((ADC1)->SQR1);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <convreport+0x58>)
 8002144:	6b18      	ldr	r0, [r3, #48]	; 0x30
	convert_to_ascii(temp);
 8002146:	f7ff fc13 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800214a:	4628      	mov	r0, r5
 800214c:	f000 fc04 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002150:	4620      	mov	r0, r4



}
 8002152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 8002156:	f000 bbff 	b.w	8002958 <uart1_transmit>
 800215a:	bf00      	nop
 800215c:	20001484 	.word	0x20001484
 8002160:	200014ce 	.word	0x200014ce
 8002164:	200000e7 	.word	0x200000e7
 8002168:	200014c4 	.word	0x200014c4
 800216c:	50040000 	.word	0x50040000

08002170 <tbankreport>:

void tbankreport(void)
{
 8002170:	b538      	push	{r3, r4, r5, lr}

	uint32_t temp;

	uart1_transmit(&capE);
 8002172:	480f      	ldr	r0, [pc, #60]	; (80021b0 <tbankreport+0x40>)
	temp = ex_sample_count;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8002174:	4d0f      	ldr	r5, [pc, #60]	; (80021b4 <tbankreport+0x44>)
	uart1_transmit(&cli_return);
 8002176:	4c10      	ldr	r4, [pc, #64]	; (80021b8 <tbankreport+0x48>)
	uart1_transmit(&capE);
 8002178:	f000 fbee 	bl	8002958 <uart1_transmit>
	temp = ex_sample_count;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <tbankreport+0x4c>)
	convert_to_ascii(temp);
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f7ff fbf6 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002184:	4628      	mov	r0, r5
 8002186:	f000 fbe7 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 800218a:	4620      	mov	r0, r4
 800218c:	f000 fbe4 	bl	8002958 <uart1_transmit>

	uart1_transmit(&capI);
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <tbankreport+0x50>)
 8002192:	f000 fbe1 	bl	8002958 <uart1_transmit>
	temp = in_sample_count;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <tbankreport+0x54>)
	convert_to_ascii(temp);
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f7ff fbe9 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800219e:	4628      	mov	r0, r5
 80021a0:	f000 fbda 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 80021a4:	4620      	mov	r0, r4
}
 80021a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 80021aa:	f000 bbd5 	b.w	8002958 <uart1_transmit>
 80021ae:	bf00      	nop
 80021b0:	20000084 	.word	0x20000084
 80021b4:	200014ce 	.word	0x200014ce
 80021b8:	200000e7 	.word	0x200000e7
 80021bc:	20001144 	.word	0x20001144
 80021c0:	200000a5 	.word	0x200000a5
 80021c4:	20000e00 	.word	0x20000e00

080021c8 <stupreport>:

void stupreport(void)
{
 80021c8:	b508      	push	{r3, lr}
	uint32_t temp;

	temp = start_up_flags;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <stupreport+0x1c>)
	convert_to_ascii(temp);
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	f7ff fbcf 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <stupreport+0x20>)
 80021d4:	f000 fbc0 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <stupreport+0x24>)

}
 80021da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart1_transmit(&cli_return);
 80021de:	f000 bbbb 	b.w	8002958 <uart1_transmit>
 80021e2:	bf00      	nop
 80021e4:	2000148c 	.word	0x2000148c
 80021e8:	200014ce 	.word	0x200014ce
 80021ec:	200000e7 	.word	0x200000e7

080021f0 <dacreport>:

void dacreport(void)
{
 80021f0:	b508      	push	{r3, lr}
	uint32_t temp;

	temp = ((DAC)->DOR2);
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <dacreport+0x1c>)
 80021f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
	convert_to_ascii(temp);
 80021f6:	f7ff fbbb 	bl	8001970 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <dacreport+0x20>)
 80021fc:	f000 fbac 	bl	8002958 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <dacreport+0x24>)


}
 8002202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart1_transmit(&cli_return);
 8002206:	f000 bba7 	b.w	8002958 <uart1_transmit>
 800220a:	bf00      	nop
 800220c:	40007400 	.word	0x40007400
 8002210:	200014ce 	.word	0x200014ce
 8002214:	200000e7 	.word	0x200000e7

08002218 <system_ins_search>:
{
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
uart1_transmit(&cli_return);
 800221c:	487f      	ldr	r0, [pc, #508]	; (800241c <system_ins_search+0x204>)
 800221e:	f000 fb9b 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&timrpt))
 8002222:	497f      	ldr	r1, [pc, #508]	; (8002420 <system_ins_search+0x208>)
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fbe1 	bl	80019ec <string_compare>
 800222a:	b108      	cbz	r0, 8002230 <system_ins_search+0x18>
{tim1report();}
 800222c:	f7ff fe2c 	bl	8001e88 <tim1report>
if(string_compare(cmd,&voltrpt))
 8002230:	497c      	ldr	r1, [pc, #496]	; (8002424 <system_ins_search+0x20c>)
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fbda 	bl	80019ec <string_compare>
 8002238:	b108      	cbz	r0, 800223e <system_ins_search+0x26>
{voltreport();}
 800223a:	f7ff fe7d 	bl	8001f38 <voltreport>
if(string_compare(cmd,&timerpt))
 800223e:	497a      	ldr	r1, [pc, #488]	; (8002428 <system_ins_search+0x210>)
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fbd3 	bl	80019ec <string_compare>
 8002246:	b108      	cbz	r0, 800224c <system_ins_search+0x34>
{timereport();}
 8002248:	f7ff fec8 	bl	8001fdc <timereport>
if(string_compare(cmd,&bankrpt))
 800224c:	4977      	ldr	r1, [pc, #476]	; (800242c <system_ins_search+0x214>)
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff fbcc 	bl	80019ec <string_compare>
 8002254:	b108      	cbz	r0, 800225a <system_ins_search+0x42>
{bankreport();}
 8002256:	f7ff feff 	bl	8002058 <bankreport>
if(string_compare(cmd,&tbankrpt))
 800225a:	4975      	ldr	r1, [pc, #468]	; (8002430 <system_ins_search+0x218>)
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fbc5 	bl	80019ec <string_compare>
 8002262:	b108      	cbz	r0, 8002268 <system_ins_search+0x50>
{tbankreport();}
 8002264:	f7ff ff84 	bl	8002170 <tbankreport>
if(string_compare(cmd,&flagrpt))
 8002268:	4972      	ldr	r1, [pc, #456]	; (8002434 <system_ins_search+0x21c>)
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff fbbe 	bl	80019ec <string_compare>
 8002270:	b108      	cbz	r0, 8002276 <system_ins_search+0x5e>
{flagreport();}
 8002272:	f7ff ff2d 	bl	80020d0 <flagreport>
if(string_compare(cmd,&stuprpt))
 8002276:	4970      	ldr	r1, [pc, #448]	; (8002438 <system_ins_search+0x220>)
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff fbb7 	bl	80019ec <string_compare>
 800227e:	b108      	cbz	r0, 8002284 <system_ins_search+0x6c>
{stupreport();}
 8002280:	f7ff ffa2 	bl	80021c8 <stupreport>
if(string_compare(cmd,&flagclr))
 8002284:	496d      	ldr	r1, [pc, #436]	; (800243c <system_ins_search+0x224>)
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fbb0 	bl	80019ec <string_compare>
 800228c:	b108      	cbz	r0, 8002292 <system_ins_search+0x7a>
{flagclear();}
 800228e:	f7ff fdc1 	bl	8001e14 <flagclear>
if(string_compare(cmd,&convrpt))
 8002292:	496b      	ldr	r1, [pc, #428]	; (8002440 <system_ins_search+0x228>)
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff fba9 	bl	80019ec <string_compare>
 800229a:	b108      	cbz	r0, 80022a0 <system_ins_search+0x88>
{convreport();}
 800229c:	f7ff ff3a 	bl	8002114 <convreport>
if(string_compare(cmd,&temprpt))
 80022a0:	4968      	ldr	r1, [pc, #416]	; (8002444 <system_ins_search+0x22c>)
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fba2 	bl	80019ec <string_compare>
 80022a8:	b108      	cbz	r0, 80022ae <system_ins_search+0x96>
{tempreport();}
 80022aa:	f7ff fdbf 	bl	8001e2c <tempreport>
if(string_compare(cmd,&dcp))
 80022ae:	4966      	ldr	r1, [pc, #408]	; (8002448 <system_ins_search+0x230>)
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fb9b 	bl	80019ec <string_compare>
 80022b6:	b128      	cbz	r0, 80022c4 <system_ins_search+0xac>
{duty_cycle_increment(1U);uart1_transmit(&money);}
 80022b8:	2001      	movs	r0, #1
 80022ba:	f000 fa59 	bl	8002770 <duty_cycle_increment>
 80022be:	4863      	ldr	r0, [pc, #396]	; (800244c <system_ins_search+0x234>)
 80022c0:	f000 fb4a 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&buck))
 80022c4:	4962      	ldr	r1, [pc, #392]	; (8002450 <system_ins_search+0x238>)
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7ff fb90 	bl	80019ec <string_compare>
 80022cc:	b120      	cbz	r0, 80022d8 <system_ins_search+0xc0>
{buck_mode();uart1_transmit(&money);}
 80022ce:	f000 f91b 	bl	8002508 <buck_mode>
 80022d2:	485e      	ldr	r0, [pc, #376]	; (800244c <system_ins_search+0x234>)
 80022d4:	f000 fb40 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&boost))
 80022d8:	495e      	ldr	r1, [pc, #376]	; (8002454 <system_ins_search+0x23c>)
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fb86 	bl	80019ec <string_compare>
 80022e0:	b120      	cbz	r0, 80022ec <system_ins_search+0xd4>
{boost_mode();uart1_transmit(&money);}
 80022e2:	f000 f93d 	bl	8002560 <boost_mode>
 80022e6:	4859      	ldr	r0, [pc, #356]	; (800244c <system_ins_search+0x234>)
 80022e8:	f000 fb36 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&lock))
 80022ec:	495a      	ldr	r1, [pc, #360]	; (8002458 <system_ins_search+0x240>)
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff fb7c 	bl	80019ec <string_compare>
 80022f4:	b120      	cbz	r0, 8002300 <system_ins_search+0xe8>
{lockout_mode();uart1_transmit(&money);}
 80022f6:	f000 f95f 	bl	80025b8 <lockout_mode>
 80022fa:	4854      	ldr	r0, [pc, #336]	; (800244c <system_ins_search+0x234>)
 80022fc:	f000 fb2c 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&pass))
 8002300:	4956      	ldr	r1, [pc, #344]	; (800245c <system_ins_search+0x244>)
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff fb72 	bl	80019ec <string_compare>
 8002308:	b120      	cbz	r0, 8002314 <system_ins_search+0xfc>
{passthru_mode();uart1_transmit(&money);}
 800230a:	f000 fa05 	bl	8002718 <passthru_mode>
 800230e:	484f      	ldr	r0, [pc, #316]	; (800244c <system_ins_search+0x234>)
 8002310:	f000 fb22 	bl	8002958 <uart1_transmit>
if(dc_search(cmd))
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff fcb1 	bl	8001c7c <dc_search>
 800231a:	b110      	cbz	r0, 8002322 <system_ins_search+0x10a>
{uart1_transmit(&money);}
 800231c:	484b      	ldr	r0, [pc, #300]	; (800244c <system_ins_search+0x234>)
 800231e:	f000 fb1b 	bl	8002958 <uart1_transmit>
if(current_decode(cmd))
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fcca 	bl	8001cbc <current_decode>
 8002328:	b110      	cbz	r0, 8002330 <system_ins_search+0x118>
{uart1_transmit(&money);}
 800232a:	4848      	ldr	r0, [pc, #288]	; (800244c <system_ins_search+0x234>)
 800232c:	f000 fb14 	bl	8002958 <uart1_transmit>
if(voltage_decode(cmd))
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fd03 	bl	8001d3c <voltage_decode>
 8002336:	b110      	cbz	r0, 800233e <system_ins_search+0x126>
{uart1_transmit(&money);}
 8002338:	4844      	ldr	r0, [pc, #272]	; (800244c <system_ins_search+0x234>)
 800233a:	f000 fb0d 	bl	8002958 <uart1_transmit>
if(exp_voltage_decode(cmd))
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff fd32 	bl	8001da8 <exp_voltage_decode>
 8002344:	b110      	cbz	r0, 800234c <system_ins_search+0x134>
{uart1_transmit(&money);}
 8002346:	4841      	ldr	r0, [pc, #260]	; (800244c <system_ins_search+0x234>)
 8002348:	f000 fb06 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&dacup))
 800234c:	4944      	ldr	r1, [pc, #272]	; (8002460 <system_ins_search+0x248>)
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff fb4c 	bl	80019ec <string_compare>
 8002354:	b128      	cbz	r0, 8002362 <system_ins_search+0x14a>
{dac_up(200U);uart1_transmit(&money);}
 8002356:	20c8      	movs	r0, #200	; 0xc8
 8002358:	f7fe fcb6 	bl	8000cc8 <dac_up>
 800235c:	483b      	ldr	r0, [pc, #236]	; (800244c <system_ins_search+0x234>)
 800235e:	f000 fafb 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&dacdn))
 8002362:	4940      	ldr	r1, [pc, #256]	; (8002464 <system_ins_search+0x24c>)
 8002364:	4620      	mov	r0, r4
 8002366:	f7ff fb41 	bl	80019ec <string_compare>
 800236a:	b128      	cbz	r0, 8002378 <system_ins_search+0x160>
{dac_down(200U);uart1_transmit(&money);}
 800236c:	20c8      	movs	r0, #200	; 0xc8
 800236e:	f7fe fcc5 	bl	8000cfc <dac_down>
 8002372:	4836      	ldr	r0, [pc, #216]	; (800244c <system_ins_search+0x234>)
 8002374:	f000 faf0 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&dacmn))
 8002378:	493b      	ldr	r1, [pc, #236]	; (8002468 <system_ins_search+0x250>)
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff fb36 	bl	80019ec <string_compare>
 8002380:	b128      	cbz	r0, 800238e <system_ins_search+0x176>
{dac_set(0U);uart1_transmit(&money);}
 8002382:	2000      	movs	r0, #0
 8002384:	f7fe fcd0 	bl	8000d28 <dac_set>
 8002388:	4830      	ldr	r0, [pc, #192]	; (800244c <system_ins_search+0x234>)
 800238a:	f000 fae5 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&dacmx))
 800238e:	4937      	ldr	r1, [pc, #220]	; (800246c <system_ins_search+0x254>)
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff fb2b 	bl	80019ec <string_compare>
 8002396:	b130      	cbz	r0, 80023a6 <system_ins_search+0x18e>
{dac_set(4095U);uart1_transmit(&money);}
 8002398:	f640 70ff 	movw	r0, #4095	; 0xfff
 800239c:	f7fe fcc4 	bl	8000d28 <dac_set>
 80023a0:	482a      	ldr	r0, [pc, #168]	; (800244c <system_ins_search+0x234>)
 80023a2:	f000 fad9 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&dacrpt))
 80023a6:	4932      	ldr	r1, [pc, #200]	; (8002470 <system_ins_search+0x258>)
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff fb1f 	bl	80019ec <string_compare>
 80023ae:	b108      	cbz	r0, 80023b4 <system_ins_search+0x19c>
{dacreport();}
 80023b0:	f7ff ff1e 	bl	80021f0 <dacreport>
if(string_compare(cmd,&drven))
 80023b4:	492f      	ldr	r1, [pc, #188]	; (8002474 <system_ins_search+0x25c>)
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff fb18 	bl	80019ec <string_compare>
 80023bc:	b150      	cbz	r0, 80023d4 <system_ins_search+0x1bc>
start_up_flags &= 0U;
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <system_ins_search+0x260>)
uart1_transmit(&money);
 80023c0:	4822      	ldr	r0, [pc, #136]	; (800244c <system_ins_search+0x234>)
start_up_flags &= 0U;
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
system_flags |= START_UP_FLAG;
 80023c6:	4a2d      	ldr	r2, [pc, #180]	; (800247c <system_ins_search+0x264>)
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ce:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 80023d0:	f000 fac2 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&drvdis))
 80023d4:	492a      	ldr	r1, [pc, #168]	; (8002480 <system_ins_search+0x268>)
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff fb08 	bl	80019ec <string_compare>
 80023dc:	b138      	cbz	r0, 80023ee <system_ins_search+0x1d6>
system_flags &= ~(PMIC_ENABLE_FLAG);
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <system_ins_search+0x264>)
uart1_transmit(&money);
 80023e0:	481a      	ldr	r0, [pc, #104]	; (800244c <system_ins_search+0x234>)
system_flags &= ~(PMIC_ENABLE_FLAG);
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e8:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 80023ea:	f000 fab5 	bl	8002958 <uart1_transmit>
if(string_compare(cmd,&csrs))
 80023ee:	4925      	ldr	r1, [pc, #148]	; (8002484 <system_ins_search+0x26c>)
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fafb 	bl	80019ec <string_compare>
 80023f6:	b140      	cbz	r0, 800240a <system_ins_search+0x1f2>
{cs_offset = ((&cs_channel)->avg)-40U; uart1_transmit(&money);}
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <system_ins_search+0x270>)
 80023fa:	4a24      	ldr	r2, [pc, #144]	; (800248c <system_ins_search+0x274>)
 80023fc:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002400:	4812      	ldr	r0, [pc, #72]	; (800244c <system_ins_search+0x234>)
 8002402:	3b28      	subs	r3, #40	; 0x28
 8002404:	8013      	strh	r3, [r2, #0]
 8002406:	f000 faa7 	bl	8002958 <uart1_transmit>
uart1_transmit(&cli_return);
 800240a:	4804      	ldr	r0, [pc, #16]	; (800241c <system_ins_search+0x204>)
 800240c:	f000 faa4 	bl	8002958 <uart1_transmit>
uart1_transmit(&prompt);
 8002410:	481f      	ldr	r0, [pc, #124]	; (8002490 <system_ins_search+0x278>)
}
 8002412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
uart1_transmit(&prompt);
 8002416:	f000 ba9f 	b.w	8002958 <uart1_transmit>
 800241a:	bf00      	nop
 800241c:	200000e7 	.word	0x200000e7
 8002420:	200003ca 	.word	0x200003ca
 8002424:	200003eb 	.word	0x200003eb
 8002428:	200003a9 	.word	0x200003a9
 800242c:	20000000 	.word	0x20000000
 8002430:	20000367 	.word	0x20000367
 8002434:	20000294 	.word	0x20000294
 8002438:	20000346 	.word	0x20000346
 800243c:	20000273 	.word	0x20000273
 8002440:	20000108 	.word	0x20000108
 8002444:	20000388 	.word	0x20000388
 8002448:	20000210 	.word	0x20000210
 800244c:	200002d6 	.word	0x200002d6
 8002450:	20000042 	.word	0x20000042
 8002454:	20000021 	.word	0x20000021
 8002458:	200002b5 	.word	0x200002b5
 800245c:	20000304 	.word	0x20000304
 8002460:	200001ef 	.word	0x200001ef
 8002464:	2000016b 	.word	0x2000016b
 8002468:	2000018c 	.word	0x2000018c
 800246c:	200001ad 	.word	0x200001ad
 8002470:	200001ce 	.word	0x200001ce
 8002474:	20000252 	.word	0x20000252
 8002478:	2000148c 	.word	0x2000148c
 800247c:	20000dfc 	.word	0x20000dfc
 8002480:	20000231 	.word	0x20000231
 8002484:	2000014a 	.word	0x2000014a
 8002488:	20000ab8 	.word	0x20000ab8
 800248c:	200014a4 	.word	0x200014a4
 8002490:	20000325 	.word	0x20000325

08002494 <system_management>:
{
 8002494:	b508      	push	{r3, lr}
flags = uart1_get_flags();
 8002496:	f000 fac3 	bl	8002a20 <uart1_get_flags>
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <system_management+0x24>)
 800249c:	7018      	strb	r0, [r3, #0]
if(flags & CMD_EXECUTE)
 800249e:	0743      	lsls	r3, r0, #29
 80024a0:	d505      	bpl.n	80024ae <system_management+0x1a>
cmd = cmd_execute();
 80024a2:	f000 fab1 	bl	8002a08 <cmd_execute>
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <system_management+0x28>)
 80024a8:	6018      	str	r0, [r3, #0]
system_ins_search(cmd);
 80024aa:	f7ff feb5 	bl	8002218 <system_ins_search>
}
 80024ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
button_managment();
 80024b2:	f7fe be8d 	b.w	80011d0 <button_managment>
 80024b6:	bf00      	nop
 80024b8:	200014b8 	.word	0x200014b8
 80024bc:	200014f4 	.word	0x200014f4

080024c0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	490f      	ldr	r1, [pc, #60]	; (8002500 <SystemInit+0x40>)
 80024c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <SystemInit+0x44>)
 80024d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024d2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80024da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80024e2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80024e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024f6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024fc:	608b      	str	r3, [r1, #8]
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	40021000 	.word	0x40021000

08002508 <buck_mode>:
((TIM1)->CR1) |= TIM1_ENABLE;
}

void buck_mode(void)
{
		mode = BUCK_MODE;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <buck_mode+0x4c>)
 800250a:	2204      	movs	r2, #4
 800250c:	701a      	strb	r2, [r3, #0]

        ((TIM1)->CCR3) = dc_val;
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <buck_mode+0x50>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <buck_mode+0x54>)
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c

	    ((TIM1)->CCMR1) &= 0U;
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
	    ((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 800251c:	6999      	ldr	r1, [r3, #24]
 800251e:	f640 0008 	movw	r0, #2056	; 0x808
 8002522:	4301      	orrs	r1, r0
 8002524:	6199      	str	r1, [r3, #24]
		((TIM1)->CCMR1) |= ((LOW_MODE)<<(BOOST_PWM_SHIFT));
 8002526:	6999      	ldr	r1, [r3, #24]
 8002528:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800252c:	6199      	str	r1, [r3, #24]
		((TIM1)->CCMR1) |= ((LOW_MODE)<<(BOOST_EN_SHIFT));
 800252e:	6999      	ldr	r1, [r3, #24]
 8002530:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002534:	6199      	str	r1, [r3, #24]

		((TIM1)->CCMR2) &= 0U;
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	4302      	orrs	r2, r0
 800253e:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= ((HIGH_MODE)<<(BUCK_EN_SHIFT));
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 8002546:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= ((PWM_MODE_1)<<(BUCK_PWM_SHIFT));
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800254e:	61da      	str	r2, [r3, #28]
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20001500 	.word	0x20001500
 8002558:	20001508 	.word	0x20001508
 800255c:	40012c00 	.word	0x40012c00

08002560 <boost_mode>:
}

void boost_mode(void)
{

		mode = BOOST_MODE;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <boost_mode+0x4c>)
 8002562:	2203      	movs	r2, #3
 8002564:	701a      	strb	r2, [r3, #0]

		((TIM1)->CCR1) = dc_val;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <boost_mode+0x50>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <boost_mode+0x54>)
 800256c:	635a      	str	r2, [r3, #52]	; 0x34

		((TIM1)->CCMR1) &= 0U;
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
		((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	f640 0008 	movw	r0, #2056	; 0x808
 800257a:	4301      	orrs	r1, r0
 800257c:	6199      	str	r1, [r3, #24]
		((TIM1)->CCMR1) |= ((HIGH_MODE)<<(BOOST_EN_SHIFT));
 800257e:	6999      	ldr	r1, [r3, #24]
 8002580:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
 8002584:	6199      	str	r1, [r3, #24]
		((TIM1)->CCMR1) |= ((PWM_MODE_2)<<(BOOST_PWM_SHIFT));
 8002586:	6999      	ldr	r1, [r3, #24]
 8002588:	f041 0170 	orr.w	r1, r1, #112	; 0x70
 800258c:	6199      	str	r1, [r3, #24]

		((TIM1)->CCMR2) &= 0U;
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	4302      	orrs	r2, r0
 8002596:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= ((LOW_MODE)<<(BUCK_EN_SHIFT));
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800259e:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= ((LOW_MODE)<<(BUCK_PWM_SHIFT));
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a6:	61da      	str	r2, [r3, #28]
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20001500 	.word	0x20001500
 80025b0:	20001508 	.word	0x20001508
 80025b4:	40012c00 	.word	0x40012c00

080025b8 <lockout_mode>:
}
void lockout_mode(void)
{
	mode = LOCKOUT_MODE;
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <lockout_mode+0x44>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
	((TIM1)->CCMR1) &= 0U;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <lockout_mode+0x48>)
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
    ((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 80025c6:	6999      	ldr	r1, [r3, #24]
 80025c8:	f640 0008 	movw	r0, #2056	; 0x808
 80025cc:	4301      	orrs	r1, r0
 80025ce:	6199      	str	r1, [r3, #24]
	((TIM1)->CCMR1) |= ((LOW_MODE)<<(BOOST_EN_SHIFT));
 80025d0:	6999      	ldr	r1, [r3, #24]
 80025d2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80025d6:	6199      	str	r1, [r3, #24]
	((TIM1)->CCMR1) |= ((LOW_MODE)<<(BOOST_PWM_SHIFT));
 80025d8:	6999      	ldr	r1, [r3, #24]
 80025da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80025de:	6199      	str	r1, [r3, #24]

	((TIM1)->CCMR2) &= 0U;
 80025e0:	69d9      	ldr	r1, [r3, #28]
 80025e2:	61da      	str	r2, [r3, #28]
    ((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	4302      	orrs	r2, r0
 80025e8:	61da      	str	r2, [r3, #28]
	((TIM1)->CCMR2) |= ((LOW_MODE)<<(BUCK_EN_SHIFT));
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f0:	61da      	str	r2, [r3, #28]
	((TIM1)->CCMR2) |= ((LOW_MODE)<<(BUCK_PWM_SHIFT));
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	4770      	bx	lr
 80025fc:	20001500 	.word	0x20001500
 8002600:	40012c00 	.word	0x40012c00

08002604 <tim1_enable>:
clk_freq = 47000U;
 8002604:	4a3c      	ldr	r2, [pc, #240]	; (80026f8 <tim1_enable+0xf4>)
{
 8002606:	b570      	push	{r4, r5, r6, lr}
clk_freq = 47000U;
 8002608:	f24b 7398 	movw	r3, #47000	; 0xb798
arr_val = clk_freq/(freq);
 800260c:	4e3b      	ldr	r6, [pc, #236]	; (80026fc <tim1_enable+0xf8>)
clk_freq = 47000U;
 800260e:	6013      	str	r3, [r2, #0]
arr_val = clk_freq/(freq);
 8002610:	fbb3 f0f0 	udiv	r0, r3, r0
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 8002614:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <tim1_enable+0xfc>)
arr_val = clk_freq/(freq);
 8002616:	6030      	str	r0, [r6, #0]
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 8002618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
((TIM1)->CCER) &= 0U;
 800261a:	4c3a      	ldr	r4, [pc, #232]	; (8002704 <tim1_enable+0x100>)
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	661a      	str	r2, [r3, #96]	; 0x60
((RCC)->AHB2ENR) |= RCC_GPIOA_ENABLE;
 8002622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_8_DSHIFT)));
 800262a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
((TIM1)->CCER) &= 0U;
 800262e:	2500      	movs	r5, #0
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_8_DSHIFT)));
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002636:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((AF_MODE)<<(GPIO_8_DSHIFT)));
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800263e:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_9_DSHIFT)));
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002646:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((AF_MODE)<<(GPIO_9_DSHIFT)));
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800264e:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_10_DSHIFT)));
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002656:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((AF_MODE)<<(GPIO_10_DSHIFT)));
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800265e:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_11_DSHIFT)));
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002666:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((AF_MODE)<<(GPIO_11_DSHIFT)));
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800266e:	601a      	str	r2, [r3, #0]
(((GPIOA)->AFR)[1]) |= ((AF1)<<(GPIO_8_QSHIFT));
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
(((GPIOA)->AFR)[1]) |= ((AF1)<<(GPIO_9_QSHIFT));
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	f042 0210 	orr.w	r2, r2, #16
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
(((GPIOA)->AFR)[1]) |= ((AF1)<<(GPIO_10_QSHIFT));
 8002680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
(((GPIOA)->AFR)[1]) |= ((AF1)<<(GPIO_11_QSHIFT));
 8002688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
((TIM1)->CCER) &= 0U;
 8002690:	6a23      	ldr	r3, [r4, #32]
 8002692:	6225      	str	r5, [r4, #32]
lockout_mode();
 8002694:	f7ff ff90 	bl	80025b8 <lockout_mode>
((TIM1)->ARR) = arr_val;
 8002698:	6833      	ldr	r3, [r6, #0]
 800269a:	62e3      	str	r3, [r4, #44]	; 0x2c
percent = ((arr_val/100U)+1U);
 800269c:	2264      	movs	r2, #100	; 0x64
 800269e:	fbb3 f3f2 	udiv	r3, r3, r2
 80026a2:	4a19      	ldr	r2, [pc, #100]	; (8002708 <tim1_enable+0x104>)
 80026a4:	3301      	adds	r3, #1
 80026a6:	6013      	str	r3, [r2, #0]
dc = 0;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <tim1_enable+0x108>)
 80026aa:	701d      	strb	r5, [r3, #0]
shifting_stage = 0U;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <tim1_enable+0x10c>)
 80026ae:	601d      	str	r5, [r3, #0]
up_down = 0U;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <tim1_enable+0x110>)
 80026b2:	701d      	strb	r5, [r3, #0]
((TIM1)->CCER) |= ((1U)<<(CC1_SHIFT));
 80026b4:	6a23      	ldr	r3, [r4, #32]
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6223      	str	r3, [r4, #32]
((TIM1)->CCER) |= ((1U)<<(CC2_SHIFT));
 80026bc:	6a23      	ldr	r3, [r4, #32]
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	6223      	str	r3, [r4, #32]
((TIM1)->CCER) |= ((1U)<<(CC3_SHIFT));
 80026c4:	6a23      	ldr	r3, [r4, #32]
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6223      	str	r3, [r4, #32]
((TIM1)->CCER) |= ((1U)<<(CC4_SHIFT));
 80026cc:	6a23      	ldr	r3, [r4, #32]
 80026ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d2:	6223      	str	r3, [r4, #32]
((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 80026d4:	69a2      	ldr	r2, [r4, #24]
 80026d6:	f640 0108 	movw	r1, #2056	; 0x808
 80026da:	430a      	orrs	r2, r1
 80026dc:	61a2      	str	r2, [r4, #24]
((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 80026de:	69e3      	ldr	r3, [r4, #28]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	61e3      	str	r3, [r4, #28]
((TIM1)->BDTR) |= MOE;
 80026e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ea:	6463      	str	r3, [r4, #68]	; 0x44
((TIM1)->CR1) |= TIM1_ENABLE;
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6023      	str	r3, [r4, #0]
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	bf00      	nop
 80026f8:	20001510 	.word	0x20001510
 80026fc:	20001504 	.word	0x20001504
 8002700:	40021000 	.word	0x40021000
 8002704:	40012c00 	.word	0x40012c00
 8002708:	200014fc 	.word	0x200014fc
 800270c:	200014f8 	.word	0x200014f8
 8002710:	2000150c 	.word	0x2000150c
 8002714:	200014f9 	.word	0x200014f9

08002718 <passthru_mode>:

}
void passthru_mode(void)
{
	mode = PASSTHRU_MODE;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <passthru_mode+0x44>)
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
	((TIM1)->CCMR1) &= 0U;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <passthru_mode+0x48>)
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
    ((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	f640 0008 	movw	r0, #2056	; 0x808
 800272c:	4301      	orrs	r1, r0
 800272e:	6199      	str	r1, [r3, #24]
	((TIM1)->CCMR1) |= ((HIGH_MODE)<<(BOOST_PWM_SHIFT));
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8002736:	6199      	str	r1, [r3, #24]
    ((TIM1)->CCMR1) |= ((HIGH_MODE)<<(BOOST_EN_SHIFT));
 8002738:	6999      	ldr	r1, [r3, #24]
 800273a:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
 800273e:	6199      	str	r1, [r3, #24]

	((TIM1)->CCMR2) &= 0U;
 8002740:	69d9      	ldr	r1, [r3, #28]
 8002742:	61da      	str	r2, [r3, #28]
    ((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	4302      	orrs	r2, r0
 8002748:	61da      	str	r2, [r3, #28]
	((TIM1)->CCMR2) |= ((LOW_MODE)<<(BUCK_PWM_SHIFT));
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	61da      	str	r2, [r3, #28]
    ((TIM1)->CCMR2) |= ((HIGH_MODE)<<(BUCK_EN_SHIFT));
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 8002758:	61da      	str	r2, [r3, #28]
 800275a:	4770      	bx	lr
 800275c:	20001500 	.word	0x20001500
 8002760:	40012c00 	.word	0x40012c00

08002764 <mode_check>:
}

uint8_t mode_check(void)
{return mode;}
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <mode_check+0x8>)
 8002766:	7818      	ldrb	r0, [r3, #0]
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20001500 	.word	0x20001500

08002770 <duty_cycle_increment>:

void duty_cycle_increment(uint32_t step)
{


dc_val+=step;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <duty_cycle_increment+0x98>)
if(dc_val >= (arr_val - 1U))
{dc_val = (arr_val - 1U);}
dc = dc_val/percent;
 8002772:	4926      	ldr	r1, [pc, #152]	; (800280c <duty_cycle_increment+0x9c>)
dc_val+=step;
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4410      	add	r0, r2
if(dc_val >= (arr_val - 1U))
 8002778:	4a25      	ldr	r2, [pc, #148]	; (8002810 <duty_cycle_increment+0xa0>)
dc_val+=step;
 800277a:	6018      	str	r0, [r3, #0]
if(dc_val >= (arr_val - 1U))
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	3a01      	subs	r2, #1
 8002780:	4290      	cmp	r0, r2
{dc_val = (arr_val - 1U);}
 8002782:	bf28      	it	cs
 8002784:	601a      	strcs	r2, [r3, #0]
dc = dc_val/percent;
 8002786:	4a23      	ldr	r2, [pc, #140]	; (8002814 <duty_cycle_increment+0xa4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002790:	700a      	strb	r2, [r1, #0]

if(mode == BOOST_MODE)
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <duty_cycle_increment+0xa8>)
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	2a03      	cmp	r2, #3
 8002798:	d10d      	bne.n	80027b6 <duty_cycle_increment+0x46>
{((TIM1)->CCR1) = (dc_val);}
 800279a:	4a20      	ldr	r2, [pc, #128]	; (800281c <duty_cycle_increment+0xac>)
 800279c:	6353      	str	r3, [r2, #52]	; 0x34

if(mode == BUCK_MODE)
{((TIM1)->CCR3) = (dc_val);}

switch(shifting_stage)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <duty_cycle_increment+0xb0>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2a0a      	cmp	r2, #10
 80027a4:	d814      	bhi.n	80027d0 <duty_cycle_increment+0x60>
 80027a6:	e8df f002 	tbb	[pc, r2]
 80027aa:	140b      	.short	0x140b
 80027ac:	1d1b1917 	.word	0x1d1b1917
 80027b0:	2523211f 	.word	0x2523211f
 80027b4:	27          	.byte	0x27
 80027b5:	00          	.byte	0x00
if(mode == BUCK_MODE)
 80027b6:	2a04      	cmp	r2, #4
{((TIM1)->CCR3) = (dc_val);}
 80027b8:	bf04      	itt	eq
 80027ba:	4a18      	ldreq	r2, [pc, #96]	; (800281c <duty_cycle_increment+0xac>)
 80027bc:	63d3      	streq	r3, [r2, #60]	; 0x3c
 80027be:	e7ee      	b.n	800279e <duty_cycle_increment+0x2e>
{
case 0U: shifting_stage += 1U; ((TIM1)->DIER) |=  UIE; up_down = 1U; break;
 80027c0:	2201      	movs	r2, #1
 80027c2:	4916      	ldr	r1, [pc, #88]	; (800281c <duty_cycle_increment+0xac>)
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68cb      	ldr	r3, [r1, #12]
 80027c8:	4313      	orrs	r3, r2
case 5U: shifting_stage += 1U; break;
case 6U: shifting_stage += 1U; break;
case 7U: shifting_stage += 1U; break;
case 8U: shifting_stage += 1U; break;
case 9U: shifting_stage += 1U; break;
case 10U: shifting_stage = 0U;((TIM1)->DIER) &= ~(UIE);  up_down = 0U;break;
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <duty_cycle_increment+0xb4>)
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	4770      	bx	lr
case 1U: shifting_stage += 1U; break;
 80027d2:	2202      	movs	r2, #2
case 9U: shifting_stage += 1U; break;
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4770      	bx	lr
case 2U: shifting_stage += 1U; break;
 80027d8:	2203      	movs	r2, #3
 80027da:	e7fb      	b.n	80027d4 <duty_cycle_increment+0x64>
case 3U: shifting_stage += 1U; break;
 80027dc:	2204      	movs	r2, #4
 80027de:	e7f9      	b.n	80027d4 <duty_cycle_increment+0x64>
case 4U: shifting_stage += 1U; break;
 80027e0:	2205      	movs	r2, #5
 80027e2:	e7f7      	b.n	80027d4 <duty_cycle_increment+0x64>
case 5U: shifting_stage += 1U; break;
 80027e4:	2206      	movs	r2, #6
 80027e6:	e7f5      	b.n	80027d4 <duty_cycle_increment+0x64>
case 6U: shifting_stage += 1U; break;
 80027e8:	2207      	movs	r2, #7
 80027ea:	e7f3      	b.n	80027d4 <duty_cycle_increment+0x64>
case 7U: shifting_stage += 1U; break;
 80027ec:	2208      	movs	r2, #8
 80027ee:	e7f1      	b.n	80027d4 <duty_cycle_increment+0x64>
case 8U: shifting_stage += 1U; break;
 80027f0:	2209      	movs	r2, #9
 80027f2:	e7ef      	b.n	80027d4 <duty_cycle_increment+0x64>
case 9U: shifting_stage += 1U; break;
 80027f4:	220a      	movs	r2, #10
 80027f6:	e7ed      	b.n	80027d4 <duty_cycle_increment+0x64>
case 10U: shifting_stage = 0U;((TIM1)->DIER) &= ~(UIE);  up_down = 0U;break;
 80027f8:	2200      	movs	r2, #0
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <duty_cycle_increment+0xac>)
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	68cb      	ldr	r3, [r1, #12]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	e7e1      	b.n	80027ca <duty_cycle_increment+0x5a>
 8002806:	bf00      	nop
 8002808:	20001508 	.word	0x20001508
 800280c:	200014f8 	.word	0x200014f8
 8002810:	20001504 	.word	0x20001504
 8002814:	200014fc 	.word	0x200014fc
 8002818:	20001500 	.word	0x20001500
 800281c:	40012c00 	.word	0x40012c00
 8002820:	2000150c 	.word	0x2000150c
 8002824:	200014f9 	.word	0x200014f9

08002828 <duty_cycle_decrement>:
}


void duty_cycle_decrement(uint32_t step)
{
    if(step >= dc_val)
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <duty_cycle_decrement+0x98>)
    {dc_val = 0U;}
    else
    {dc_val -= step;}

    dc = dc_val/percent;
 800282a:	4926      	ldr	r1, [pc, #152]	; (80028c4 <duty_cycle_decrement+0x9c>)
    if(step >= dc_val)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4282      	cmp	r2, r0
    {dc_val = 0U;}
 8002830:	bf94      	ite	ls
 8002832:	2200      	movls	r2, #0
    {dc_val -= step;}
 8002834:	1a12      	subhi	r2, r2, r0
 8002836:	601a      	str	r2, [r3, #0]
    dc = dc_val/percent;
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <duty_cycle_decrement+0xa0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002842:	700a      	strb	r2, [r1, #0]

	if(mode == BOOST_MODE)
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <duty_cycle_decrement+0xa4>)
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	2a03      	cmp	r2, #3
 800284a:	d10d      	bne.n	8002868 <duty_cycle_decrement+0x40>
	{((TIM1)->CCR1) = ((dc_val));}
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <duty_cycle_decrement+0xa8>)
 800284e:	6353      	str	r3, [r2, #52]	; 0x34

	if(mode == BUCK_MODE)
	{((TIM1)->CCR3) = (dc_val);}

	switch(shifting_stage)
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <duty_cycle_decrement+0xac>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2a0a      	cmp	r2, #10
 8002856:	d831      	bhi.n	80028bc <duty_cycle_decrement+0x94>
 8002858:	e8df f002 	tbb	[pc, r2]
 800285c:	1b19160b 	.word	0x1b19160b
 8002860:	23211f1d 	.word	0x23211f1d
 8002864:	2725      	.short	0x2725
 8002866:	29          	.byte	0x29
 8002867:	00          	.byte	0x00
	if(mode == BUCK_MODE)
 8002868:	2a04      	cmp	r2, #4
	{((TIM1)->CCR3) = (dc_val);}
 800286a:	bf04      	itt	eq
 800286c:	4a18      	ldreq	r2, [pc, #96]	; (80028d0 <duty_cycle_decrement+0xa8>)
 800286e:	63d3      	streq	r3, [r2, #60]	; 0x3c
 8002870:	e7ee      	b.n	8002850 <duty_cycle_decrement+0x28>
	{
	case 0U: shifting_stage += 1U; ((TIM1)->DIER) |=  UIE; up_down = 2U; break;
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <duty_cycle_decrement+0xa8>)
 8002878:	68d3      	ldr	r3, [r2, #12]
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <duty_cycle_decrement+0xb0>)
 8002882:	2202      	movs	r2, #2
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	4770      	bx	lr
	case 1U: shifting_stage += 1U; break;
 8002888:	2202      	movs	r2, #2
	case 4U: shifting_stage += 1U; break;
	case 5U: shifting_stage += 1U; break;
	case 6U: shifting_stage += 1U; break;
	case 7U: shifting_stage += 1U; break;
	case 8U: shifting_stage += 1U; break;
	case 9U: shifting_stage += 1U; break;
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4770      	bx	lr
	case 2U: shifting_stage += 1U; break;
 800288e:	2203      	movs	r2, #3
 8002890:	e7fb      	b.n	800288a <duty_cycle_decrement+0x62>
	case 3U: shifting_stage += 1U; break;
 8002892:	2204      	movs	r2, #4
 8002894:	e7f9      	b.n	800288a <duty_cycle_decrement+0x62>
	case 4U: shifting_stage += 1U; break;
 8002896:	2205      	movs	r2, #5
 8002898:	e7f7      	b.n	800288a <duty_cycle_decrement+0x62>
	case 5U: shifting_stage += 1U; break;
 800289a:	2206      	movs	r2, #6
 800289c:	e7f5      	b.n	800288a <duty_cycle_decrement+0x62>
	case 6U: shifting_stage += 1U; break;
 800289e:	2207      	movs	r2, #7
 80028a0:	e7f3      	b.n	800288a <duty_cycle_decrement+0x62>
	case 7U: shifting_stage += 1U; break;
 80028a2:	2208      	movs	r2, #8
 80028a4:	e7f1      	b.n	800288a <duty_cycle_decrement+0x62>
	case 8U: shifting_stage += 1U; break;
 80028a6:	2209      	movs	r2, #9
 80028a8:	e7ef      	b.n	800288a <duty_cycle_decrement+0x62>
	case 9U: shifting_stage += 1U; break;
 80028aa:	220a      	movs	r2, #10
 80028ac:	e7ed      	b.n	800288a <duty_cycle_decrement+0x62>
	case 10U: shifting_stage = 0U;((TIM1)->DIER) &= ~(UIE); break;
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <duty_cycle_decrement+0xa8>)
 80028b4:	68d3      	ldr	r3, [r2, #12]
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	60d3      	str	r3, [r2, #12]
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20001508 	.word	0x20001508
 80028c4:	200014f8 	.word	0x200014f8
 80028c8:	200014fc 	.word	0x200014fc
 80028cc:	20001500 	.word	0x20001500
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	2000150c 	.word	0x2000150c
 80028d8:	200014f9 	.word	0x200014f9

080028dc <shift_action>:
{
 80028dc:	b510      	push	{r4, lr}
if(up_down == 1U)
 80028de:	4c0f      	ldr	r4, [pc, #60]	; (800291c <shift_action+0x40>)
 80028e0:	7820      	ldrb	r0, [r4, #0]
 80028e2:	2801      	cmp	r0, #1
 80028e4:	d105      	bne.n	80028f2 <shift_action+0x16>
if((shifting_stage % 2U) == 0U)
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <shift_action+0x44>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	07da      	lsls	r2, r3, #31
 80028ec:	d40e      	bmi.n	800290c <shift_action+0x30>
{duty_cycle_increment(1U);}
 80028ee:	f7ff ff3f 	bl	8002770 <duty_cycle_increment>
if(up_down ==2U)
 80028f2:	7823      	ldrb	r3, [r4, #0]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d110      	bne.n	800291a <shift_action+0x3e>
	if((shifting_stage % 2U) == 0U)
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <shift_action+0x44>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	07db      	lsls	r3, r3, #31
	{duty_cycle_decrement(1U);}
 80028fe:	f04f 0001 	mov.w	r0, #1
	if((shifting_stage % 2U) == 0U)
 8002902:	d406      	bmi.n	8002912 <shift_action+0x36>
}
 8002904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{duty_cycle_decrement(1U);}
 8002908:	f7ff bf8e 	b.w	8002828 <duty_cycle_decrement>
{duty_cycle_decrement(1U);}
 800290c:	f7ff ff8c 	bl	8002828 <duty_cycle_decrement>
 8002910:	e7ef      	b.n	80028f2 <shift_action+0x16>
}
 8002912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{duty_cycle_increment(1U);}
 8002916:	f7ff bf2b 	b.w	8002770 <duty_cycle_increment>
 800291a:	bd10      	pop	{r4, pc}
 800291c:	200014f9 	.word	0x200014f9
 8002920:	2000150c 	.word	0x2000150c

08002924 <set_duty_cycle>:
}


void set_duty_cycle(uint8_t dcn)
{
if(dcn == 0U)
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	2b62      	cmp	r3, #98	; 0x62
 8002928:	d80d      	bhi.n	8002946 <set_duty_cycle+0x22>
{return;}
if(dcn > 99U)
{return;}

	dc = dcn;
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <set_duty_cycle+0x24>)
 800292c:	7018      	strb	r0, [r3, #0]
	dc_val = percent*dc;
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <set_duty_cycle+0x28>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4358      	muls	r0, r3
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <set_duty_cycle+0x2c>)
 8002936:	6018      	str	r0, [r3, #0]
	((TIM1)->CCR1) = ((dc_val));
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <set_duty_cycle+0x30>)
 800293a:	6358      	str	r0, [r3, #52]	; 0x34
    ((TIM1)->CCR3) = (dc_val);
 800293c:	63d8      	str	r0, [r3, #60]	; 0x3c
    ((TIM1)->EGR) |= UG;
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	4770      	bx	lr
 8002948:	200014f8 	.word	0x200014f8
 800294c:	200014fc 	.word	0x200014fc
 8002950:	20001508 	.word	0x20001508
 8002954:	40012c00 	.word	0x40012c00

08002958 <uart1_transmit>:


void uart1_transmit(STRING* in)
{

	for(outi=0U; outi<((in)->length); outi++)
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <uart1_transmit+0x2c>)
 800295a:	2300      	movs	r3, #0
{
 800295c:	b530      	push	{r4, r5, lr}
	for(outi=0U; outi<((in)->length); outi++)
 800295e:	7013      	strb	r3, [r2, #0]
 8002960:	7805      	ldrb	r5, [r0, #0]
	{
	((USART1)->TDR) = (((in)->string)[outi]);
 8002962:	4c09      	ldr	r4, [pc, #36]	; (8002988 <uart1_transmit+0x30>)
	for(outi=0U; outi<((in)->length); outi++)
 8002964:	4619      	mov	r1, r3
 8002966:	429d      	cmp	r5, r3
 8002968:	d802      	bhi.n	8002970 <uart1_transmit+0x18>
 800296a:	b101      	cbz	r1, 800296e <uart1_transmit+0x16>
 800296c:	7013      	strb	r3, [r2, #0]
 800296e:	bd30      	pop	{r4, r5, pc}
	((USART1)->TDR) = (((in)->string)[outi]);
 8002970:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8002974:	8521      	strh	r1, [r4, #40]	; 0x28
	while((((USART1)->ISR) & TXE) == 0U)
 8002976:	69e1      	ldr	r1, [r4, #28]
 8002978:	0609      	lsls	r1, r1, #24
 800297a:	d5fc      	bpl.n	8002976 <uart1_transmit+0x1e>
 800297c:	3301      	adds	r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2101      	movs	r1, #1
 8002982:	e7f0      	b.n	8002966 <uart1_transmit+0xe>
 8002984:	2000151c 	.word	0x2000151c
 8002988:	40013800 	.word	0x40013800

0800298c <uart1_buffer_char>:



void uart1_buffer_char(void)
{
uint8_t char_in = ((USART1)->RDR);
 800298c:	4819      	ldr	r0, [pc, #100]	; (80029f4 <uart1_buffer_char+0x68>)
 800298e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8002990:	b2db      	uxtb	r3, r3

if((char_in > 31U) && (char_in < 127U))
 8002992:	f1a3 0220 	sub.w	r2, r3, #32
 8002996:	2a5e      	cmp	r2, #94	; 0x5e
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
if((char_in > 31U) && (char_in < 127U))
 800299a:	d80d      	bhi.n	80029b8 <uart1_buffer_char+0x2c>
{
((&current_input)->string)[((&current_input)->length)] = char_in;
 800299c:	4916      	ldr	r1, [pc, #88]	; (80029f8 <uart1_buffer_char+0x6c>)
 800299e:	780a      	ldrb	r2, [r1, #0]
 80029a0:	188c      	adds	r4, r1, r2
((&current_input)->length)++;
 80029a2:	3201      	adds	r2, #1
((&current_input)->string)[((&current_input)->length)] = char_in;
 80029a4:	7063      	strb	r3, [r4, #1]
 80029a6:	b29b      	uxth	r3, r3
((&current_input)->length)++;
 80029a8:	700a      	strb	r2, [r1, #0]
((USART1)->TDR) = char_in;
 80029aa:	8503      	strh	r3, [r0, #40]	; 0x28

uart_flags |= (CMD_EXECUTE);
}


((USART1)->ICR) |= (RXNE);
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <uart1_buffer_char+0x68>)
 80029ae:	6a13      	ldr	r3, [r2, #32]
 80029b0:	f043 0320 	orr.w	r3, r3, #32
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(char_in == 13U)
 80029b8:	2b0d      	cmp	r3, #13
 80029ba:	d1f7      	bne.n	80029ac <uart1_buffer_char+0x20>
for(ui=0U; ui<((&current_input)->length); ui++)
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <uart1_buffer_char+0x6c>)
 80029be:	490f      	ldr	r1, [pc, #60]	; (80029fc <uart1_buffer_char+0x70>)
 80029c0:	7815      	ldrb	r5, [r2, #0]
 80029c2:	4c0f      	ldr	r4, [pc, #60]	; (8002a00 <uart1_buffer_char+0x74>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	700b      	strb	r3, [r1, #0]
 80029c8:	461e      	mov	r6, r3
 80029ca:	b2df      	uxtb	r7, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	b2c0      	uxtb	r0, r0
 80029d2:	4285      	cmp	r5, r0
 80029d4:	d80a      	bhi.n	80029ec <uart1_buffer_char+0x60>
 80029d6:	b106      	cbz	r6, 80029da <uart1_buffer_char+0x4e>
 80029d8:	700f      	strb	r7, [r1, #0]
((&current_input)->length) = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	7013      	strb	r3, [r2, #0]
uart_flags |= (CMD_EXECUTE);
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <uart1_buffer_char+0x78>)
((&last_command)->length) = ((&current_input)->length);
 80029e0:	7025      	strb	r5, [r4, #0]
uart_flags |= (CMD_EXECUTE);
 80029e2:	7813      	ldrb	r3, [r2, #0]
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	7013      	strb	r3, [r2, #0]
 80029ea:	e7df      	b.n	80029ac <uart1_buffer_char+0x20>
{(((&last_command)->string)[ui]) = (((&current_input)->string)[ui]);}
 80029ec:	5cd0      	ldrb	r0, [r2, r3]
 80029ee:	54e0      	strb	r0, [r4, r3]
 80029f0:	2601      	movs	r6, #1
 80029f2:	e7ea      	b.n	80029ca <uart1_buffer_char+0x3e>
 80029f4:	40013800 	.word	0x40013800
 80029f8:	2000154c 	.word	0x2000154c
 80029fc:	2000156d 	.word	0x2000156d
 8002a00:	20001524 	.word	0x20001524
 8002a04:	20001514 	.word	0x20001514

08002a08 <cmd_execute>:
}


STRING* cmd_execute(void)
{
uart_flags &= (~(CMD_EXECUTE));
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <cmd_execute+0x10>)
return (&last_command);
}
 8002a0a:	4804      	ldr	r0, [pc, #16]	; (8002a1c <cmd_execute+0x14>)
uart_flags &= (~(CMD_EXECUTE));
 8002a0c:	7813      	ldrb	r3, [r2, #0]
 8002a0e:	f023 0304 	bic.w	r3, r3, #4
 8002a12:	7013      	strb	r3, [r2, #0]
}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20001514 	.word	0x20001514
 8002a1c:	20001524 	.word	0x20001524

08002a20 <uart1_get_flags>:


uint8_t uart1_get_flags(void)
{return uart_flags;}
 8002a20:	4b01      	ldr	r3, [pc, #4]	; (8002a28 <uart1_get_flags+0x8>)
 8002a22:	7818      	ldrb	r0, [r3, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20001514 	.word	0x20001514

08002a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a32:	e003      	b.n	8002a3c <LoopCopyDataInit>

08002a34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a3a:	3104      	adds	r1, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a44:	d3f6      	bcc.n	8002a34 <CopyDataInit>
	ldr	r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a48:	e002      	b.n	8002a50 <LoopFillZerobss>

08002a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a4c:	f842 3b04 	str.w	r3, [r2], #4

08002a50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <LoopForever+0x16>)
	cmp	r2, r3
 8002a52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a54:	d3f9      	bcc.n	8002a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a56:	f7ff fd33 	bl	80024c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f000 f811 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5e:	f7fe fa0d 	bl	8000e7c <main>

08002a62 <LoopForever>:

LoopForever:
    b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a64:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002a68:	08002b28 	.word	0x08002b28
	ldr	r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a70:	20000410 	.word	0x20000410
	ldr	r2, =_sbss
 8002a74:	20000410 	.word	0x20000410
	ldr	r3, = _ebss
 8002a78:	20001570 	.word	0x20001570

08002a7c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <CAN1_RX0_IRQHandler>
	...

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4e0d      	ldr	r6, [pc, #52]	; (8002ab8 <__libc_init_array+0x38>)
 8002a84:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a86:	1ba4      	subs	r4, r4, r6
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	42a5      	cmp	r5, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	4e0b      	ldr	r6, [pc, #44]	; (8002ac0 <__libc_init_array+0x40>)
 8002a92:	4c0c      	ldr	r4, [pc, #48]	; (8002ac4 <__libc_init_array+0x44>)
 8002a94:	f000 f818 	bl	8002ac8 <_init>
 8002a98:	1ba4      	subs	r4, r4, r6
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	42a5      	cmp	r5, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa8:	4798      	blx	r3
 8002aaa:	3501      	adds	r5, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ab2:	4798      	blx	r3
 8002ab4:	3501      	adds	r5, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08002b20 	.word	0x08002b20
 8002abc:	08002b20 	.word	0x08002b20
 8002ac0:	08002b20 	.word	0x08002b20
 8002ac4:	08002b24 	.word	0x08002b24

08002ac8 <_init>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_fini>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr
