/*
 * system.h
 *
 *  Created on: Jan 26, 2019
 *      Author: neufe
 */

#include <uart1.h>
#include <tim1.h>
#include <adc1.h>
#include <lptim1.h>
#include <dac.h>


#ifndef SYSTEM_H_
#define SYSTEM_H_

#define RCC_GPIOA_ENABLE 1U
#define RCC_GPIOB_ENABLE 2U
#define RCC_GPIOC_ENABLE 4U
#define RCC_GPIOH_ENABLE 128U


#define GPIO_0_SHIFT 0U
#define GPIO_1_SHIFT 1U
#define GPIO_2_SHIFT 2U
#define GPIO_3_SHIFT 3U
#define GPIO_4_SHIFT 4U
#define GPIO_5_SHIFT 5U
#define GPIO_6_SHIFT 6U
#define GPIO_7_SHIFT 7U
#define GPIO_8_SHIFT 8U
#define GPIO_9_SHIFT 9U
#define GPIO_10_SHIFT 10U
#define GPIO_11_SHIFT 11U
#define GPIO_12_SHIFT 12U
#define GPIO_13_SHIFT 13U
#define GPIO_14_SHIFT 14U
#define GPIO_15_SHIFT 15U

#define GPIO_0_DSHIFT 0U
#define GPIO_1_DSHIFT 2U
#define GPIO_2_DSHIFT 4U
#define GPIO_3_DSHIFT 6U
#define GPIO_4_DSHIFT 8U
#define GPIO_5_DSHIFT 10U
#define GPIO_6_DSHIFT 12U
#define GPIO_7_DSHIFT 14U
#define GPIO_8_DSHIFT 16U
#define GPIO_9_DSHIFT 18U
#define GPIO_10_DSHIFT 20U
#define GPIO_11_DSHIFT 22U
#define GPIO_12_DSHIFT 24U
#define GPIO_13_DSHIFT 26U
#define GPIO_14_DSHIFT 28U
#define GPIO_15_DSHIFT 30U

#define GPIO_0_QSHIFT 0U
#define GPIO_1_QSHIFT 4U
#define GPIO_2_QSHIFT 8U
#define GPIO_3_QSHIFT 12U
#define GPIO_4_QSHIFT 16U
#define GPIO_5_QSHIFT 20U
#define GPIO_6_QSHIFT 24U
#define GPIO_7_QSHIFT 28U
#define GPIO_8_QSHIFT 0U
#define GPIO_9_QSHIFT 4U
#define GPIO_10_QSHIFT 8U
#define GPIO_11_QSHIFT 12U
#define GPIO_12_QSHIFT 16U
#define GPIO_13_QSHIFT 20U
#define GPIO_14_QSHIFT 24U
#define GPIO_15_QSHIFT 28U

#define AN_MODE  3U
#define AF_MODE  2U
#define OUT_MODE 1U
#define IN_MODE  3U

#define AF0 15U
#define AF1 1U
#define AF2 2U
#define AF3 3U
#define AF4 4U
#define AF5 5U
#define AF6 6U
#define AF7 7U
#define AF8 8U
#define AF9 9U
#define AF10 10U
#define AF11 11U
#define AF12 12U
#define AF13 13U
#define AF14 14U
#define AF15 15U

#define ONES 0xFFFFFFFF


#define DEFAULT_OVP      200U
#define DEFAULT_I_TARGET 300U
#define DEFAULT_UVP      720U

#define DEFAULT_MAX_CURRENT 2400U
#define DEFAULT_MAX_VOLTAGE 3225U

#define EXP_CURRENT 300U
#define EXP_VOLTAGE 180U

#define SHORT_WIRE_RUN 400U
#define OPEN_WIRE_RUN  2485

#define SHORT_WIRE 200U
#define OPEN_WIRE  1245U

#define HOT_TEMP      720U
#define COLD_TEMP     2470U
#define FOLDBACK_TEMP 980U
//980 ^^

#define INPUT_BAD   800U
#define INPUT_DEAD  650U

#define CURRENT_HYS       20U
#define VOLTAGE_HYS       10U
#define PMIC_DELAY        50U
#define THERMAL_HYS		  30U
#define THERMAL_DELAY     750U
#define THERMAL_MAX_DELTA 50U

#define TS_CAL1_PTR 0x1FFF75A8
#define TS_CAL2_PTR 0x1FFF75CA

#define RELAY_PIN   ((1U)<<(7U))
#define RELAY_DELAY  500U
#define STUP_DELAY   50U
#define WIRE_ERR_DELAY 200000U

#define off 0U
#define on 1U

#define ADC_INIT_FLAG       1U
#define AVG_BANKS_FLAG      2U
#define ADC_CONV_FLAG       4U
#define AVG_TEMP_FLAG       8U
#define TEMP_INIT_FLAG      16U
#define PMIC_INIT_FLAG      32U
#define PMIC_ENABLE_FLAG    64U
#define PMIC_ACTION_FLAG    128U
#define THERMAL_CON_FLAG    256U
#define THERMAL_ACTION_FLAG 512U
#define THERM_WIRE_ERR_FLAG 1024U
#define START_UP_FLAG       2048U
#define POWER_WIRE_ERR_FLAG 4096U


#define FIRST_LAP_FLAG    1U
#define NO_SHORT_FLAG     2U
#define NO_OPEN_FLAG      4U
#define RELAY_ENABLE_FLAG 8U
#define RELAY_ENGAGE_FLAG 16U
#define PMIC_STUP_FLAG    32U
#define INPUT_ERR_FLAG    64U
#define CURRENT_MOD_FLAG  128U
#define POWER_SHORT_FLAG  256U
#define POWER_OPEN_FLAG   512U



#define UP_BUTTON   ((1U)<<(6U))
#define DOWN_BUTTON ((1U)<<(7U))

#define BUTTON_PRESSED 0x3FFFFFFF
#define BUTTON_RELEASED 0xC0000000
#define BUTTON_HELD 0xFFFFFFFF

typedef struct{
	uint32_t bin;
	uint8_t ascii[10];
}NUMBER;

typedef struct{
	uint32_t samples[25U];
	uint32_t avg;
	uint32_t new_samp;
}SAMP_BANK;

#define SAMP_BANK_LENGTH 25U


void system_management(void);
void system_io_config(void);
void system_ptr_config(void);
void system_ins_search(STRING* cmd);
uint32_t start_up_check(void);
void raise_avg_flag(void);
void raise_temp_flag(void);
void add_sample(uint32_t num, uint8_t inj);
void avg_samp_bank(SAMP_BANK* in);

void num_to_string(NUMBER* num);
void convert_to_ascii(uint32_t num);
uint8_t string_compare(STRING* in1, STRING* in2);

void relay_control(uint8_t on_off);

void adc_management(void);
void pmic_management(void);
void thermal_management(void);
void start_up_procedure(void);

void button_managment(void);




void tim1report(void);
void voltreport(void);
void timereport(void);
void bankreport(void);
void tbankreport(void);
void flagreport(void);
void flagclear(void);
void convreport(void);
void tempreport(void);
void dacreport(void);
void stupreport(void);
void adcreport(void);

uint8_t dc_search(STRING* cmd);
uint8_t current_decode(STRING* cmd);
uint8_t voltage_decode(STRING* cmd);
uint8_t exp_voltage_decode(STRING* cmd);


void driveB(uint8_t pin, uint8_t on_off);
void driveA(uint8_t pin, uint8_t on_off);

void sendcp(uint8_t cp);

#endif /* SYSTEM_H_ */
