
BuckOS_0.000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000434  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b4  20000434  08002d1c  00020434  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200007e8  08002d1c  000207e8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  9 .debug_info   000110fa  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000238d  00000000  00000000  0003155e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001da0  00000000  00000000  000338eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a8  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000708  00000000  00000000  00035d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000038a1  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025d2  00000000  00000000  00039ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c2b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ed4  00000000  00000000  0003c330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000434 	.word	0x20000434
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002888 	.word	0x08002888

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000438 	.word	0x20000438
 80001c8:	08002888 	.word	0x08002888

080001cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_InitTick+0x24>)
{
 80001d0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001dc:	f000 f86a 	bl	80002b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4621      	mov	r1, r4
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f000 f830 	bl	800024c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001ec:	2000      	movs	r0, #0
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000430 	.word	0x20000430

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 f816 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f7ff ffe5 	bl	80001cc <HAL_InitTick>
  HAL_MspInit();
 8000202:	f000 fe83 	bl	8000f0c <HAL_MspInit>
}
 8000206:	2000      	movs	r0, #0
 8000208:	bd08      	pop	{r3, pc}
	...

0800020c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800020c:	4a02      	ldr	r2, [pc, #8]	; (8000218 <HAL_IncTick+0xc>)
 800020e:	6813      	ldr	r3, [r2, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000450 	.word	0x20000450

0800021c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000450 	.word	0x20000450

08000228 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800022a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000230:	041b      	lsls	r3, r3, #16
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000238:	0200      	lsls	r0, r0, #8
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000242:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000244:	60d3      	str	r3, [r2, #12]
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800024e:	b530      	push	{r4, r5, lr}
 8000250:	68dc      	ldr	r4, [r3, #12]
 8000252:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000256:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025c:	2b04      	cmp	r3, #4
 800025e:	bf28      	it	cs
 8000260:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000264:	f04f 0501 	mov.w	r5, #1
 8000268:	fa05 f303 	lsl.w	r3, r5, r3
 800026c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf8c      	ite	hi
 8000272:	3c03      	subhi	r4, #3
 8000274:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000276:	4019      	ands	r1, r3
 8000278:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800027a:	fa05 f404 	lsl.w	r4, r5, r4
 800027e:	3c01      	subs	r4, #1
 8000280:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000282:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000284:	ea42 0201 	orr.w	r2, r2, r1
 8000288:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	bfaf      	iteee	ge
 800028e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	4b06      	ldrlt	r3, [pc, #24]	; (80002b0 <HAL_NVIC_SetPriority+0x64>)
 8000298:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	bfa5      	ittet	ge
 800029c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002a8:	bd30      	pop	{r4, r5, pc}
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000ed14 	.word	0xe000ed14

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	4a07      	ldr	r2, [pc, #28]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	21f0      	movs	r1, #240	; 0xf0
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <HAL_PWREx_GetVoltageRange+0xc>)
 8000306:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000308:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40007000 	.word	0x40007000

08000314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000316:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000318:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800031c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000320:	d11a      	bne.n	8000358 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000322:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000326:	d013      	beq.n	8000350 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000328:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800032a:	4912      	ldr	r1, [pc, #72]	; (8000374 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800032c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000334:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000338:	6812      	ldr	r2, [r2, #0]
 800033a:	fbb2 f1f1 	udiv	r1, r2, r1
 800033e:	2232      	movs	r2, #50	; 0x32
 8000340:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000342:	b112      	cbz	r2, 800034a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000344:	6959      	ldr	r1, [r3, #20]
 8000346:	0549      	lsls	r1, r1, #21
 8000348:	d404      	bmi.n	8000354 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	055b      	lsls	r3, r3, #21
 800034e:	d40d      	bmi.n	800036c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
        wait_loop_index--;
 8000354:	3a01      	subs	r2, #1
 8000356:	e7f4      	b.n	8000342 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000358:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800035c:	bf1f      	itttt	ne
 800035e:	681a      	ldrne	r2, [r3, #0]
 8000360:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000364:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000368:	601a      	strne	r2, [r3, #0]
 800036a:	e7f1      	b.n	8000350 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800036c:	2003      	movs	r0, #3
}  
 800036e:	4770      	bx	lr
 8000370:	40007000 	.word	0x40007000
 8000374:	000f4240 	.word	0x000f4240
 8000378:	20000430 	.word	0x20000430

0800037c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800037c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800037e:	4d1e      	ldr	r5, [pc, #120]	; (80003f8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000380:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000382:	00da      	lsls	r2, r3, #3
{
 8000384:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000386:	d518      	bpl.n	80003ba <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000388:	f7ff ffbc 	bl	8000304 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800038c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000390:	d123      	bne.n	80003da <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000392:	2c80      	cmp	r4, #128	; 0x80
 8000394:	d929      	bls.n	80003ea <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000396:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000398:	bf8c      	ite	hi
 800039a:	2002      	movhi	r0, #2
 800039c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80003a0:	6813      	ldr	r3, [r2, #0]
 80003a2:	f023 0307 	bic.w	r3, r3, #7
 80003a6:	4303      	orrs	r3, r0
 80003a8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80003b0:	1a18      	subs	r0, r3, r0
 80003b2:	bf18      	it	ne
 80003b4:	2001      	movne	r0, #1
 80003b6:	b003      	add	sp, #12
 80003b8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	65ab      	str	r3, [r5, #88]	; 0x58
 80003c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80003cc:	f7ff ff9a 	bl	8000304 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80003d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80003d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80003d8:	e7d8      	b.n	800038c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80003da:	2c80      	cmp	r4, #128	; 0x80
 80003dc:	d807      	bhi.n	80003ee <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80003de:	d008      	beq.n	80003f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80003e0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80003e4:	4258      	negs	r0, r3
 80003e6:	4158      	adcs	r0, r3
 80003e8:	e7d9      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80003ea:	2000      	movs	r0, #0
 80003ec:	e7d7      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80003ee:	2003      	movs	r0, #3
 80003f0:	e7d5      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80003f2:	2002      	movs	r0, #2
 80003f4:	e7d3      	b.n	800039e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40022000 	.word	0x40022000

08000400 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000400:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	f012 0f0c 	tst.w	r2, #12
{
 8000408:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800040a:	d009      	beq.n	8000420 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000412:	2a0c      	cmp	r2, #12
 8000414:	d12d      	bne.n	8000472 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	f002 0203 	and.w	r2, r2, #3
 800041c:	2a01      	cmp	r2, #1
 800041e:	d128      	bne.n	8000472 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000420:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000422:	4928      	ldr	r1, [pc, #160]	; (80004c4 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000424:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000426:	bf55      	itete	pl
 8000428:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800042c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800042e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000432:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000436:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800043a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 800043c:	f011 0f0c 	tst.w	r1, #12
 8000440:	bf0c      	ite	eq
 8000442:	4610      	moveq	r0, r2
 8000444:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000446:	6899      	ldr	r1, [r3, #8]
 8000448:	f001 010c 	and.w	r1, r1, #12
 800044c:	290c      	cmp	r1, #12
 800044e:	d130      	bne.n	80004b2 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000450:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000452:	68d8      	ldr	r0, [r3, #12]
 8000454:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000458:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800045a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800045e:	2802      	cmp	r0, #2
 8000460:	d019      	beq.n	8000496 <HAL_RCC_GetSysClockFreq+0x96>
 8000462:	2803      	cmp	r0, #3
 8000464:	d026      	beq.n	80004b4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000466:	fbb2 f2f1 	udiv	r2, r2, r1
 800046a:	68d8      	ldr	r0, [r3, #12]
 800046c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000470:	e017      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	f002 020c 	and.w	r2, r2, #12
 8000478:	2a04      	cmp	r2, #4
 800047a:	d007      	beq.n	800048c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	f002 020c 	and.w	r2, r2, #12
 8000482:	2a08      	cmp	r2, #8
 8000484:	d104      	bne.n	8000490 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000486:	4810      	ldr	r0, [pc, #64]	; (80004c8 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000488:	2200      	movs	r2, #0
 800048a:	e7dc      	b.n	8000446 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800048c:	480f      	ldr	r0, [pc, #60]	; (80004cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800048e:	e7fb      	b.n	8000488 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000490:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000492:	4602      	mov	r2, r0
 8000494:	e7d7      	b.n	8000446 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800049a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800049e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80004a8:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80004aa:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80004ac:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80004ae:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80004b2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80004b4:	68da      	ldr	r2, [r3, #12]
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80004b8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80004bc:	e7ef      	b.n	800049e <HAL_RCC_GetSysClockFreq+0x9e>
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	080028b0 	.word	0x080028b0
 80004c8:	007a1200 	.word	0x007a1200
 80004cc:	00f42400 	.word	0x00f42400

080004d0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004d0:	6803      	ldr	r3, [r0, #0]
{
 80004d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80004d6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004d8:	06d8      	lsls	r0, r3, #27
 80004da:	d539      	bpl.n	8000550 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004dc:	4cab      	ldr	r4, [pc, #684]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 80004de:	68a3      	ldr	r3, [r4, #8]
 80004e0:	f013 0f0c 	tst.w	r3, #12
 80004e4:	d162      	bne.n	80005ac <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	0799      	lsls	r1, r3, #30
 80004ea:	d503      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x24>
 80004ec:	69ab      	ldr	r3, [r5, #24]
 80004ee:	b90b      	cbnz	r3, 80004f4 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e07f      	b.n	80005f4 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	6a28      	ldr	r0, [r5, #32]
 80004f8:	071a      	lsls	r2, r3, #28
 80004fa:	bf56      	itet	pl
 80004fc:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000500:	6823      	ldrmi	r3, [r4, #0]
 8000502:	091b      	lsrpl	r3, r3, #4
 8000504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000508:	4283      	cmp	r3, r0
 800050a:	d23a      	bcs.n	8000582 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800050c:	f7ff ff36 	bl	800037c <RCC_SetFlashLatencyFromMSIRange>
 8000510:	2800      	cmp	r0, #0
 8000512:	d1ed      	bne.n	80004f0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6023      	str	r3, [r4, #0]
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	6a2a      	ldr	r2, [r5, #32]
 8000520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000524:	4313      	orrs	r3, r2
 8000526:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	69ea      	ldr	r2, [r5, #28]
 800052c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000534:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000536:	f7ff ff63 	bl	8000400 <HAL_RCC_GetSysClockFreq>
 800053a:	68a3      	ldr	r3, [r4, #8]
 800053c:	4a94      	ldr	r2, [pc, #592]	; (8000790 <HAL_RCC_OscConfig+0x2c0>)
 800053e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000542:	5cd3      	ldrb	r3, [r2, r3]
 8000544:	40d8      	lsrs	r0, r3
 8000546:	4b93      	ldr	r3, [pc, #588]	; (8000794 <HAL_RCC_OscConfig+0x2c4>)
 8000548:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff fe3e 	bl	80001cc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	07d8      	lsls	r0, r3, #31
 8000554:	d461      	bmi.n	800061a <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000556:	682b      	ldr	r3, [r5, #0]
 8000558:	0799      	lsls	r1, r3, #30
 800055a:	f100 80a9 	bmi.w	80006b0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800055e:	682b      	ldr	r3, [r5, #0]
 8000560:	071a      	lsls	r2, r3, #28
 8000562:	f100 80e7 	bmi.w	8000734 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000566:	682b      	ldr	r3, [r5, #0]
 8000568:	075b      	lsls	r3, r3, #29
 800056a:	f100 8115 	bmi.w	8000798 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	069a      	lsls	r2, r3, #26
 8000572:	f100 817c 	bmi.w	800086e <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000576:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000578:	2a00      	cmp	r2, #0
 800057a:	f040 81a3 	bne.w	80008c4 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 800057e:	2000      	movs	r0, #0
 8000580:	e038      	b.n	80005f4 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6023      	str	r3, [r4, #0]
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000590:	4303      	orrs	r3, r0
 8000592:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	69ea      	ldr	r2, [r5, #28]
 8000598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800059c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005a0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005a2:	f7ff feeb 	bl	800037c <RCC_SetFlashLatencyFromMSIRange>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d0c5      	beq.n	8000536 <HAL_RCC_OscConfig+0x66>
 80005aa:	e7a1      	b.n	80004f0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80005ac:	69ab      	ldr	r3, [r5, #24]
 80005ae:	b323      	cbz	r3, 80005fa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005b8:	f7ff fe30 	bl	800021c <HAL_GetTick>
 80005bc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	079b      	lsls	r3, r3, #30
 80005c2:	d511      	bpl.n	80005e8 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6023      	str	r3, [r4, #0]
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	6a2a      	ldr	r2, [r5, #32]
 80005d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005d4:	4313      	orrs	r3, r2
 80005d6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	69ea      	ldr	r2, [r5, #28]
 80005dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005e4:	6063      	str	r3, [r4, #4]
 80005e6:	e7b3      	b.n	8000550 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80005e8:	f7ff fe18 	bl	800021c <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9e5      	bls.n	80005be <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 80005f2:	2003      	movs	r0, #3
}
 80005f4:	b002      	add	sp, #8
 80005f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	f023 0301 	bic.w	r3, r3, #1
 8000600:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000602:	f7ff fe0b 	bl	800021c <HAL_GetTick>
 8000606:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	079f      	lsls	r7, r3, #30
 800060c:	d5a0      	bpl.n	8000550 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800060e:	f7ff fe05 	bl	800021c <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2802      	cmp	r0, #2
 8000616:	d9f7      	bls.n	8000608 <HAL_RCC_OscConfig+0x138>
 8000618:	e7eb      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800061a:	4c5c      	ldr	r4, [pc, #368]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 800061c:	68a3      	ldr	r3, [r4, #8]
 800061e:	f003 030c 	and.w	r3, r3, #12
 8000622:	2b08      	cmp	r3, #8
 8000624:	d009      	beq.n	800063a <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000626:	68a3      	ldr	r3, [r4, #8]
 8000628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800062c:	2b0c      	cmp	r3, #12
 800062e:	d10b      	bne.n	8000648 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000630:	68e3      	ldr	r3, [r4, #12]
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	2b03      	cmp	r3, #3
 8000638:	d106      	bne.n	8000648 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	039a      	lsls	r2, r3, #14
 800063e:	d58a      	bpl.n	8000556 <HAL_RCC_OscConfig+0x86>
 8000640:	686b      	ldr	r3, [r5, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d187      	bne.n	8000556 <HAL_RCC_OscConfig+0x86>
 8000646:	e753      	b.n	80004f0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000648:	686b      	ldr	r3, [r5, #4]
 800064a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064e:	d110      	bne.n	8000672 <HAL_RCC_OscConfig+0x1a2>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000656:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000658:	f7ff fde0 	bl	800021c <HAL_GetTick>
 800065c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	039b      	lsls	r3, r3, #14
 8000662:	f53f af78 	bmi.w	8000556 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000666:	f7ff fdd9 	bl	800021c <HAL_GetTick>
 800066a:	1b80      	subs	r0, r0, r6
 800066c:	2864      	cmp	r0, #100	; 0x64
 800066e:	d9f6      	bls.n	800065e <HAL_RCC_OscConfig+0x18e>
 8000670:	e7bf      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000676:	d104      	bne.n	8000682 <HAL_RCC_OscConfig+0x1b2>
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067e:	6023      	str	r3, [r4, #0]
 8000680:	e7e6      	b.n	8000650 <HAL_RCC_OscConfig+0x180>
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000688:	6022      	str	r2, [r4, #0]
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000690:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1e0      	bne.n	8000658 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8000696:	f7ff fdc1 	bl	800021c <HAL_GetTick>
 800069a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	039f      	lsls	r7, r3, #14
 80006a0:	f57f af59 	bpl.w	8000556 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006a4:	f7ff fdba 	bl	800021c <HAL_GetTick>
 80006a8:	1b80      	subs	r0, r0, r6
 80006aa:	2864      	cmp	r0, #100	; 0x64
 80006ac:	d9f6      	bls.n	800069c <HAL_RCC_OscConfig+0x1cc>
 80006ae:	e7a0      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80006b0:	4c36      	ldr	r4, [pc, #216]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 80006b2:	68a3      	ldr	r3, [r4, #8]
 80006b4:	f003 030c 	and.w	r3, r3, #12
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d009      	beq.n	80006d0 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006bc:	68a3      	ldr	r3, [r4, #8]
 80006be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80006c2:	2b0c      	cmp	r3, #12
 80006c4:	d113      	bne.n	80006ee <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c6:	68e3      	ldr	r3, [r4, #12]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d10e      	bne.n	80006ee <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	055e      	lsls	r6, r3, #21
 80006d4:	d503      	bpl.n	80006de <HAL_RCC_OscConfig+0x20e>
 80006d6:	68eb      	ldr	r3, [r5, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f43f af09 	beq.w	80004f0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006de:	6863      	ldr	r3, [r4, #4]
 80006e0:	692a      	ldr	r2, [r5, #16]
 80006e2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80006e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80006ea:	6063      	str	r3, [r4, #4]
 80006ec:	e737      	b.n	800055e <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ee:	68eb      	ldr	r3, [r5, #12]
 80006f0:	b17b      	cbz	r3, 8000712 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006fa:	f7ff fd8f 	bl	800021c <HAL_GetTick>
 80006fe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	0558      	lsls	r0, r3, #21
 8000704:	d4eb      	bmi.n	80006de <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000706:	f7ff fd89 	bl	800021c <HAL_GetTick>
 800070a:	1b80      	subs	r0, r0, r6
 800070c:	2802      	cmp	r0, #2
 800070e:	d9f7      	bls.n	8000700 <HAL_RCC_OscConfig+0x230>
 8000710:	e76f      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000718:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800071a:	f7ff fd7f 	bl	800021c <HAL_GetTick>
 800071e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	0559      	lsls	r1, r3, #21
 8000724:	f57f af1b 	bpl.w	800055e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000728:	f7ff fd78 	bl	800021c <HAL_GetTick>
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	2802      	cmp	r0, #2
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x250>
 8000732:	e75e      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000734:	696b      	ldr	r3, [r5, #20]
 8000736:	4c15      	ldr	r4, [pc, #84]	; (800078c <HAL_RCC_OscConfig+0x2bc>)
 8000738:	b19b      	cbz	r3, 8000762 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 800073a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000746:	f7ff fd69 	bl	800021c <HAL_GetTick>
 800074a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800074c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000750:	079f      	lsls	r7, r3, #30
 8000752:	f53f af08 	bmi.w	8000566 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000756:	f7ff fd61 	bl	800021c <HAL_GetTick>
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	2802      	cmp	r0, #2
 800075e:	d9f5      	bls.n	800074c <HAL_RCC_OscConfig+0x27c>
 8000760:	e747      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000762:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800076e:	f7ff fd55 	bl	800021c <HAL_GetTick>
 8000772:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000774:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000778:	0798      	lsls	r0, r3, #30
 800077a:	f57f aef4 	bpl.w	8000566 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800077e:	f7ff fd4d 	bl	800021c <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	2802      	cmp	r0, #2
 8000786:	d9f5      	bls.n	8000774 <HAL_RCC_OscConfig+0x2a4>
 8000788:	e733      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	080028a0 	.word	0x080028a0
 8000794:	20000430 	.word	0x20000430
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000798:	4c79      	ldr	r4, [pc, #484]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 800079a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800079c:	00d9      	lsls	r1, r3, #3
 800079e:	d427      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80007a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007b2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80007b4:	4e73      	ldr	r6, [pc, #460]	; (8000984 <HAL_RCC_OscConfig+0x4b4>)
 80007b6:	6833      	ldr	r3, [r6, #0]
 80007b8:	05da      	lsls	r2, r3, #23
 80007ba:	d51b      	bpl.n	80007f4 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007bc:	68ab      	ldr	r3, [r5, #8]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d129      	bne.n	8000816 <HAL_RCC_OscConfig+0x346>
 80007c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80007ce:	f7ff fd25 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80007d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80007dc:	0798      	lsls	r0, r3, #30
 80007de:	d540      	bpl.n	8000862 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	f43f aec4 	beq.w	800056e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80007ee:	e6be      	b.n	800056e <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 80007f0:	2700      	movs	r7, #0
 80007f2:	e7df      	b.n	80007b4 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007f4:	6833      	ldr	r3, [r6, #0]
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007fc:	f7ff fd0e 	bl	800021c <HAL_GetTick>
 8000800:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000802:	6833      	ldr	r3, [r6, #0]
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	d4d9      	bmi.n	80007bc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000808:	f7ff fd08 	bl	800021c <HAL_GetTick>
 800080c:	eba0 0008 	sub.w	r0, r0, r8
 8000810:	2802      	cmp	r0, #2
 8000812:	d9f6      	bls.n	8000802 <HAL_RCC_OscConfig+0x332>
 8000814:	e6ed      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000816:	2b05      	cmp	r3, #5
 8000818:	d106      	bne.n	8000828 <HAL_RCC_OscConfig+0x358>
 800081a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000826:	e7cc      	b.n	80007c2 <HAL_RCC_OscConfig+0x2f2>
 8000828:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800082c:	f022 0201 	bic.w	r2, r2, #1
 8000830:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000834:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000838:	f022 0204 	bic.w	r2, r2, #4
 800083c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1c4      	bne.n	80007ce <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8000844:	f7ff fcea 	bl	800021c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000848:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800084c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800084e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000852:	0799      	lsls	r1, r3, #30
 8000854:	d5c4      	bpl.n	80007e0 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000856:	f7ff fce1 	bl	800021c <HAL_GetTick>
 800085a:	1b80      	subs	r0, r0, r6
 800085c:	4540      	cmp	r0, r8
 800085e:	d9f6      	bls.n	800084e <HAL_RCC_OscConfig+0x37e>
 8000860:	e6c7      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000862:	f7ff fcdb 	bl	800021c <HAL_GetTick>
 8000866:	1b80      	subs	r0, r0, r6
 8000868:	4540      	cmp	r0, r8
 800086a:	d9b5      	bls.n	80007d8 <HAL_RCC_OscConfig+0x308>
 800086c:	e6c1      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800086e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000870:	4c43      	ldr	r4, [pc, #268]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 8000872:	b19b      	cbz	r3, 800089c <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8000874:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000880:	f7ff fccc 	bl	800021c <HAL_GetTick>
 8000884:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000886:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800088a:	079b      	lsls	r3, r3, #30
 800088c:	f53f ae73 	bmi.w	8000576 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000890:	f7ff fcc4 	bl	800021c <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	2802      	cmp	r0, #2
 8000898:	d9f5      	bls.n	8000886 <HAL_RCC_OscConfig+0x3b6>
 800089a:	e6aa      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800089c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80008a8:	f7ff fcb8 	bl	800021c <HAL_GetTick>
 80008ac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80008ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80008b2:	079f      	lsls	r7, r3, #30
 80008b4:	f57f ae5f 	bpl.w	8000576 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008b8:	f7ff fcb0 	bl	800021c <HAL_GetTick>
 80008bc:	1b80      	subs	r0, r0, r6
 80008be:	2802      	cmp	r0, #2
 80008c0:	d9f5      	bls.n	80008ae <HAL_RCC_OscConfig+0x3de>
 80008c2:	e696      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80008c4:	4c2e      	ldr	r4, [pc, #184]	; (8000980 <HAL_RCC_OscConfig+0x4b0>)
 80008c6:	68a3      	ldr	r3, [r4, #8]
 80008c8:	f003 030c 	and.w	r3, r3, #12
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	f43f ae0f 	beq.w	80004f0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 80008d2:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80008d4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80008d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008da:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80008dc:	d136      	bne.n	800094c <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 80008de:	f7ff fc9d 	bl	800021c <HAL_GetTick>
 80008e2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	0198      	lsls	r0, r3, #6
 80008e8:	d42a      	bmi.n	8000940 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80008ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80008ee:	06db      	lsls	r3, r3, #27
 80008f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80008f6:	4313      	orrs	r3, r2
 80008f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008fa:	3a01      	subs	r2, #1
 80008fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000900:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000902:	0852      	lsrs	r2, r2, #1
 8000904:	3a01      	subs	r2, #1
 8000906:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800090a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800090c:	0852      	lsrs	r2, r2, #1
 800090e:	3a01      	subs	r2, #1
 8000910:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000914:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800091e:	68e3      	ldr	r3, [r4, #12]
 8000920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000924:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000926:	f7ff fc79 	bl	800021c <HAL_GetTick>
 800092a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	0199      	lsls	r1, r3, #6
 8000930:	f53f ae25 	bmi.w	800057e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000934:	f7ff fc72 	bl	800021c <HAL_GetTick>
 8000938:	1b40      	subs	r0, r0, r5
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x45c>
 800093e:	e658      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000940:	f7ff fc6c 	bl	800021c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	2802      	cmp	r0, #2
 8000948:	d9cc      	bls.n	80008e4 <HAL_RCC_OscConfig+0x414>
 800094a:	e652      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000950:	bf5e      	ittt	pl
 8000952:	68e3      	ldrpl	r3, [r4, #12]
 8000954:	f023 0303 	bicpl.w	r3, r3, #3
 8000958:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800095a:	68e3      	ldr	r3, [r4, #12]
 800095c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000964:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000966:	f7ff fc59 	bl	800021c <HAL_GetTick>
 800096a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	019b      	lsls	r3, r3, #6
 8000970:	f57f ae05 	bpl.w	800057e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000974:	f7ff fc52 	bl	800021c <HAL_GetTick>
 8000978:	1b40      	subs	r0, r0, r5
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x49c>
 800097e:	e638      	b.n	80005f2 <HAL_RCC_OscConfig+0x122>
 8000980:	40021000 	.word	0x40021000
 8000984:	40007000 	.word	0x40007000

08000988 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000988:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <HAL_RCC_ClockConfig+0x15c>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	428b      	cmp	r3, r1
{
 8000992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000996:	4605      	mov	r5, r0
 8000998:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800099a:	d32b      	bcc.n	80009f4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	07d9      	lsls	r1, r3, #31
 80009a0:	d435      	bmi.n	8000a0e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009a2:	6829      	ldr	r1, [r5, #0]
 80009a4:	078a      	lsls	r2, r1, #30
 80009a6:	f100 8083 	bmi.w	8000ab0 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80009aa:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <HAL_RCC_ClockConfig+0x15c>)
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	429e      	cmp	r6, r3
 80009b4:	f0c0 8084 	bcc.w	8000ac0 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009b8:	f011 0f04 	tst.w	r1, #4
 80009bc:	4c4a      	ldr	r4, [pc, #296]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 80009be:	f040 808a 	bne.w	8000ad6 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009c2:	070b      	lsls	r3, r1, #28
 80009c4:	d506      	bpl.n	80009d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009c6:	68a3      	ldr	r3, [r4, #8]
 80009c8:	692a      	ldr	r2, [r5, #16]
 80009ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009d2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009d4:	f7ff fd14 	bl	8000400 <HAL_RCC_GetSysClockFreq>
 80009d8:	68a3      	ldr	r3, [r4, #8]
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <HAL_RCC_ClockConfig+0x164>)
 80009dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	40d8      	lsrs	r0, r3
 80009e4:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <HAL_RCC_ClockConfig+0x168>)
 80009e6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fbef 	bl	80001cc <HAL_InitTick>
  return HAL_OK;
 80009ee:	2000      	movs	r0, #0
}
 80009f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f4:	6813      	ldr	r3, [r2, #0]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80009fe:	6813      	ldr	r3, [r2, #0]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	4299      	cmp	r1, r3
 8000a06:	d0c9      	beq.n	800099c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
 8000a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0e:	686a      	ldr	r2, [r5, #4]
 8000a10:	4c35      	ldr	r4, [pc, #212]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 8000a12:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000a14:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a16:	d11c      	bne.n	8000a52 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000a18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000a1c:	d0f4      	beq.n	8000a08 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	f023 0303 	bic.w	r3, r3, #3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000a28:	f7ff fbf8 	bl	800021c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a2c:	686b      	ldr	r3, [r5, #4]
 8000a2e:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000a30:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a32:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a36:	d118      	bne.n	8000a6a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a38:	68a3      	ldr	r3, [r4, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b0c      	cmp	r3, #12
 8000a40:	d0af      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a42:	f7ff fbeb 	bl	800021c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9f5      	bls.n	8000a38 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a52:	2a02      	cmp	r2, #2
 8000a54:	d102      	bne.n	8000a5c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000a56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a5a:	e7df      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000a5c:	b912      	cbnz	r2, 8000a64 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000a5e:	f013 0f02 	tst.w	r3, #2
 8000a62:	e7db      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000a64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000a68:	e7d8      	b.n	8000a1c <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d10a      	bne.n	8000a84 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000a6e:	68a3      	ldr	r3, [r4, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d094      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a78:	f7ff fbd0 	bl	800021c <HAL_GetTick>
 8000a7c:	1bc0      	subs	r0, r0, r7
 8000a7e:	4540      	cmp	r0, r8
 8000a80:	d9f5      	bls.n	8000a6e <HAL_RCC_ClockConfig+0xe6>
 8000a82:	e7e3      	b.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000a84:	b973      	cbnz	r3, 8000aa4 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000a86:	68a3      	ldr	r3, [r4, #8]
 8000a88:	f013 0f0c 	tst.w	r3, #12
 8000a8c:	d089      	beq.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a8e:	f7ff fbc5 	bl	800021c <HAL_GetTick>
 8000a92:	1bc0      	subs	r0, r0, r7
 8000a94:	4540      	cmp	r0, r8
 8000a96:	d9f6      	bls.n	8000a86 <HAL_RCC_ClockConfig+0xfe>
 8000a98:	e7d8      	b.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a9a:	f7ff fbbf 	bl	800021c <HAL_GetTick>
 8000a9e:	1bc0      	subs	r0, r0, r7
 8000aa0:	4540      	cmp	r0, r8
 8000aa2:	d8d3      	bhi.n	8000a4c <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000aa4:	68a3      	ldr	r3, [r4, #8]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d1f5      	bne.n	8000a9a <HAL_RCC_ClockConfig+0x112>
 8000aae:	e778      	b.n	80009a2 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_RCC_ClockConfig+0x160>)
 8000ab2:	68a8      	ldr	r0, [r5, #8]
 8000ab4:	6893      	ldr	r3, [r2, #8]
 8000ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aba:	4303      	orrs	r3, r0
 8000abc:	6093      	str	r3, [r2, #8]
 8000abe:	e774      	b.n	80009aa <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f023 0307 	bic.w	r3, r3, #7
 8000ac6:	4333      	orrs	r3, r6
 8000ac8:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	429e      	cmp	r6, r3
 8000ad2:	d199      	bne.n	8000a08 <HAL_RCC_ClockConfig+0x80>
 8000ad4:	e770      	b.n	80009b8 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ad6:	68a3      	ldr	r3, [r4, #8]
 8000ad8:	68ea      	ldr	r2, [r5, #12]
 8000ada:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60a3      	str	r3, [r4, #8]
 8000ae2:	e76e      	b.n	80009c2 <HAL_RCC_ClockConfig+0x3a>
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	080028a0 	.word	0x080028a0
 8000af0:	20000430 	.word	0x20000430

08000af4 <HAL_RCC_GetHCLKFreq>:
}
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <HAL_RCC_GetHCLKFreq+0x8>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000430 	.word	0x20000430

08000b00 <adc1_enable>:

void adc1_enable(void)
{

/*Enable ADC1 CLK in RCC*/
((RCC)->AHB2ENR) |= RCC_ADC1_ENABLE;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <adc1_enable+0x138>)
 8000b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b08:	64da      	str	r2, [r3, #76]	; 0x4c

/*Enable the GPIOA CLK in RCC*/
((RCC)->AHB2ENR) |= (RCC_GPIOA_ENABLE|RCC_GPIOB_ENABLE);
 8000b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b0c:	f042 0203 	orr.w	r2, r2, #3
 8000b10:	64da      	str	r2, [r3, #76]	; 0x4c

((GPIOB)->MODER) |= ((AN_MODE) << (GPIO_0_DSHIFT));
 8000b12:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <adc1_enable+0x13c>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f042 0203 	orr.w	r2, r2, #3
 8000b1a:	601a      	str	r2, [r3, #0]
((GPIOB)->MODER) |= ((AN_MODE) << (GPIO_1_DSHIFT));
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	f042 020c 	orr.w	r2, r2, #12
 8000b22:	601a      	str	r2, [r3, #0]

((GPIOA)->MODER) |= ((AN_MODE) << (GPIO_6_DSHIFT));
 8000b24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000b2e:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= ((AN_MODE) << (GPIO_2_DSHIFT));
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000b36:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= ((AN_MODE) << (GPIO_1_DSHIFT));
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	f042 020c 	orr.w	r2, r2, #12
 8000b3e:	601a      	str	r2, [r3, #0]


/*Disable Deep Power Down*/
while(((ADC1)->CR) & DPD)
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <adc1_enable+0x140>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	0090      	lsls	r0, r2, #2
 8000b46:	d468      	bmi.n	8000c1a <adc1_enable+0x11a>

/*Enable the internal Temperature Sensor*/
//((ADC1_COMMON)->CCR) |= (TEMP_CHANNEL_ENABLE);

/*Adjust the CLK*/
((ADC1_COMMON)->CCR) |= ((HCLK_1)<<(ADC_CLK_SHIFT));
 8000b48:	4a3e      	ldr	r2, [pc, #248]	; (8000c44 <adc1_enable+0x144>)
 8000b4a:	6893      	ldr	r3, [r2, #8]
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b50:	6093      	str	r3, [r2, #8]



/*Enable the VoltageRegulator*/
while((((ADC1)->CR) & ADC_REG_GEN) == 0U)
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <adc1_enable+0x140>)
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	00d1      	lsls	r1, r2, #3
 8000b58:	d564      	bpl.n	8000c24 <adc1_enable+0x124>
{((ADC1)->CR) |= ADC_REG_GEN;}
/*Prep for calibration*/

while(((ADC1)->CR) & ((ADC_JSTP)|(ADC_STP)|(ADC_JSTART)|(ADC_START)|(ADC_DIS)|(ADC_EN)))
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <adc1_enable+0x140>)
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	6899      	ldr	r1, [r3, #8]
 8000b60:	f011 0f3f 	tst.w	r1, #63	; 0x3f
{((ADC1)->CR) |= ((ADC_JSTP)|(ADC_STP));}
 8000b64:	6899      	ldr	r1, [r3, #8]
while(((ADC1)->CR) & ((ADC_JSTP)|(ADC_STP)|(ADC_JSTART)|(ADC_START)|(ADC_DIS)|(ADC_EN)))
 8000b66:	d162      	bne.n	8000c2e <adc1_enable+0x12e>
while(adci < 100U)
{adci++;}
adci=0U;

/*Calibrate*/
((ADC1)->CR) |= ADC_CALIBRATE;
 8000b68:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000b6c:	6099      	str	r1, [r3, #8]
while(((ADC1)->CR) & ADC_CALIBRATE){;}
 8000b6e:	6893      	ldr	r3, [r2, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dbfc      	blt.n	8000b6e <adc1_enable+0x6e>

while(adci < 100U)
{adci++;}
adci=0U;
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <adc1_enable+0x148>)
 8000b76:	2100      	movs	r1, #0
 8000b78:	6019      	str	r1, [r3, #0]
/*Enable the ADC*/
((ADC1)->CR) |= ADC_EN;
 8000b7a:	6893      	ldr	r3, [r2, #8]
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6093      	str	r3, [r2, #8]
while((((ADC1)->ISR) & ADC_READY) == 0U){;}
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <adc1_enable+0x140>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	07d2      	lsls	r2, r2, #31
 8000b88:	d5fc      	bpl.n	8000b84 <adc1_enable+0x84>



/*Clear Flag*/
((ADC1)->ISR) |= (ADC_READY);
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	f042 0201 	orr.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
/*Enable Interrupts*/
((ADC1)->IER) |= ((EOSI)|(EOCI));
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	f042 020c 	orr.w	r2, r2, #12
 8000b98:	605a      	str	r2, [r3, #4]


/*Set Channels*/
((ADC1)->SQR1) &= 0U;
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
((ADC1)->SQR1) |= ((CURRENT_SENSE_CHANNEL)<<(SQ1_SHIFT));
 8000ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ba2:	f441 7170 	orr.w	r1, r1, #960	; 0x3c0
 8000ba6:	6319      	str	r1, [r3, #48]	; 0x30
((ADC1)->SQR1) |= ((OUTPUT_VOLTAGE_CHANNEL)<<(SQ3_SHIFT));
 8000ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000baa:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000bae:	6319      	str	r1, [r3, #48]	; 0x30
((ADC1)->SQR2) |= ((INPUT_VOLTAGE_CHANNEL));
 8000bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bb2:	f041 0107 	orr.w	r1, r1, #7
 8000bb6:	6359      	str	r1, [r3, #52]	; 0x34
((ADC1)->SQR1) |= REG_CONV_CNT;
 8000bb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bba:	f041 0104 	orr.w	r1, r1, #4
 8000bbe:	6319      	str	r1, [r3, #48]	; 0x30

((ADC1)->JSQR) &= 0U;
 8000bc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bc2:	64da      	str	r2, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= ((INT_TEMP_CHANNEL)<<(JSQ2_SHIFT));
 8000bc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bc6:	f441 31c0 	orr.w	r1, r1, #98304	; 0x18000
 8000bca:	64d9      	str	r1, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= ((EXT_TEMP_CHANNEL)<<(JSQ1_SHIFT));
 8000bcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bce:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8000bd2:	64d9      	str	r1, [r3, #76]	; 0x4c
((ADC1)->JSQR) |= (INJ_CONV_CNT);
 8000bd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000bd6:	f041 0101 	orr.w	r1, r1, #1
 8000bda:	64d9      	str	r1, [r3, #76]	; 0x4c



/*Set Sampling Time on all channels*/
((ADC1)->SMPR1) &= 0U;
 8000bdc:	6959      	ldr	r1, [r3, #20]
 8000bde:	615a      	str	r2, [r3, #20]
((ADC1)->SMPR2) &= 0U;
 8000be0:	6999      	ldr	r1, [r3, #24]
 8000be2:	619a      	str	r2, [r3, #24]
((ADC1)->SMPR1) |= (SMPR1_CONF << 1U);
 8000be4:	6959      	ldr	r1, [r3, #20]
 8000be6:	f041 5192 	orr.w	r1, r1, #306184192	; 0x12400000
 8000bea:	f441 2112 	orr.w	r1, r1, #598016	; 0x92000
 8000bee:	f441 6192 	orr.w	r1, r1, #1168	; 0x490
 8000bf2:	f041 0102 	orr.w	r1, r1, #2
 8000bf6:	6159      	str	r1, [r3, #20]
((ADC1)->SMPR2) |= (SMPR2_CONF << 1U);
 8000bf8:	6998      	ldr	r0, [r3, #24]
 8000bfa:	4914      	ldr	r1, [pc, #80]	; (8000c4c <adc1_enable+0x14c>)
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	6199      	str	r1, [r3, #24]

/*Configure the Setup*/
((ADC1)->CFGR) |= (AUTO_DELAY);
 8000c00:	68d9      	ldr	r1, [r3, #12]
 8000c02:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000c06:	60d9      	str	r1, [r3, #12]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <adc1_enable+0x150>)
 8000c0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000c0e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c16:	6019      	str	r1, [r3, #0]
 8000c18:	4770      	bx	lr
{((ADC1)->CR) &= ~(DPD);}
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	e78e      	b.n	8000b42 <adc1_enable+0x42>
{((ADC1)->CR) |= ADC_REG_GEN;}
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	e792      	b.n	8000b54 <adc1_enable+0x54>
{((ADC1)->CR) |= ((ADC_JSTP)|(ADC_STP));}
 8000c2e:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8000c32:	6099      	str	r1, [r3, #8]
 8000c34:	e793      	b.n	8000b5e <adc1_enable+0x5e>
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	50040000 	.word	0x50040000
 8000c44:	50040300 	.word	0x50040300
 8000c48:	20000454 	.word	0x20000454
 8000c4c:	02492492 	.word	0x02492492
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <adc1_regular_conversions>:
}


void adc1_regular_conversions(void)
{
((ADC1)->ISR) |= ((EOSI)|(EOCI));
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <adc1_regular_conversions+0x1c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f042 020c 	orr.w	r2, r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
((ADC1)->IER) |= ((EOSI)|(EOCI));
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	f042 020c 	orr.w	r2, r2, #12
 8000c64:	605a      	str	r2, [r3, #4]
((ADC1)->CR) |= ADC_START;
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	f042 0204 	orr.w	r2, r2, #4
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	4770      	bx	lr
 8000c70:	50040000 	.word	0x50040000

08000c74 <adc1_inject_conversions>:
}

void adc1_inject_conversions(void)
{

	((ADC1)->ISR) |= ((JEOSI));
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <adc1_inject_conversions+0x1c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c7c:	601a      	str	r2, [r3, #0]
	((ADC1)->IER) |= ((JEOSI));
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c84:	605a      	str	r2, [r3, #4]
	((ADC1)->CR) |= ADC_JSTART;
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	f042 0208 	orr.w	r2, r2, #8
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	4770      	bx	lr
 8000c90:	50040000 	.word	0x50040000

08000c94 <dac_enable>:
int32_t dac_out;


void dac_enable(void)
{
dac_out = 1000U;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <dac_enable+0x40>)
 8000c96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c9a:	601a      	str	r2, [r3, #0]
/*Enable RCC Clock*/
((RCC)->APB1ENR1) |= RCC_DAC_ENABLE;
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <dac_enable+0x44>)
 8000c9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000ca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
/*Set GPIO PA5 to Analog Mode */
((GPIOA)->MODER) |= ((AN_MODE)<<(GPIO_5_DSHIFT));
 8000ca6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000cb0:	6013      	str	r3, [r2, #0]

/*Connect DAC2 to on chip Peripheral*/
((DAC)->MCR) |= ((MODE_1) <<(CH2_SHIFT));
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <dac_enable+0x48>)
 8000cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c

/*Enable to the DAC*/
((DAC)->CR) |= CH2_ENABLE;
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cc2:	601a      	str	r2, [r3, #0]


((DAC)->DHR12RD) &= 0U;
 8000cc4:	6a1a      	ldr	r2, [r3, #32]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000cca:	6a1a      	ldr	r2, [r3, #32]
 8000ccc:	f042 727a 	orr.w	r2, r2, #65536000	; 0x3e80000
 8000cd0:	621a      	str	r2, [r3, #32]
 8000cd2:	4770      	bx	lr
 8000cd4:	20000458 	.word	0x20000458
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40007400 	.word	0x40007400

08000ce0 <dac_up>:
}


void dac_up(uint32_t increment)
{
dac_out += increment;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <dac_up+0x2c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4410      	add	r0, r2
if(dac_out > 4095U)
 8000ce6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{dac_out = 4095U;}
 8000cea:	bf24      	itt	cs
 8000cec:	f640 72ff 	movwcs	r2, #4095	; 0xfff
 8000cf0:	601a      	strcs	r2, [r3, #0]

((DAC)->DHR12RD) &= 0U;
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <dac_up+0x30>)
dac_out += increment;
 8000cf4:	bf38      	it	cc
 8000cf6:	6018      	strcc	r0, [r3, #0]
((DAC)->DHR12RD) &= 0U;
 8000cf8:	6a11      	ldr	r1, [r2, #32]
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	6211      	str	r1, [r2, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000cfe:	6a11      	ldr	r1, [r2, #32]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d06:	6213      	str	r3, [r2, #32]
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000458 	.word	0x20000458
 8000d10:	40007400 	.word	0x40007400

08000d14 <dac_down>:
}
void dac_down(uint32_t decrement)
{
	 dac_out -= decrement;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <dac_down+0x24>)
 8000d16:	681a      	ldr	r2, [r3, #0]
	 if(dac_out <= 0U)
 8000d18:	1a10      	subs	r0, r2, r0
	 {dac_out = 1U;}
 8000d1a:	bf04      	itt	eq
 8000d1c:	2201      	moveq	r2, #1
 8000d1e:	601a      	streq	r2, [r3, #0]


	((DAC)->DHR12RD) &= 0U;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <dac_down+0x28>)
	 dac_out -= decrement;
 8000d22:	bf18      	it	ne
 8000d24:	6018      	strne	r0, [r3, #0]
	((DAC)->DHR12RD) &= 0U;
 8000d26:	6a11      	ldr	r1, [r2, #32]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	6211      	str	r1, [r2, #32]
	((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000d2c:	6a11      	ldr	r1, [r2, #32]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d34:	6213      	str	r3, [r2, #32]
 8000d36:	4770      	bx	lr
 8000d38:	20000458 	.word	0x20000458
 8000d3c:	40007400 	.word	0x40007400

08000d40 <dac_set>:
{set_point = 0U;}

if(set_point > 4095U)
{set_point = 4095U;}

dac_out = set_point;
 8000d40:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d44:	4298      	cmp	r0, r3
 8000d46:	bf28      	it	cs
 8000d48:	4618      	movcs	r0, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <dac_set+0x20>)
 8000d4c:	6018      	str	r0, [r3, #0]

((DAC)->DHR12RD) &= 0U;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <dac_set+0x24>)
 8000d50:	6a1a      	ldr	r2, [r3, #32]
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
((DAC)->DHR12RD) |= ((dac_out) << (CH2_SHIFT));
 8000d56:	6a1a      	ldr	r2, [r3, #32]
 8000d58:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8000d5c:	6218      	str	r0, [r3, #32]
 8000d5e:	4770      	bx	lr
 8000d60:	20000458 	.word	0x20000458
 8000d64:	40007400 	.word	0x40007400

08000d68 <lptim1_enable>:
void lptim1_enable(void)
{
uint8_t i =0U;


((RCC)->APB1ENR1) |= RCC_LPTIM1_ENABLE;
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <lptim1_enable+0x4c>)
 8000d6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
((LPTIM1)->CR) |= LPTIM1_ENABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <lptim1_enable+0x50>)
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	611a      	str	r2, [r3, #16]


((LPTIM1)->IER) |= ARRM;
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	f042 0202 	orr.w	r2, r2, #2
 8000d82:	609a      	str	r2, [r3, #8]

((LPTIM1)->ARR) = QTR_MEG_OFF;
 8000d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d88:	619a      	str	r2, [r3, #24]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <lptim1_enable+0x54>)
 8000d8c:	2102      	movs	r1, #2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	2020      	movs	r0, #32
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d90:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d98:	6091      	str	r1, [r2, #8]
NVIC_ClearPendingIRQ(LPTIM1_IRQn);
NVIC_SetPriority(LPTIM1_IRQn, 2U);
NVIC_EnableIRQ(LPTIM1_IRQn);

for(i=0U; i<5U; i++)
{((&sys_time)->time_nums)[i] = 0U;}
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <lptim1_enable+0x58>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6011      	str	r1, [r2, #0]
 8000da0:	6051      	str	r1, [r2, #4]
 8000da2:	6091      	str	r1, [r2, #8]
 8000da4:	60d1      	str	r1, [r2, #12]
 8000da6:	6111      	str	r1, [r2, #16]


((LPTIM1)->CR) |= CNT_START;
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	f042 0204 	orr.w	r2, r2, #4
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40007c00 	.word	0x40007c00
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	2000045c 	.word	0x2000045c

08000dc4 <time_increment>:
}

void time_increment(void)
{
(((&sys_time)->time_nums)[ticks])++;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <time_increment+0x5c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	3201      	adds	r2, #1

if((((&sys_time)->time_nums)[ticks]) >= ticks_ovf)
 8000dca:	2af9      	cmp	r2, #249	; 0xf9
(((&sys_time)->time_nums)[ticks])++;
 8000dcc:	601a      	str	r2, [r3, #0]
if((((&sys_time)->time_nums)[ticks]) >= ticks_ovf)
 8000dce:	d904      	bls.n	8000dda <time_increment+0x16>
{
(((&sys_time)->time_nums)[millis])++;
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	3201      	adds	r2, #1
 8000dd4:	605a      	str	r2, [r3, #4]
(((&sys_time)->time_nums)[ticks]) = 0U;
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
}

if((((&sys_time)->time_nums)[millis]) >= millis_ovf)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8000de0:	d304      	bcc.n	8000dec <time_increment+0x28>
{
(((&sys_time)->time_nums)[seconds])++;
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	3201      	adds	r2, #1
 8000de6:	609a      	str	r2, [r3, #8]
(((&sys_time)->time_nums)[millis]) = 0U;
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
}

if((((&sys_time)->time_nums)[seconds]) >= seconds_ovf)
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	2a3b      	cmp	r2, #59	; 0x3b
 8000df0:	d904      	bls.n	8000dfc <time_increment+0x38>
{
(((&sys_time)->time_nums)[minutes])++;
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	3201      	adds	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
(((&sys_time)->time_nums)[seconds]) = 0U;
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
}

if((((&sys_time)->time_nums)[minutes]) >= minutes_ovf)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	2a3b      	cmp	r2, #59	; 0x3b
 8000e00:	d904      	bls.n	8000e0c <time_increment+0x48>
{
(((&sys_time)->time_nums)[hours])++;
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	3201      	adds	r2, #1
 8000e06:	611a      	str	r2, [r3, #16]
(((&sys_time)->time_nums)[minutes]) = 0U;
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
}

if((((&sys_time)->time_nums)[hours]) >= hours_ovf)
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	2a17      	cmp	r2, #23
 8000e10:	d904      	bls.n	8000e1c <time_increment+0x58>
{
(((&sys_time)->time_nums)[days])++;
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	3201      	adds	r2, #1
 8000e16:	615a      	str	r2, [r3, #20]
(((&sys_time)->time_nums)[hours]) = 0U;
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000045c 	.word	0x2000045c

08000e24 <read_time>:


}

TIME* read_time(void)
{return &sys_time;}
 8000e24:	4800      	ldr	r0, [pc, #0]	; (8000e28 <read_time+0x4>)
 8000e26:	4770      	bx	lr
 8000e28:	2000045c 	.word	0x2000045c

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e30:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e32:	2310      	movs	r3, #16
 8000e34:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e36:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e38:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e3a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 79U;
 8000e3c:	224f      	movs	r2, #79	; 0x4f
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e3e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 79U;
 8000e40:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000e42:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLM = ((2U)<<(4U));
 8000e44:	2220      	movs	r2, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000e46:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = ((2U)<<(4U));
 8000e48:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e4c:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e52:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e54:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e56:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f7ff fb3a 	bl	80004d0 <HAL_RCC_OscConfig>
 8000e5c:	b100      	cbz	r0, 8000e60 <SystemClock_Config+0x34>
 8000e5e:	e7fe      	b.n	8000e5e <SystemClock_Config+0x32>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	220f      	movs	r2, #15
 8000e62:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e66:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e72:	f7ff fd89 	bl	8000988 <HAL_RCC_ClockConfig>
 8000e76:	b100      	cbz	r0, 8000e7a <SystemClock_Config+0x4e>
 8000e78:	e7fe      	b.n	8000e78 <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e7e:	f7ff fa49 	bl	8000314 <HAL_PWREx_ControlVoltageScaling>
 8000e82:	4604      	mov	r4, r0
 8000e84:	b100      	cbz	r0, 8000e88 <SystemClock_Config+0x5c>
 8000e86:	e7fe      	b.n	8000e86 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e88:	f7ff fe34 	bl	8000af4 <HAL_RCC_GetHCLKFreq>
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e94:	f7ff fa0e 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff fa21 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea6:	f7ff f9d1 	bl	800024c <HAL_NVIC_SetPriority>
}
 8000eaa:	b016      	add	sp, #88	; 0x58
 8000eac:	bd10      	pop	{r4, pc}
	...

08000eb0 <main>:
{
 8000eb0:	b508      	push	{r3, lr}
  HAL_Init();
 8000eb2:	f7ff f99f 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 8000eb6:	f7ff ffb9 	bl	8000e2c <SystemClock_Config>
  system_io_config();
 8000eba:	f000 fb9b 	bl	80015f4 <system_io_config>
  lptim1_enable();
 8000ebe:	f7ff ff53 	bl	8000d68 <lptim1_enable>
  tim1_enable(115U);
 8000ec2:	2073      	movs	r0, #115	; 0x73
 8000ec4:	f001 fb24 	bl	8002510 <tim1_enable>
  uart1_enable();
 8000ec8:	f001 fbce 	bl	8002668 <uart1_enable>
  adc1_enable();
 8000ecc:	f7ff fe18 	bl	8000b00 <adc1_enable>
  system_ptr_config();
 8000ed0:	f000 f8e0 	bl	8001094 <system_ptr_config>
  dac_enable();
 8000ed4:	f7ff fede 	bl	8000c94 <dac_enable>
  relay_control(off);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 fb7d 	bl	80015d8 <relay_control>
	   flag_checker = start_up_check();
 8000ede:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <main+0x58>)
 8000ee0:	f000 f980 	bl	80011e4 <start_up_check>
 8000ee4:	6020      	str	r0, [r4, #0]
	    if(flag_checker)
 8000ee6:	b130      	cbz	r0, 8000ef6 <main+0x46>
	    	system_management();
 8000ee8:	f001 fa70 	bl	80023cc <system_management>
	    	adc_management();
 8000eec:	f000 fcc4 	bl	8001878 <adc_management>
	    	start_up_procedure();
 8000ef0:	f000 f980 	bl	80011f4 <start_up_procedure>
 8000ef4:	e7f4      	b.n	8000ee0 <main+0x30>
	    	system_management();
 8000ef6:	f001 fa69 	bl	80023cc <system_management>
	    	adc_management();
 8000efa:	f000 fcbd 	bl	8001878 <adc_management>
	    	pmic_management();
 8000efe:	f000 fb8d 	bl	800161c <pmic_management>
	    	thermal_management();
 8000f02:	f000 fac9 	bl	8001498 <thermal_management>
 8000f06:	e7eb      	b.n	8000ee0 <main+0x30>
 8000f08:	20000474 	.word	0x20000474

08000f0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_MspInit+0x88>)
{
 8000f0e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	661a      	str	r2, [r3, #96]	; 0x60
 8000f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1a:	f002 0201 	and.w	r2, r2, #1
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f28:	659a      	str	r2, [r3, #88]	; 0x58
 8000f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f32:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	f7ff f977 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	f06f 000b 	mvn.w	r0, #11
 8000f42:	f7ff f983 	bl	800024c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	4611      	mov	r1, r2
 8000f4a:	f06f 000a 	mvn.w	r0, #10
 8000f4e:	f7ff f97d 	bl	800024c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	4611      	mov	r1, r2
 8000f56:	f06f 0009 	mvn.w	r0, #9
 8000f5a:	f7ff f977 	bl	800024c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4611      	mov	r1, r2
 8000f62:	f06f 0004 	mvn.w	r0, #4
 8000f66:	f7ff f971 	bl	800024c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	f06f 0003 	mvn.w	r0, #3
 8000f72:	f7ff f96b 	bl	800024c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	4611      	mov	r1, r2
 8000f7a:	f06f 0001 	mvn.w	r0, #1
 8000f7e:	f7ff f965 	bl	800024c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	4611      	mov	r1, r2
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8a:	f7ff f95f 	bl	800024c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	b003      	add	sp, #12
 8000f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f94:	40021000 	.word	0x40021000

08000f98 <USART1_IRQHandler>:

/* USER CODE BEGIN 0 */
uint32_t fc;
uint16_t data;
void USART1_IRQHandler(void)
{
 8000f98:	b510      	push	{r4, lr}
	fc = ((USART1)->ISR);
 8000f9a:	4c06      	ldr	r4, [pc, #24]	; (8000fb4 <USART1_IRQHandler+0x1c>)
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <USART1_IRQHandler+0x20>)
 8000f9e:	69e3      	ldr	r3, [r4, #28]
 8000fa0:	6013      	str	r3, [r2, #0]

	if(fc & RXNE)
 8000fa2:	069b      	lsls	r3, r3, #26
 8000fa4:	d501      	bpl.n	8000faa <USART1_IRQHandler+0x12>
	{uart1_buffer_char();}
 8000fa6:	f001 fbd1 	bl	800274c <uart1_buffer_char>
	((USART1)->ICR) |= ONES;
 8000faa:	6a23      	ldr	r3, [r4, #32]
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	6223      	str	r3, [r4, #32]
 8000fb2:	bd10      	pop	{r4, pc}
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	2000047c 	.word	0x2000047c

08000fbc <LPTIM1_IRQHandler>:
}

void LPTIM1_IRQHandler(void)
{
 8000fbc:	b508      	push	{r3, lr}
time_increment();
 8000fbe:	f7ff ff01 	bl	8000dc4 <time_increment>
((LPTIM1)->ICR) |= LPTIM1_FLAG_CLEAR;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <LPTIM1_IRQHandler+0x18>)
 8000fc4:	6853      	ldr	r3, [r2, #4]
 8000fc6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8000fca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8000fce:	6053      	str	r3, [r2, #4]
 8000fd0:	bd08      	pop	{r3, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40007c00 	.word	0x40007c00

08000fd8 <ADC1_IRQHandler>:
}


void ADC1_IRQHandler(void)
{
 8000fd8:	b538      	push	{r3, r4, r5, lr}
fc = ((ADC1)->ISR);
 8000fda:	4d1e      	ldr	r5, [pc, #120]	; (8001054 <ADC1_IRQHandler+0x7c>)
 8000fdc:	4c1e      	ldr	r4, [pc, #120]	; (8001058 <ADC1_IRQHandler+0x80>)
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	6023      	str	r3, [r4, #0]

if(fc & EOCI)
 8000fe2:	0759      	lsls	r1, r3, #29
 8000fe4:	d50a      	bpl.n	8000ffc <ADC1_IRQHandler+0x24>
{
data = ((ADC1)->DR);
 8000fe6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <ADC1_IRQHandler+0x84>)
add_sample(data,0U);
 8000fea:	2100      	movs	r1, #0
data = ((ADC1)->DR);
 8000fec:	8018      	strh	r0, [r3, #0]
add_sample(data,0U);
 8000fee:	b280      	uxth	r0, r0
 8000ff0:	f000 fcb4 	bl	800195c <add_sample>
((ADC1)->ISR) |= EOCI;
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	602b      	str	r3, [r5, #0]
}

if(fc & EOSI)
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	071a      	lsls	r2, r3, #28
 8001000:	d506      	bpl.n	8001010 <ADC1_IRQHandler+0x38>
{
((ADC1)->ISR) |= EOSI;
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <ADC1_IRQHandler+0x7c>)
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6013      	str	r3, [r2, #0]
raise_avg_flag();
 800100c:	f000 fc8a 	bl	8001924 <raise_avg_flag>
}

if(fc & JEOSI)
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	065b      	lsls	r3, r3, #25
 8001014:	d515      	bpl.n	8001042 <ADC1_IRQHandler+0x6a>
{
data = ((ADC1)->JDR1);
 8001016:	4c0f      	ldr	r4, [pc, #60]	; (8001054 <ADC1_IRQHandler+0x7c>)
 8001018:	4d10      	ldr	r5, [pc, #64]	; (800105c <ADC1_IRQHandler+0x84>)
 800101a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800101e:	8028      	strh	r0, [r5, #0]
add_sample(data,1U);
 8001020:	2101      	movs	r1, #1
 8001022:	b280      	uxth	r0, r0
 8001024:	f000 fc9a 	bl	800195c <add_sample>
data = ((ADC1)->JDR2);
 8001028:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800102c:	8028      	strh	r0, [r5, #0]
add_sample(data,1U);
 800102e:	2101      	movs	r1, #1
 8001030:	b280      	uxth	r0, r0
 8001032:	f000 fc93 	bl	800195c <add_sample>
raise_temp_flag();
 8001036:	f000 fc83 	bl	8001940 <raise_temp_flag>
((ADC1)->ISR) |= JEOSI;
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	6023      	str	r3, [r4, #0]
}

((ADC1)->ISR) |= ADC1_FLAG_CLEAR;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <ADC1_IRQHandler+0x7c>)
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	ea6f 23d3 	mvn.w	r3, r3, lsr #11
 800104a:	ea6f 23c3 	mvn.w	r3, r3, lsl #11
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	50040000 	.word	0x50040000
 8001058:	2000047c 	.word	0x2000047c
 800105c:	20000478 	.word	0x20000478

08001060 <NMI_Handler>:
 8001060:	4770      	bx	lr

08001062 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler>

08001064 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler>

08001066 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler>

08001068 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler>

0800106a <SVC_Handler>:
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f7ff f8cb 	bl	800020c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800107a:	f7ff b93e 	b.w	80002fa <HAL_SYSTICK_IRQHandler>

0800107e <relay_control.part.0>:
void relay_control(uint8_t on_off)
{

if(on_off)
{
((GPIOA)->ODR) |= ((1U)<<(GPIO_11_SHIFT));
 800107e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001088:	615a      	str	r2, [r3, #20]
((GPIOA)->ODR) |= RELAY_PIN;
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	4770      	bx	lr

08001094 <system_ptr_config>:
	dbg1=0U;
 8001094:	4a34      	ldr	r2, [pc, #208]	; (8001168 <system_ptr_config+0xd4>)
 8001096:	4835      	ldr	r0, [pc, #212]	; (800116c <system_ptr_config+0xd8>)
 8001098:	4935      	ldr	r1, [pc, #212]	; (8001170 <system_ptr_config+0xdc>)
{
 800109a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dbg1=0U;
 800109c:	2300      	movs	r3, #0
 800109e:	6013      	str	r3, [r2, #0]
	dbg2=0U;
 80010a0:	4a34      	ldr	r2, [pc, #208]	; (8001174 <system_ptr_config+0xe0>)
 80010a2:	4d35      	ldr	r5, [pc, #212]	; (8001178 <system_ptr_config+0xe4>)
 80010a4:	6013      	str	r3, [r2, #0]
	for(sysi = 0U; sysi < SAMP_BANK_LENGTH; sysi++)
 80010a6:	4a35      	ldr	r2, [pc, #212]	; (800117c <system_ptr_config+0xe8>)
 80010a8:	461f      	mov	r7, r3
 80010aa:	7013      	strb	r3, [r2, #0]
 80010ac:	461c      	mov	r4, r3
 80010ae:	b2de      	uxtb	r6, r3
 80010b0:	2e19      	cmp	r6, #25
 80010b2:	d14f      	bne.n	8001154 <system_ptr_config+0xc0>
 80010b4:	b107      	cbz	r7, 80010b8 <system_ptr_config+0x24>
 80010b6:	7016      	strb	r6, [r2, #0]
	ov_channel.avg = 0U;
 80010b8:	664c      	str	r4, [r1, #100]	; 0x64
	cs_channel.avg = 0U;
 80010ba:	666c      	str	r4, [r5, #100]	; 0x64
	iv_channel.avg = 0U;
 80010bc:	6644      	str	r4, [r0, #100]	; 0x64
	system_time = read_time();
 80010be:	f7ff feb1 	bl	8000e24 <read_time>
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <system_ptr_config+0xec>)
 80010c4:	6018      	str	r0, [r3, #0]
	last_vsamp = 0U;
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <system_ptr_config+0xf0>)
 80010c8:	601c      	str	r4, [r3, #0]
	last_tsamp = 0U;
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <system_ptr_config+0xf4>)
 80010cc:	601c      	str	r4, [r3, #0]
	system_flags |= (ADC_INIT_FLAG|TEMP_INIT_FLAG|PMIC_INIT_FLAG);
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <system_ptr_config+0xf8>)
 80010d0:	2231      	movs	r2, #49	; 0x31
 80010d2:	601a      	str	r2, [r3, #0]
	start_up_flags = 0U;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <system_ptr_config+0xfc>)
 80010d6:	601c      	str	r4, [r3, #0]
	adc_conversion_channel = 1U;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <system_ptr_config+0x100>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
	cs_offset = 0U;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <system_ptr_config+0x104>)
 80010e0:	801c      	strh	r4, [r3, #0]
	v_ovp = DEFAULT_OVP;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <system_ptr_config+0x108>)
 80010e4:	f640 0298 	movw	r2, #2200	; 0x898
 80010e8:	801a      	strh	r2, [r3, #0]
	i_target = DEFAULT_I_TARGET;
 80010ea:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <system_ptr_config+0x10c>)
 80010ec:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80010f0:	8013      	strh	r3, [r2, #0]
	hs_i_target = DEFAULT_I_TARGET;
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <system_ptr_config+0x110>)
 80010f4:	8013      	strh	r3, [r2, #0]
	us_i_target = DEFAULT_I_TARGET;
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <system_ptr_config+0x114>)
 80010f8:	8013      	strh	r3, [r2, #0]
	th_i_target = DEFAULT_I_TARGET;
 80010fa:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <system_ptr_config+0x118>)
 80010fc:	8013      	strh	r3, [r2, #0]
	v_uvp = DEFAULT_UVP;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <system_ptr_config+0x11c>)
 8001100:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001104:	801a      	strh	r2, [r3, #0]
	exp_ov = EXP_OUT_VOLTAGE;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <system_ptr_config+0x120>)
 8001108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110c:	801a      	strh	r2, [r3, #0]
	wire_error_count = 0U;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <system_ptr_config+0x124>)
 8001110:	801c      	strh	r4, [r3, #0]
	stable_count = 0U;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <system_ptr_config+0x128>)
 8001114:	701c      	strb	r4, [r3, #0]
	temp_sample_level = 4095U;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <system_ptr_config+0x12c>)
 8001118:	f640 72ff 	movw	r2, #4095	; 0xfff
 800111c:	801a      	strh	r2, [r3, #0]
	wire_sample_level = 2047U;
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <system_ptr_config+0x130>)
 8001120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001124:	801a      	strh	r2, [r3, #0]
	up_button_dbnc = 0U;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <system_ptr_config+0x134>)
    button_delay = (((system_time)->time_nums)[millis]);
 8001128:	6842      	ldr	r2, [r0, #4]
	up_button_dbnc = 0U;
 800112a:	601c      	str	r4, [r3, #0]
	down_button_dbnc = 0U;
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <system_ptr_config+0x138>)
 800112e:	601c      	str	r4, [r3, #0]
	up_button_hold_count = 0U;
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <system_ptr_config+0x13c>)
 8001132:	601c      	str	r4, [r3, #0]
	down_button_hold_count = 0U;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <system_ptr_config+0x140>)
 8001136:	601c      	str	r4, [r3, #0]
    button_delay = (((system_time)->time_nums)[millis]);
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <system_ptr_config+0x144>)
 800113a:	601a      	str	r2, [r3, #0]
    dim_step = 25U;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <system_ptr_config+0x148>)
 800113e:	2219      	movs	r2, #25
	dac_set(0U);
 8001140:	2000      	movs	r0, #0
    dim_step = 25U;
 8001142:	601a      	str	r2, [r3, #0]
	dac_set(0U);
 8001144:	f7ff fdfc 	bl	8000d40 <dac_set>
	((RCC)->AHB2ENR) |= (RCC_GPIOB_ENABLE|RCC_GPIOA_ENABLE);
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <system_ptr_config+0x14c>)
 800114a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800114c:	f043 0303 	orr.w	r3, r3, #3
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	cs_channel.samples[sysi] = 0U;
 8001154:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	iv_channel.samples[sysi] = 0U;
 8001158:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	ov_channel.samples[sysi] = 0U;
 800115c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8001160:	2701      	movs	r7, #1
 8001162:	3301      	adds	r3, #1
 8001164:	e7a3      	b.n	80010ae <system_ptr_config+0x1a>
 8001166:	bf00      	nop
 8001168:	200006f0 	.word	0x200006f0
 800116c:	20000684 	.word	0x20000684
 8001170:	20000480 	.word	0x20000480
 8001174:	200005d4 	.word	0x200005d4
 8001178:	20000564 	.word	0x20000564
 800117c:	200005e4 	.word	0x200005e4
 8001180:	200006f8 	.word	0x200006f8
 8001184:	20000734 	.word	0x20000734
 8001188:	20000560 	.word	0x20000560
 800118c:	200005ec 	.word	0x200005ec
 8001190:	20000704 	.word	0x20000704
 8001194:	200005dc 	.word	0x200005dc
 8001198:	2000071c 	.word	0x2000071c
 800119c:	200005fe 	.word	0x200005fe
 80011a0:	20000680 	.word	0x20000680
 80011a4:	2000055c 	.word	0x2000055c
 80011a8:	20000720 	.word	0x20000720
 80011ac:	20000744 	.word	0x20000744
 80011b0:	2000066c 	.word	0x2000066c
 80011b4:	200005fc 	.word	0x200005fc
 80011b8:	2000066e 	.word	0x2000066e
 80011bc:	200004ec 	.word	0x200004ec
 80011c0:	20000710 	.word	0x20000710
 80011c4:	20000742 	.word	0x20000742
 80011c8:	20000728 	.word	0x20000728
 80011cc:	200005e8 	.word	0x200005e8
 80011d0:	200005d8 	.word	0x200005d8
 80011d4:	2000070c 	.word	0x2000070c
 80011d8:	200005d0 	.word	0x200005d0
 80011dc:	2000072c 	.word	0x2000072c
 80011e0:	40021000 	.word	0x40021000

080011e4 <start_up_check>:
if(system_flags & START_UP_FLAG)
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <start_up_check+0xc>)
 80011e6:	6818      	ldr	r0, [r3, #0]
}
 80011e8:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200005ec 	.word	0x200005ec

080011f4 <start_up_procedure>:
{
 80011f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
if((start_up_flags & FIRST_LAP_FLAG) == 0U)
 80011f8:	4d94      	ldr	r5, [pc, #592]	; (800144c <start_up_procedure+0x258>)
 80011fa:	4e95      	ldr	r6, [pc, #596]	; (8001450 <start_up_procedure+0x25c>)
 80011fc:	682a      	ldr	r2, [r5, #0]
 80011fe:	4995      	ldr	r1, [pc, #596]	; (8001454 <start_up_procedure+0x260>)
 8001200:	f012 0001 	ands.w	r0, r2, #1
 8001204:	462c      	mov	r4, r5
 8001206:	d118      	bne.n	800123a <start_up_procedure+0x46>
stable_count = 0U;
 8001208:	4b93      	ldr	r3, [pc, #588]	; (8001458 <start_up_procedure+0x264>)
i_target = hs_i_target;
 800120a:	4a94      	ldr	r2, [pc, #592]	; (800145c <start_up_procedure+0x268>)
stable_count = 0U;
 800120c:	7018      	strb	r0, [r3, #0]
i_target = hs_i_target;
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <start_up_procedure+0x26c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	8013      	strh	r3, [r2, #0]
th_i_target = hs_i_target;
 8001214:	4a93      	ldr	r2, [pc, #588]	; (8001464 <start_up_procedure+0x270>)
 8001216:	8013      	strh	r3, [r2, #0]
sample_end = (((system_time)->time_nums)[seconds]) + 3U;
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	1cda      	adds	r2, r3, #3
if(sample_end >= 60U)
 800121e:	2a3b      	cmp	r2, #59	; 0x3b
{sample_end-=60U;}
 8001220:	bf84      	itt	hi
 8001222:	3b39      	subhi	r3, #57	; 0x39
 8001224:	600b      	strhi	r3, [r1, #0]
dac_set(wire_sample_level);
 8001226:	4b90      	ldr	r3, [pc, #576]	; (8001468 <start_up_procedure+0x274>)
sample_end = (((system_time)->time_nums)[seconds]) + 3U;
 8001228:	bf98      	it	ls
 800122a:	600a      	strls	r2, [r1, #0]
dac_set(wire_sample_level);
 800122c:	8818      	ldrh	r0, [r3, #0]
 800122e:	f7ff fd87 	bl	8000d40 <dac_set>
start_up_flags = FIRST_LAP_FLAG;
 8001232:	2301      	movs	r3, #1
            {start_up_flags &= ~(INPUT_ERR_FLAG);}
 8001234:	6023      	str	r3, [r4, #0]
 8001236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if((((system_time)->time_nums)[seconds]) == sample_end)
 800123a:	f8d6 e000 	ldr.w	lr, [r6]
 800123e:	680b      	ldr	r3, [r1, #0]
 8001240:	f8de 0008 	ldr.w	r0, [lr, #8]
 8001244:	4298      	cmp	r0, r3
 8001246:	d124      	bne.n	8001292 <start_up_procedure+0x9e>
	if(system_flags & TEMP_INIT_FLAG)
 8001248:	4f88      	ldr	r7, [pc, #544]	; (800146c <start_up_procedure+0x278>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f013 0c10 	ands.w	ip, r3, #16
 8001250:	d007      	beq.n	8001262 <start_up_procedure+0x6e>
	sample_end = (((system_time)->time_nums)[seconds])+2U;
 8001252:	1c83      	adds	r3, r0, #2
	if(sample_end >= 60U)
 8001254:	2b3b      	cmp	r3, #59	; 0x3b
	{sample_end -= 60U;}
 8001256:	bf8a      	itet	hi
 8001258:	383a      	subhi	r0, #58	; 0x3a
	sample_end = (((system_time)->time_nums)[seconds])+2U;
 800125a:	600b      	strls	r3, [r1, #0]
	{sample_end -= 60U;}
 800125c:	6008      	strhi	r0, [r1, #0]
 800125e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(((&ex_temp)->avg) > SHORT_WIRE)
 8001262:	4983      	ldr	r1, [pc, #524]	; (8001470 <start_up_procedure+0x27c>)
 8001264:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8001266:	29c8      	cmp	r1, #200	; 0xc8
 8001268:	d903      	bls.n	8001272 <start_up_procedure+0x7e>
    if(((&ex_temp)->avg) < OPEN_WIRE)
 800126a:	f240 40dc 	movw	r0, #1244	; 0x4dc
 800126e:	4281      	cmp	r1, r0
 8001270:	d90c      	bls.n	800128c <start_up_procedure+0x98>
     wire_error_count += 1U;
 8001272:	4a80      	ldr	r2, [pc, #512]	; (8001474 <start_up_procedure+0x280>)
     start_up_flags &= 0U;
 8001274:	f8c5 c000 	str.w	ip, [r5]
     system_flags &= ~(START_UP_FLAG);
 8001278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800127c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001280:	603b      	str	r3, [r7, #0]
     wire_error_count += 1U;
 8001282:	8813      	ldrh	r3, [r2, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	8013      	strh	r3, [r2, #0]
     return;
 8001288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {start_up_flags |= NO_OPEN_FLAG;}
 800128c:	f042 0206 	orr.w	r2, r2, #6
 8001290:	602a      	str	r2, [r5, #0]
if((start_up_flags & (NO_SHORT_FLAG|NO_OPEN_FLAG)) == (NO_SHORT_FLAG|NO_OPEN_FLAG))
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	f003 0206 	and.w	r2, r3, #6
 8001298:	2a06      	cmp	r2, #6
 800129a:	d1cc      	bne.n	8001236 <start_up_procedure+0x42>
	if((start_up_flags & RELAY_ENABLE_FLAG) == 0U)
 800129c:	f013 0f08 	tst.w	r3, #8
 80012a0:	4d75      	ldr	r5, [pc, #468]	; (8001478 <start_up_procedure+0x284>)
 80012a2:	d12a      	bne.n	80012fa <start_up_procedure+0x106>
 80012a4:	f7ff feeb 	bl	800107e <relay_control.part.0>
	start_up_flags |= RELAY_ENABLE_FLAG;
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6023      	str	r3, [r4, #0]
	stup_action = ((system_time)->time_nums)[millis] + RELAY_DELAY;
 80012b0:	6833      	ldr	r3, [r6, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
		if(stup_action >= 1000U)
 80012b8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
		{stup_action -= 1000U;}
 80012bc:	bf2a      	itet	cs
 80012be:	f5a3 73fa 	subcs.w	r3, r3, #500	; 0x1f4
	stup_action = ((system_time)->time_nums)[millis] + RELAY_DELAY;
 80012c2:	602a      	strcc	r2, [r5, #0]
		{stup_action -= 1000U;}
 80012c4:	602b      	strcs	r3, [r5, #0]
	if(start_up_flags & RELAY_ENGAGE_FLAG)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	06d9      	lsls	r1, r3, #27
 80012ca:	d5b4      	bpl.n	8001236 <start_up_procedure+0x42>
		if((start_up_flags & PMIC_STUP_FLAG) == 0U)
 80012cc:	069a      	lsls	r2, r3, #26
 80012ce:	d41f      	bmi.n	8001310 <start_up_procedure+0x11c>
		set_duty_cycle(1U);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f001 f9c3 	bl	800265c <set_duty_cycle>
		buck_mode();
 80012d6:	f001 f8d3 	bl	8002480 <buck_mode>
		stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80012da:	6833      	ldr	r3, [r6, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f103 0214 	add.w	r2, r3, #20
			if(stup_action >= 1000U)
 80012e2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
			{stup_action -= 1000U;}
 80012e6:	bf24      	itt	cs
 80012e8:	f5a3 7375 	subcs.w	r3, r3, #980	; 0x3d4
 80012ec:	602b      	strcs	r3, [r5, #0]
        start_up_flags |= PMIC_STUP_FLAG;
 80012ee:	6823      	ldr	r3, [r4, #0]
		stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80012f0:	bf38      	it	cc
 80012f2:	602a      	strcc	r2, [r5, #0]
        start_up_flags |= PMIC_STUP_FLAG;
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	e79c      	b.n	8001234 <start_up_procedure+0x40>
	 if((start_up_flags & RELAY_ENGAGE_FLAG) == 0U)
 80012fa:	06d8      	lsls	r0, r3, #27
 80012fc:	d4e6      	bmi.n	80012cc <start_up_procedure+0xd8>
     if((((system_time)->time_nums)[millis]) == stup_action)
 80012fe:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001302:	682a      	ldr	r2, [r5, #0]
 8001304:	4291      	cmp	r1, r2
 8001306:	d196      	bne.n	8001236 <start_up_procedure+0x42>
     {start_up_flags |= RELAY_ENGAGE_FLAG;}
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	e7da      	b.n	80012c6 <start_up_procedure+0xd2>
            if((((system_time)->time_nums)[millis]) == stup_action)
 8001310:	6833      	ldr	r3, [r6, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d18d      	bne.n	8001236 <start_up_procedure+0x42>
			if(((&ov_channel)->avg) < (v_ovp - VOLTAGE_HYS))
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <start_up_procedure+0x288>)
 800131c:	4958      	ldr	r1, [pc, #352]	; (8001480 <start_up_procedure+0x28c>)
 800131e:	8813      	ldrh	r3, [r2, #0]
 8001320:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8001322:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800145c <start_up_procedure+0x268>
 8001326:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001494 <start_up_procedure+0x2a0>
 800132a:	4f56      	ldr	r7, [pc, #344]	; (8001484 <start_up_procedure+0x290>)
 800132c:	3b0a      	subs	r3, #10
 800132e:	4298      	cmp	r0, r3
 8001330:	468a      	mov	sl, r1
 8001332:	4693      	mov	fp, r2
 8001334:	d261      	bcs.n	80013fa <start_up_procedure+0x206>
			if((((&cs_channel)->avg)-cs_offset) < (i_target- CURRENT_HYS))
 8001336:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800133a:	883b      	ldrh	r3, [r7, #0]
 800133c:	f8b9 1000 	ldrh.w	r1, [r9]
 8001340:	eba2 0e03 	sub.w	lr, r2, r3
 8001344:	f1a1 0019 	sub.w	r0, r1, #25
 8001348:	4586      	cmp	lr, r0
 800134a:	d254      	bcs.n	80013f6 <start_up_procedure+0x202>
			if((i_target - (((&cs_channel)->avg)-cs_offset)) > 100U)
 800134c:	440b      	add	r3, r1
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	2b64      	cmp	r3, #100	; 0x64
			{duty_cycle_increment(2U);action_taken = 1U;}
 8001352:	bf8c      	ite	hi
 8001354:	2002      	movhi	r0, #2
			{duty_cycle_increment(1U);action_taken = 1U;}
 8001356:	2001      	movls	r0, #1
 8001358:	f001 f93c 	bl	80025d4 <duty_cycle_increment>
 800135c:	2301      	movs	r3, #1
			if(((&cs_channel)->avg) < cs_offset)
 800135e:	883a      	ldrh	r2, [r7, #0]
 8001360:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
 8001364:	4291      	cmp	r1, r2
 8001366:	d203      	bcs.n	8001370 <start_up_procedure+0x17c>
			{duty_cycle_increment(1U);action_taken = 1U;}
 8001368:	2001      	movs	r0, #1
 800136a:	f001 f933 	bl	80025d4 <duty_cycle_increment>
 800136e:	2301      	movs	r3, #1
			if((((&cs_channel)->avg)-cs_offset) > (i_target+CURRENT_HYS))
 8001370:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8001374:	8839      	ldrh	r1, [r7, #0]
 8001376:	1a51      	subs	r1, r2, r1
 8001378:	f8b9 2000 	ldrh.w	r2, [r9]
 800137c:	3219      	adds	r2, #25
 800137e:	4291      	cmp	r1, r2
 8001380:	d903      	bls.n	800138a <start_up_procedure+0x196>
			{duty_cycle_decrement(1U);action_taken = 1U;}
 8001382:	2001      	movs	r0, #1
 8001384:	f001 f94a 	bl	800261c <duty_cycle_decrement>
 8001388:	2301      	movs	r3, #1
			if(((&ov_channel)->avg) > (v_ovp+VOLTAGE_HYS))
 800138a:	f8bb 2000 	ldrh.w	r2, [fp]
 800138e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8001392:	320a      	adds	r2, #10
 8001394:	4291      	cmp	r1, r2
 8001396:	d932      	bls.n	80013fe <start_up_procedure+0x20a>
			{duty_cycle_decrement(1U);action_taken = 1U;}
 8001398:	2001      	movs	r0, #1
 800139a:	f001 f93f 	bl	800261c <duty_cycle_decrement>
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 800139e:	6833      	ldr	r3, [r6, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f103 0214 	add.w	r2, r3, #20
            	if(stup_action >= 1000U)
 80013a6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
            	{stup_action -= 1000U;}
 80013aa:	bf2a      	itet	cs
 80013ac:	f5a3 7375 	subcs.w	r3, r3, #980	; 0x3d4
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 80013b0:	602a      	strcc	r2, [r5, #0]
            	{stup_action -= 1000U;}
 80013b2:	602b      	strcs	r3, [r5, #0]
            if(((&iv_channel)->avg) < (INPUT_BAD - VOLTAGE_HYS))
 80013b4:	4e34      	ldr	r6, [pc, #208]	; (8001488 <start_up_procedure+0x294>)
 80013b6:	6e71      	ldr	r1, [r6, #100]	; 0x64
 80013b8:	f240 3215 	movw	r2, #789	; 0x315
 80013bc:	4291      	cmp	r1, r2
 80013be:	d810      	bhi.n	80013e2 <start_up_procedure+0x1ee>
            start_up_flags |= (INPUT_ERR_FLAG|CURRENT_MOD_FLAG);
 80013c0:	6823      	ldr	r3, [r4, #0]
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
 80013c2:	883a      	ldrh	r2, [r7, #0]
 80013c4:	4d26      	ldr	r5, [pc, #152]	; (8001460 <start_up_procedure+0x26c>)
            start_up_flags |= (INPUT_ERR_FLAG|CURRENT_MOD_FLAG);
 80013c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013ca:	6023      	str	r3, [r4, #0]
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
 80013cc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	3b19      	subs	r3, #25
            duty_cycle_decrement(1U);
 80013d4:	2001      	movs	r0, #1
            hs_i_target = (((&cs_channel)->avg)-cs_offset)-25U;
 80013d6:	802b      	strh	r3, [r5, #0]
            duty_cycle_decrement(1U);
 80013d8:	f001 f920 	bl	800261c <duty_cycle_decrement>
            i_target = hs_i_target;
 80013dc:	882b      	ldrh	r3, [r5, #0]
 80013de:	f8a9 3000 	strh.w	r3, [r9]
            if(((&iv_channel)->avg) > (INPUT_BAD + VOLTAGE_HYS))
 80013e2:	6e72      	ldr	r2, [r6, #100]	; 0x64
 80013e4:	f240 332a 	movw	r3, #810	; 0x32a
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f67f af24 	bls.w	8001236 <start_up_procedure+0x42>
            {start_up_flags &= ~(INPUT_ERR_FLAG);}
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013f4:	e71e      	b.n	8001234 <start_up_procedure+0x40>
uint8_t action_taken = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e7b1      	b.n	800135e <start_up_procedure+0x16a>
 80013fa:	2300      	movs	r3, #0
 80013fc:	e7b8      	b.n	8001370 <start_up_procedure+0x17c>
            if(action_taken)
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1cd      	bne.n	800139e <start_up_procedure+0x1aa>
            if((start_up_flags & INPUT_ERR_FLAG) == 0U)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	065b      	lsls	r3, r3, #25
 8001406:	d4d5      	bmi.n	80013b4 <start_up_procedure+0x1c0>
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f103 0214 	add.w	r2, r3, #20
            	if(stup_action >= 1000U)
 8001410:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
            stup_action = (((system_time)->time_nums)[millis])+STUP_DELAY;
 8001414:	bf38      	it	cc
 8001416:	602a      	strcc	r2, [r5, #0]
            stable_count += 1U;
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <start_up_procedure+0x264>)
            	{stup_action -= 1000U;}
 800141a:	bf24      	itt	cs
 800141c:	f5a3 7375 	subcs.w	r3, r3, #980	; 0x3d4
 8001420:	602b      	strcs	r3, [r5, #0]
            stable_count += 1U;
 8001422:	7813      	ldrb	r3, [r2, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b2db      	uxtb	r3, r3
            if(stable_count >= 100U)
 8001428:	2b63      	cmp	r3, #99	; 0x63
            stable_count += 1U;
 800142a:	7013      	strb	r3, [r2, #0]
            if(stable_count >= 100U)
 800142c:	d9c2      	bls.n	80013b4 <start_up_procedure+0x1c0>
            dac_set(temp_sample_level);
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <start_up_procedure+0x298>)
 8001430:	8818      	ldrh	r0, [r3, #0]
 8001432:	f7ff fc85 	bl	8000d40 <dac_set>
            system_flags &= ~(START_UP_FLAG);
 8001436:	4a0d      	ldr	r2, [pc, #52]	; (800146c <start_up_procedure+0x278>)
            ex_sample_count = 0U;
 8001438:	4915      	ldr	r1, [pc, #84]	; (8001490 <start_up_procedure+0x29c>)
            system_flags &= ~(START_UP_FLAG);
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
            ex_sample_count = 0U;
 8001440:	2000      	movs	r0, #0
            system_flags |= (PMIC_ENABLE_FLAG);
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
            ex_sample_count = 0U;
 8001446:	6008      	str	r0, [r1, #0]
            system_flags |= (PMIC_ENABLE_FLAG);
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e7b3      	b.n	80013b4 <start_up_procedure+0x1c0>
 800144c:	20000704 	.word	0x20000704
 8001450:	200006f8 	.word	0x200006f8
 8001454:	200005f8 	.word	0x200005f8
 8001458:	200004ec 	.word	0x200004ec
 800145c:	20000680 	.word	0x20000680
 8001460:	2000055c 	.word	0x2000055c
 8001464:	20000744 	.word	0x20000744
 8001468:	20000742 	.word	0x20000742
 800146c:	200005ec 	.word	0x200005ec
 8001470:	20000600 	.word	0x20000600
 8001474:	2000066e 	.word	0x2000066e
 8001478:	200005f4 	.word	0x200005f4
 800147c:	200005fe 	.word	0x200005fe
 8001480:	20000480 	.word	0x20000480
 8001484:	2000071c 	.word	0x2000071c
 8001488:	20000684 	.word	0x20000684
 800148c:	20000710 	.word	0x20000710
 8001490:	20000678 	.word	0x20000678
 8001494:	20000564 	.word	0x20000564

08001498 <thermal_management>:
	if(system_flags & TEMP_INIT_FLAG)
 8001498:	4846      	ldr	r0, [pc, #280]	; (80015b4 <thermal_management+0x11c>)
 800149a:	6803      	ldr	r3, [r0, #0]
 800149c:	f013 0f10 	tst.w	r3, #16
{
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	4601      	mov	r1, r0
	if(system_flags & TEMP_INIT_FLAG)
 80014a4:	d174      	bne.n	8001590 <thermal_management+0xf8>
	if((system_flags & PMIC_ENABLE_FLAG) == 0U)
 80014a6:	065e      	lsls	r6, r3, #25
 80014a8:	d572      	bpl.n	8001590 <thermal_management+0xf8>
	if(((&ex_temp)->avg) <= SHORT_WIRE_RUN)
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <thermal_management+0x120>)
 80014ac:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80014ae:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80014b2:	d807      	bhi.n	80014c4 <thermal_management+0x2c>
	wire_error_count+=1U;
 80014b4:	4a41      	ldr	r2, [pc, #260]	; (80015bc <thermal_management+0x124>)
	system_flags |= THERM_WIRE_ERR_FLAG;
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6003      	str	r3, [r0, #0]
	wire_error_count+=1U;
 80014bc:	8813      	ldrh	r3, [r2, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	8013      	strh	r3, [r2, #0]
	return;
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
	if(((&ex_temp)->avg) >= OPEN_WIRE_RUN)
 80014c4:	f640 14b4 	movw	r4, #2484	; 0x9b4
 80014c8:	42a2      	cmp	r2, r4
 80014ca:	d8f3      	bhi.n	80014b4 <thermal_management+0x1c>
	if(((&ex_temp)->avg) <= HOT_TEMP)
 80014cc:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 80014d0:	d9f0      	bls.n	80014b4 <thermal_management+0x1c>
	if(((&ex_temp)->avg) >= COLD_TEMP)
 80014d2:	f640 14a5 	movw	r4, #2469	; 0x9a5
 80014d6:	42a2      	cmp	r2, r4
 80014d8:	d8ec      	bhi.n	80014b4 <thermal_management+0x1c>
	if((system_flags & THERMAL_CON_FLAG) == 0U)
 80014da:	05dd      	lsls	r5, r3, #23
 80014dc:	d459      	bmi.n	8001592 <thermal_management+0xfa>
		if(((&ex_temp)->avg) < (FOLDBACK_TEMP - THERMAL_HYS))
 80014de:	f240 5059 	movw	r0, #1369	; 0x559
 80014e2:	4282      	cmp	r2, r0
 80014e4:	d806      	bhi.n	80014f4 <thermal_management+0x5c>
			system_flags |= THERMAL_CON_FLAG;
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
			last_temp = ((&ex_temp)->avg) + (2U*THERMAL_MAX_DELTA);
 80014ea:	4835      	ldr	r0, [pc, #212]	; (80015c0 <thermal_management+0x128>)
			system_flags |= THERMAL_CON_FLAG;
 80014ec:	600b      	str	r3, [r1, #0]
			last_temp = ((&ex_temp)->avg) + (2U*THERMAL_MAX_DELTA);
 80014ee:	f102 0364 	add.w	r3, r2, #100	; 0x64
 80014f2:	8003      	strh	r3, [r0, #0]
		system_flags &= ~(THERMAL_ACTION_FLAG);
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
				{system_flags &= ~(THERMAL_CON_FLAG|THERMAL_ACTION_FLAG);}
 80014fa:	600b      	str	r3, [r1, #0]
	if(system_flags & THERMAL_CON_FLAG)
 80014fc:	680b      	ldr	r3, [r1, #0]
 80014fe:	05dc      	lsls	r4, r3, #23
 8001500:	d546      	bpl.n	8001590 <thermal_management+0xf8>
		if((system_flags & THERMAL_ACTION_FLAG) == 0U)
 8001502:	0598      	lsls	r0, r3, #22
 8001504:	d44c      	bmi.n	80015a0 <thermal_management+0x108>
	    if(((&ex_temp)->avg) < last_temp)
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <thermal_management+0x128>)
 8001508:	8804      	ldrh	r4, [r0, #0]
 800150a:	42a2      	cmp	r2, r4
 800150c:	d21c      	bcs.n	8001548 <thermal_management+0xb0>
	    pl = last_temp - ((&ex_temp)->avg);
 800150e:	1aa4      	subs	r4, r4, r2
 8001510:	4d2c      	ldr	r5, [pc, #176]	; (80015c4 <thermal_management+0x12c>)
	    if(pl > THERMAL_MAX_DELTA)
 8001512:	2c32      	cmp	r4, #50	; 0x32
	    pl = last_temp - ((&ex_temp)->avg);
 8001514:	602c      	str	r4, [r5, #0]
	    if(pl > THERMAL_MAX_DELTA)
 8001516:	d917      	bls.n	8001548 <thermal_management+0xb0>
	    if(th_i_target <= 30)
 8001518:	4d2b      	ldr	r5, [pc, #172]	; (80015c8 <thermal_management+0x130>)
	    last_temp = ((&ex_temp)->avg);
 800151a:	8002      	strh	r2, [r0, #0]
	    if(th_i_target <= 30)
 800151c:	882c      	ldrh	r4, [r5, #0]
 800151e:	2c1e      	cmp	r4, #30
	    {th_i_target = 40U;}
 8001520:	bf94      	ite	ls
 8001522:	2428      	movls	r4, #40	; 0x28
	    {th_i_target -= THERMAL_STEP;}
 8001524:	3c19      	subhi	r4, #25
 8001526:	802c      	strh	r4, [r5, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001528:	4c28      	ldr	r4, [pc, #160]	; (80015cc <thermal_management+0x134>)
 800152a:	4d29      	ldr	r5, [pc, #164]	; (80015d0 <thermal_management+0x138>)
 800152c:	6824      	ldr	r4, [r4, #0]
 800152e:	6864      	ldr	r4, [r4, #4]
 8001530:	f204 26ee 	addw	r6, r4, #750	; 0x2ee
	    if(last_therm_action >= 1000U)
 8001534:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
	    {last_therm_action -= 1000U;}
 8001538:	bf28      	it	cs
 800153a:	3cfa      	subcs	r4, #250	; 0xfa
	    system_flags |= THERMAL_ACTION_FLAG;
 800153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001540:	bf34      	ite	cc
 8001542:	602e      	strcc	r6, [r5, #0]
	    {last_therm_action -= 1000U;}
 8001544:	602c      	strcs	r4, [r5, #0]
	    system_flags |= THERMAL_ACTION_FLAG;
 8001546:	600b      	str	r3, [r1, #0]
	    if(((&ex_temp)->avg) > last_temp)
 8001548:	8803      	ldrh	r3, [r0, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d920      	bls.n	8001590 <thermal_management+0xf8>
	    pl =((&ex_temp)->avg) - last_temp;
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	4c1c      	ldr	r4, [pc, #112]	; (80015c4 <thermal_management+0x12c>)
	    if(pl > THERMAL_MAX_DELTA)
 8001552:	2b32      	cmp	r3, #50	; 0x32
	    pl =((&ex_temp)->avg) - last_temp;
 8001554:	6023      	str	r3, [r4, #0]
	    if(pl > THERMAL_MAX_DELTA)
 8001556:	d91b      	bls.n	8001590 <thermal_management+0xf8>
	    th_i_target += THERMAL_STEP;
 8001558:	4c1b      	ldr	r4, [pc, #108]	; (80015c8 <thermal_management+0x130>)
	    if(th_i_target > (hs_i_target))
 800155a:	4d1e      	ldr	r5, [pc, #120]	; (80015d4 <thermal_management+0x13c>)
	    th_i_target += THERMAL_STEP;
 800155c:	8823      	ldrh	r3, [r4, #0]
	    if(th_i_target > (hs_i_target))
 800155e:	882d      	ldrh	r5, [r5, #0]
	    last_temp = ((&ex_temp)->avg);
 8001560:	8002      	strh	r2, [r0, #0]
	    th_i_target += THERMAL_STEP;
 8001562:	3319      	adds	r3, #25
 8001564:	b29b      	uxth	r3, r3
	    if(th_i_target > (hs_i_target))
 8001566:	42ab      	cmp	r3, r5
	    th_i_target += THERMAL_STEP;
 8001568:	8023      	strh	r3, [r4, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <thermal_management+0x134>)
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <thermal_management+0x138>)
 800156e:	681b      	ldr	r3, [r3, #0]
	    {th_i_target = hs_i_target;}
 8001570:	bf88      	it	hi
 8001572:	8025      	strhhi	r5, [r4, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f203 20ee 	addw	r0, r3, #750	; 0x2ee
	    if(last_therm_action >= 1000U)
 800157a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
	    {last_therm_action -= 1000U;}
 800157e:	bf24      	itt	cs
 8001580:	3bfa      	subcs	r3, #250	; 0xfa
 8001582:	6013      	strcs	r3, [r2, #0]
	    system_flags |= THERMAL_ACTION_FLAG;
 8001584:	680b      	ldr	r3, [r1, #0]
	    last_therm_action = (((system_time)->time_nums)[millis]) + THERMAL_DELAY;
 8001586:	bf38      	it	cc
 8001588:	6010      	strcc	r0, [r2, #0]
	    system_flags |= THERMAL_ACTION_FLAG;
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
		{system_flags &= ~(THERMAL_ACTION_FLAG);}
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	bd70      	pop	{r4, r5, r6, pc}
		if(((&ex_temp)->avg) > (FOLDBACK_TEMP + THERMAL_HYS))
 8001592:	f240 5096 	movw	r0, #1430	; 0x596
 8001596:	4282      	cmp	r2, r0
 8001598:	d9b0      	bls.n	80014fc <thermal_management+0x64>
				{system_flags &= ~(THERMAL_CON_FLAG|THERMAL_ACTION_FLAG);}
 800159a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159e:	e7ac      	b.n	80014fa <thermal_management+0x62>
		if((((system_time)->time_nums)[millis]) == last_therm_action)
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <thermal_management+0x134>)
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6850      	ldr	r0, [r2, #4]
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <thermal_management+0x138>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d1f0      	bne.n	8001590 <thermal_management+0xf8>
		{system_flags &= ~(THERMAL_ACTION_FLAG);}
 80015ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015b2:	e7ec      	b.n	800158e <thermal_management+0xf6>
 80015b4:	200005ec 	.word	0x200005ec
 80015b8:	20000600 	.word	0x20000600
 80015bc:	2000066e 	.word	0x2000066e
 80015c0:	20000740 	.word	0x20000740
 80015c4:	20000708 	.word	0x20000708
 80015c8:	20000744 	.word	0x20000744
 80015cc:	200006f8 	.word	0x200006f8
 80015d0:	20000670 	.word	0x20000670
 80015d4:	2000055c 	.word	0x2000055c

080015d8 <relay_control>:
if(on_off)
 80015d8:	b108      	cbz	r0, 80015de <relay_control+0x6>
 80015da:	f7ff bd50 	b.w	800107e <relay_control.part.0>
}
else
{
((GPIOA)->ODR)  &= ~(((1U)<<(GPIO_11_SHIFT)));
 80015de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e8:	615a      	str	r2, [r3, #20]
((GPIOA)->ODR) &= ~RELAY_PIN;
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	4770      	bx	lr

080015f4 <system_io_config>:
((RCC)->AHB2ENR) |= (RCC_GPIOB_ENABLE|RCC_GPIOA_ENABLE);
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <system_io_config+0x24>)
 80015f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80015f8:	f043 0303 	orr.w	r3, r3, #3
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 80015fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
relay_control(off);
 8001602:	2000      	movs	r0, #0
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800160a:	601a      	str	r2, [r3, #0]
((GPIOA)->MODER) |= (((OUT_MODE)<<(GPIO_7_DSHIFT)));
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001612:	601a      	str	r2, [r3, #0]
relay_control(off);
 8001614:	f7ff bfe0 	b.w	80015d8 <relay_control>
 8001618:	40021000 	.word	0x40021000

0800161c <pmic_management>:
{
 800161c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
uint8_t mc = mode_check();
 8001620:	f000 ffd2 	bl	80025c8 <mode_check>
if(system_flags & ADC_INIT_FLAG)
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <pmic_management+0x138>)
 8001626:	6813      	ldr	r3, [r2, #0]
if(system_flags & TEMP_INIT_FLAG)
 8001628:	f013 0511 	ands.w	r5, r3, #17
 800162c:	4614      	mov	r4, r2
 800162e:	f040 808e 	bne.w	800174e <pmic_management+0x132>
if((system_flags & THERM_WIRE_ERR_FLAG) | (system_flags & POWER_WIRE_ERR_FLAG))
 8001632:	f413 5fa0 	tst.w	r3, #5120	; 0x1400
 8001636:	d024      	beq.n	8001682 <pmic_management+0x66>
dac_set(0U);
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff fb81 	bl	8000d40 <dac_set>
lockout_mode();
 800163e:	f000 ff3b 	bl	80024b8 <lockout_mode>
relay_control(off);
 8001642:	4628      	mov	r0, r5
 8001644:	f7ff ffc8 	bl	80015d8 <relay_control>
if(system_flags & PMIC_ENABLE_FLAG)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	0658      	lsls	r0, r3, #25
{system_flags &= ~(PMIC_ENABLE_FLAG);}
 800164c:	bf44      	itt	mi
 800164e:	f023 0340 	bicmi.w	r3, r3, #64	; 0x40
 8001652:	6023      	strmi	r3, [r4, #0]
if(wire_error_count < 10U)
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <pmic_management+0x13c>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d878      	bhi.n	800174e <pmic_management+0x132>
check_delay+=1U;
 800165c:	4a3f      	ldr	r2, [pc, #252]	; (800175c <pmic_management+0x140>)
if(check_delay >= WIRE_ERR_DELAY)
 800165e:	4940      	ldr	r1, [pc, #256]	; (8001760 <pmic_management+0x144>)
check_delay+=1U;
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	3301      	adds	r3, #1
if(check_delay >= WIRE_ERR_DELAY)
 8001664:	428b      	cmp	r3, r1
check_delay+=1U;
 8001666:	6013      	str	r3, [r2, #0]
if(check_delay >= WIRE_ERR_DELAY)
 8001668:	d971      	bls.n	800174e <pmic_management+0x132>
system_flags &=	~(THERM_WIRE_ERR_FLAG|POWER_WIRE_ERR_FLAG);
 800166a:	6823      	ldr	r3, [r4, #0]
start_up_flags &= 0U;
 800166c:	483d      	ldr	r0, [pc, #244]	; (8001764 <pmic_management+0x148>)
system_flags &=	~(THERM_WIRE_ERR_FLAG|POWER_WIRE_ERR_FLAG);
 800166e:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
start_up_flags &= 0U;
 8001672:	2100      	movs	r1, #0
system_flags |= START_UP_FLAG;
 8001674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
start_up_flags &= 0U;
 8001678:	6001      	str	r1, [r0, #0]
system_flags |= START_UP_FLAG;
 800167a:	6023      	str	r3, [r4, #0]
check_delay = 0U;
 800167c:	6011      	str	r1, [r2, #0]
 800167e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if(system_flags & PMIC_ENABLE_FLAG)
 8001682:	0659      	lsls	r1, r3, #25
 8001684:	d55a      	bpl.n	800173c <pmic_management+0x120>
if((system_flags & PMIC_ACTION_FLAG) == 0U)
 8001686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800168a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001774 <pmic_management+0x158>
 800168e:	4f36      	ldr	r7, [pc, #216]	; (8001768 <pmic_management+0x14c>)
 8001690:	d149      	bne.n	8001726 <pmic_management+0x10a>
if(((&ov_channel)->avg) < (v_ovp - VOLTAGE_HYS))
 8001692:	4e36      	ldr	r6, [pc, #216]	; (800176c <pmic_management+0x150>)
 8001694:	4d36      	ldr	r5, [pc, #216]	; (8001770 <pmic_management+0x154>)
 8001696:	8833      	ldrh	r3, [r6, #0]
 8001698:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800169a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001778 <pmic_management+0x15c>
 800169e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 800177c <pmic_management+0x160>
 80016a2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001780 <pmic_management+0x164>
 80016a6:	3b0a      	subs	r3, #10
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d215      	bcs.n	80016d8 <pmic_management+0xbc>
if((((&cs_channel)->avg)-cs_offset) < (i_target- CURRENT_HYS))
 80016ac:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80016b0:	f8bb 2000 	ldrh.w	r2, [fp]
 80016b4:	1a9a      	subs	r2, r3, r2
 80016b6:	f8b9 3000 	ldrh.w	r3, [r9]
 80016ba:	3b19      	subs	r3, #25
 80016bc:	429a      	cmp	r2, r3
 80016be:	d202      	bcs.n	80016c6 <pmic_management+0xaa>
{duty_cycle_increment(1U);}
 80016c0:	2001      	movs	r0, #1
 80016c2:	f000 ff87 	bl	80025d4 <duty_cycle_increment>
if(((&cs_channel)->avg) < cs_offset)
 80016c6:	f8bb 3000 	ldrh.w	r3, [fp]
 80016ca:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d202      	bcs.n	80016d8 <pmic_management+0xbc>
{duty_cycle_increment(1U);}
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 ff7e 	bl	80025d4 <duty_cycle_increment>
if(((&ov_channel)->avg) > (v_ovp+VOLTAGE_HYS))
 80016d8:	8833      	ldrh	r3, [r6, #0]
 80016da:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80016dc:	330a      	adds	r3, #10
 80016de:	429a      	cmp	r2, r3
 80016e0:	d902      	bls.n	80016e8 <pmic_management+0xcc>
{duty_cycle_decrement(1U);}
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 ff9a 	bl	800261c <duty_cycle_decrement>
if((((&cs_channel)->avg)-cs_offset) > (i_target+CURRENT_HYS))
 80016e8:	f8bb 3000 	ldrh.w	r3, [fp]
 80016ec:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 80016f0:	1ad2      	subs	r2, r2, r3
 80016f2:	f8b9 3000 	ldrh.w	r3, [r9]
 80016f6:	3319      	adds	r3, #25
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d902      	bls.n	8001702 <pmic_management+0xe6>
{duty_cycle_decrement(1U);}
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 ff8d 	bl	800261c <duty_cycle_decrement>
system_flags |= PMIC_ACTION_FLAG;
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001708:	6023      	str	r3, [r4, #0]
last_pmic_action = (((system_time)->time_nums)[millis])+PMIC_DELAY;
 800170a:	f8d8 3000 	ldr.w	r3, [r8]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f103 0232 	add.w	r2, r3, #50	; 0x32
if(last_pmic_action >= 1000U)
 8001714:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
{last_pmic_action -= 1000U;}
 8001718:	bf2a      	itet	cs
 800171a:	f2a3 33b6 	subwcs	r3, r3, #950	; 0x3b6
last_pmic_action = (((system_time)->time_nums)[millis])+PMIC_DELAY;
 800171e:	603a      	strcc	r2, [r7, #0]
{last_pmic_action -= 1000U;}
 8001720:	603b      	strcs	r3, [r7, #0]
 8001722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
if((((system_time)->time_nums)[millis]) == last_pmic_action)
 8001726:	f8d8 1000 	ldr.w	r1, [r8]
 800172a:	6848      	ldr	r0, [r1, #4]
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	4288      	cmp	r0, r1
 8001730:	d10d      	bne.n	800174e <pmic_management+0x132>
{system_flags &= ~(PMIC_ACTION_FLAG);}
 8001732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
system_flags &= ~(PMIC_ACTION_FLAG);
 800173c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
if(mc == LOCKOUT_MODE)
 8001740:	2801      	cmp	r0, #1
system_flags &= ~(PMIC_ACTION_FLAG);
 8001742:	6013      	str	r3, [r2, #0]
if(mc == LOCKOUT_MODE)
 8001744:	d003      	beq.n	800174e <pmic_management+0x132>
}
 8001746:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{lockout_mode();}
 800174a:	f000 beb5 	b.w	80024b8 <lockout_mode>
 800174e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001752:	bf00      	nop
 8001754:	200005ec 	.word	0x200005ec
 8001758:	2000066e 	.word	0x2000066e
 800175c:	20000724 	.word	0x20000724
 8001760:	00030d3f 	.word	0x00030d3f
 8001764:	20000704 	.word	0x20000704
 8001768:	20000674 	.word	0x20000674
 800176c:	200005fe 	.word	0x200005fe
 8001770:	20000480 	.word	0x20000480
 8001774:	200006f8 	.word	0x200006f8
 8001778:	20000564 	.word	0x20000564
 800177c:	2000071c 	.word	0x2000071c
 8001780:	20000680 	.word	0x20000680

08001784 <convert_to_ascii>:
for(sysi=0U; sysi < 10U; sysi++)
{(((&num_hold)->string)[sysi]) = (((num)->ascii)[sysi]);}
}

void convert_to_ascii(uint32_t num)
{
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
uint8_t temp;
uint32_t copy = num;
uint32_t div = 1000000000U;
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <convert_to_ascii+0x68>)
 8001788:	4c19      	ldr	r4, [pc, #100]	; (80017f0 <convert_to_ascii+0x6c>)
 800178a:	4e1a      	ldr	r6, [pc, #104]	; (80017f4 <convert_to_ascii+0x70>)
uint32_t copy = num;
 800178c:	4601      	mov	r1, r0

for(sysi=0U; sysi < 10U; sysi++)
 800178e:	2300      	movs	r3, #0
temp = copy / div;
temp += 48U;
((&num_1)->ascii)[sysi] = temp;
}
else
{((&num_1)->ascii)[sysi] = 48U;}
 8001790:	2730      	movs	r7, #48	; 0x30

temp = copy / div;
copy -= (temp*div);
div /= 10U;
 8001792:	f04f 0e0a 	mov.w	lr, #10
for(sysi=0U; sysi < 10U; sysi++)
 8001796:	2b0a      	cmp	r3, #10
 8001798:	d10c      	bne.n	80017b4 <convert_to_ascii+0x30>
}

(&num_1)-> bin = num;

(&num_hold)->length = 10U;
 800179a:	4917      	ldr	r1, [pc, #92]	; (80017f8 <convert_to_ascii+0x74>)
(&num_1)-> bin = num;
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <convert_to_ascii+0x78>)
(&num_hold)->length = 10U;
 800179e:	700b      	strb	r3, [r1, #0]

for(sysi=0U; sysi < 10U; sysi++)
 80017a0:	2300      	movs	r3, #0
(&num_1)-> bin = num;
 80017a2:	6010      	str	r0, [r2, #0]
for(sysi=0U; sysi < 10U; sysi++)
 80017a4:	7033      	strb	r3, [r6, #0]
 80017a6:	461c      	mov	r4, r3
 80017a8:	b2d8      	uxtb	r0, r3
 80017aa:	280a      	cmp	r0, #10
 80017ac:	d116      	bne.n	80017dc <convert_to_ascii+0x58>
 80017ae:	b104      	cbz	r4, 80017b2 <convert_to_ascii+0x2e>
 80017b0:	7030      	strb	r0, [r6, #0]
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(copy > div)
 80017b4:	4291      	cmp	r1, r2
 80017b6:	fbb1 f5f2 	udiv	r5, r1, r2
 80017ba:	f103 0301 	add.w	r3, r3, #1
temp += 48U;
 80017be:	bf88      	it	hi
 80017c0:	f105 0c30 	addhi.w	ip, r5, #48	; 0x30
copy -= (temp*div);
 80017c4:	b2ed      	uxtb	r5, r5
((&num_1)->ascii)[sysi] = temp;
 80017c6:	bf8c      	ite	hi
 80017c8:	f884 c000 	strbhi.w	ip, [r4]
{((&num_1)->ascii)[sysi] = 48U;}
 80017cc:	7027      	strbls	r7, [r4, #0]
copy -= (temp*div);
 80017ce:	fb02 1115 	mls	r1, r2, r5, r1
 80017d2:	b2db      	uxtb	r3, r3
div /= 10U;
 80017d4:	fbb2 f2fe 	udiv	r2, r2, lr
 80017d8:	3401      	adds	r4, #1
 80017da:	e7dc      	b.n	8001796 <convert_to_ascii+0x12>
{(((&num_hold)->string)[sysi]) = (((&num_1)->ascii)[sysi]);}
 80017dc:	18d4      	adds	r4, r2, r3
 80017de:	18c8      	adds	r0, r1, r3
 80017e0:	7924      	ldrb	r4, [r4, #4]
 80017e2:	7044      	strb	r4, [r0, #1]
 80017e4:	3301      	adds	r3, #1
 80017e6:	2401      	movs	r4, #1
 80017e8:	e7de      	b.n	80017a8 <convert_to_ascii+0x24>
 80017ea:	bf00      	nop
 80017ec:	3b9aca00 	.word	0x3b9aca00
 80017f0:	2000031c 	.word	0x2000031c
 80017f4:	200005e4 	.word	0x200005e4
 80017f8:	20000746 	.word	0x20000746
 80017fc:	20000318 	.word	0x20000318

08001800 <string_compare>:

}


uint8_t string_compare(STRING* in1, STRING* in2)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
uint8_t match = 1U;
if(((in1)->length) == ((in2)->length))
 8001802:	780b      	ldrb	r3, [r1, #0]
 8001804:	7807      	ldrb	r7, [r0, #0]
 8001806:	42bb      	cmp	r3, r7
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	d109      	bne.n	8001822 <string_compare+0x22>
{
for(sysi=0U; sysi < ((in1)->length); sysi++)
 800180e:	4c0b      	ldr	r4, [pc, #44]	; (800183c <string_compare+0x3c>)
 8001810:	461a      	mov	r2, r3
 8001812:	7023      	strb	r3, [r4, #0]
 8001814:	461e      	mov	r6, r3
uint8_t match = 1U;
 8001816:	2301      	movs	r3, #1
 8001818:	b2d5      	uxtb	r5, r2
for(sysi=0U; sysi < ((in1)->length); sysi++)
 800181a:	42af      	cmp	r7, r5
 800181c:	d803      	bhi.n	8001826 <string_compare+0x26>
 800181e:	b106      	cbz	r6, 8001822 <string_compare+0x22>
 8001820:	7025      	strb	r5, [r4, #0]
else
{return 0U;}



}
 8001822:	4618      	mov	r0, r3
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
if((((in1)->string)[sysi]) != (((in2)->string)[sysi]))
 8001826:	1886      	adds	r6, r0, r2
 8001828:	188d      	adds	r5, r1, r2
 800182a:	7876      	ldrb	r6, [r6, #1]
 800182c:	786d      	ldrb	r5, [r5, #1]
 800182e:	3201      	adds	r2, #1
{match = 0U;}
 8001830:	42ae      	cmp	r6, r5
 8001832:	bf18      	it	ne
 8001834:	2300      	movne	r3, #0
 8001836:	2601      	movs	r6, #1
 8001838:	e7ee      	b.n	8001818 <string_compare+0x18>
 800183a:	bf00      	nop
 800183c:	200005e4 	.word	0x200005e4

08001840 <avg_samp_bank>:

void avg_samp_bank(SAMP_BANK* in)
{
	avg_dummy = 0U;
 8001840:	490b      	ldr	r1, [pc, #44]	; (8001870 <avg_samp_bank+0x30>)
 8001842:	2300      	movs	r3, #0
{
 8001844:	b530      	push	{r4, r5, lr}
	avg_dummy = 0U;
 8001846:	461a      	mov	r2, r3
 8001848:	600b      	str	r3, [r1, #0]
 800184a:	4604      	mov	r4, r0
	for(sysi=0U; sysi<SAMP_BANK_LENGTH; sysi++)
 800184c:	3201      	adds	r2, #1
	{
	((in)->samples)[sysi] = ((in)->samples)[sysi+1U];
 800184e:	6865      	ldr	r5, [r4, #4]
 8001850:	f844 5b04 	str.w	r5, [r4], #4
	for(sysi=0U; sysi<SAMP_BANK_LENGTH; sysi++)
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	2a19      	cmp	r2, #25
	avg_dummy += ((in)->samples)[sysi];
 8001858:	442b      	add	r3, r5
	for(sysi=0U; sysi<SAMP_BANK_LENGTH; sysi++)
 800185a:	d1f7      	bne.n	800184c <avg_samp_bank+0xc>
 800185c:	4c05      	ldr	r4, [pc, #20]	; (8001874 <avg_samp_bank+0x34>)
 800185e:	7022      	strb	r2, [r4, #0]
	}
	avg_dummy += ((in)->new_samp);
 8001860:	6e84      	ldr	r4, [r0, #104]	; 0x68
	((in)->samples)[(SAMP_BANK_LENGTH-1U)] = ((in)->new_samp);
 8001862:	6604      	str	r4, [r0, #96]	; 0x60
	avg_dummy += ((in)->new_samp);
 8001864:	4423      	add	r3, r4
 8001866:	600b      	str	r3, [r1, #0]
	((in)->avg) = (avg_dummy/SAMP_BANK_LENGTH);
 8001868:	fbb3 f3f2 	udiv	r3, r3, r2
 800186c:	6643      	str	r3, [r0, #100]	; 0x64
 800186e:	bd30      	pop	{r4, r5, pc}
 8001870:	20000700 	.word	0x20000700
 8001874:	200005e4 	.word	0x200005e4

08001878 <adc_management>:
{
 8001878:	b538      	push	{r3, r4, r5, lr}
if(system_flags & AVG_BANKS_FLAG)
 800187a:	4c20      	ldr	r4, [pc, #128]	; (80018fc <adc_management+0x84>)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	079a      	lsls	r2, r3, #30
 8001880:	d51a      	bpl.n	80018b8 <adc_management+0x40>
	avg_samp_bank(&cs_channel);
 8001882:	481f      	ldr	r0, [pc, #124]	; (8001900 <adc_management+0x88>)
 8001884:	f7ff ffdc 	bl	8001840 <avg_samp_bank>
	avg_samp_bank(&iv_channel);
 8001888:	481e      	ldr	r0, [pc, #120]	; (8001904 <adc_management+0x8c>)
 800188a:	f7ff ffd9 	bl	8001840 <avg_samp_bank>
	avg_samp_bank(&ov_channel);
 800188e:	481e      	ldr	r0, [pc, #120]	; (8001908 <adc_management+0x90>)
 8001890:	f7ff ffd6 	bl	8001840 <avg_samp_bank>
	system_flags &= ~(ADC_CONV_FLAG);
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	f023 0306 	bic.w	r3, r3, #6
	{system_flags &= ~(ADC_CONV_FLAG);}
 800189a:	6023      	str	r3, [r4, #0]
if(system_flags & AVG_TEMP_FLAG)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	071b      	lsls	r3, r3, #28
 80018a0:	d51c      	bpl.n	80018dc <adc_management+0x64>
avg_samp_bank(&ex_temp);
 80018a2:	481a      	ldr	r0, [pc, #104]	; (800190c <adc_management+0x94>)
 80018a4:	f7ff ffcc 	bl	8001840 <avg_samp_bank>
avg_samp_bank(&in_temp);
 80018a8:	4819      	ldr	r0, [pc, #100]	; (8001910 <adc_management+0x98>)
 80018aa:	f7ff ffc9 	bl	8001840 <avg_samp_bank>
system_flags &= ~(AVG_TEMP_FLAG);
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f023 0308 	bic.w	r3, r3, #8
last_tsamp = (((system_time)->time_nums)[millis]);
 80018b4:	6023      	str	r3, [r4, #0]
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
	if((system_flags & ADC_CONV_FLAG) == 0U)
 80018b8:	f013 0f04 	tst.w	r3, #4
 80018bc:	4a15      	ldr	r2, [pc, #84]	; (8001914 <adc_management+0x9c>)
 80018be:	d107      	bne.n	80018d0 <adc_management+0x58>
	adc_conversion_channel = 1U;
 80018c0:	2301      	movs	r3, #1
 80018c2:	6013      	str	r3, [r2, #0]
	adc1_regular_conversions();
 80018c4:	f7ff f9c6 	bl	8000c54 <adc1_regular_conversions>
	system_flags |= ADC_CONV_FLAG;
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	e7e4      	b.n	800189a <adc_management+0x22>
	if(adc_conversion_channel == 4U)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	2a04      	cmp	r2, #4
 80018d4:	d1e2      	bne.n	800189c <adc_management+0x24>
	{system_flags &= ~(ADC_CONV_FLAG);}
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	e7de      	b.n	800189a <adc_management+0x22>
if((((system_time)->time_nums)[millis]) != last_tsamp)
 80018dc:	4d0e      	ldr	r5, [pc, #56]	; (8001918 <adc_management+0xa0>)
 80018de:	4c0f      	ldr	r4, [pc, #60]	; (800191c <adc_management+0xa4>)
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d0e5      	beq.n	80018b6 <adc_management+0x3e>
inj_conversion_channel = 1U;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <adc_management+0xa8>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
adc1_inject_conversions();
 80018f0:	f7ff f9c0 	bl	8000c74 <adc1_inject_conversions>
last_tsamp = (((system_time)->time_nums)[millis]);
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	e7dc      	b.n	80018b4 <adc_management+0x3c>
 80018fa:	bf00      	nop
 80018fc:	200005ec 	.word	0x200005ec
 8001900:	20000564 	.word	0x20000564
 8001904:	20000684 	.word	0x20000684
 8001908:	20000480 	.word	0x20000480
 800190c:	20000600 	.word	0x20000600
 8001910:	200004f0 	.word	0x200004f0
 8001914:	200005dc 	.word	0x200005dc
 8001918:	200006f8 	.word	0x200006f8
 800191c:	20000560 	.word	0x20000560
 8001920:	200006f4 	.word	0x200006f4

08001924 <raise_avg_flag>:
}


void raise_avg_flag(void)
{
system_flags |= AVG_BANKS_FLAG;
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <raise_avg_flag+0x14>)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6013      	str	r3, [r2, #0]
avg_count++;
 800192e:	4a03      	ldr	r2, [pc, #12]	; (800193c <raise_avg_flag+0x18>)
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4770      	bx	lr
 8001938:	200005ec 	.word	0x200005ec
 800193c:	2000073c 	.word	0x2000073c

08001940 <raise_temp_flag>:
//((ADC1)->IER) &= ~(EOCI|EOSI);
}

void raise_temp_flag(void)
{
system_flags |= AVG_TEMP_FLAG;
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <raise_temp_flag+0x14>)
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6013      	str	r3, [r2, #0]
avg_count++;
 800194a:	4a03      	ldr	r2, [pc, #12]	; (8001958 <raise_temp_flag+0x18>)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4770      	bx	lr
 8001954:	200005ec 	.word	0x200005ec
 8001958:	2000073c 	.word	0x2000073c

0800195c <add_sample>:
}


void add_sample(uint32_t num, uint8_t inj)
{
conversion_count++;
 800195c:	4a56      	ldr	r2, [pc, #344]	; (8001ab8 <add_sample+0x15c>)
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	3301      	adds	r3, #1
{
 8001962:	b510      	push	{r4, lr}
conversion_count++;
 8001964:	6013      	str	r3, [r2, #0]


if(inj == 0U)
 8001966:	2900      	cmp	r1, #0
 8001968:	f040 808e 	bne.w	8001a88 <add_sample+0x12c>
{
switch(adc_conversion_channel)
 800196c:	4c53      	ldr	r4, [pc, #332]	; (8001abc <add_sample+0x160>)
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d07d      	beq.n	8001a70 <add_sample+0x114>
 8001974:	2b03      	cmp	r3, #3
 8001976:	f000 8081 	beq.w	8001a7c <add_sample+0x120>
 800197a:	2b01      	cmp	r3, #1
 800197c:	f040 809a 	bne.w	8001ab4 <add_sample+0x158>
{
case 1U:
cs_sample_count++;
 8001980:	494f      	ldr	r1, [pc, #316]	; (8001ac0 <add_sample+0x164>)
 8001982:	680a      	ldr	r2, [r1, #0]
 8001984:	3201      	adds	r2, #1
 8001986:	600a      	str	r2, [r1, #0]
((&cs_channel)->new_samp) = num;
 8001988:	4a4e      	ldr	r2, [pc, #312]	; (8001ac4 <add_sample+0x168>)
ov_sample_count++;
((&ov_channel)->new_samp) = num;
break;
case 3U:
iv_sample_count++;
((&iv_channel)->new_samp) = num;
 800198a:	6690      	str	r0, [r2, #104]	; 0x68
break;
default: return;
}
adc_conversion_channel++;
 800198c:	3301      	adds	r3, #1
 800198e:	6023      	str	r3, [r4, #0]
}

inj_conversion_channel++;
}

if(((system_flags & ADC_INIT_FLAG) == 0U)  && (((&cs_channel)->avg) < 300U))
 8001990:	4c4d      	ldr	r4, [pc, #308]	; (8001ac8 <add_sample+0x16c>)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	07d8      	lsls	r0, r3, #31
 8001996:	d441      	bmi.n	8001a1c <add_sample+0xc0>
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <add_sample+0x168>)
 800199a:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <add_sample+0x170>)
 800199c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80019a2:	d205      	bcs.n	80019b0 <add_sample+0x54>
{
if((cs_offset) > ((&cs_channel)->avg))
 80019a4:	8811      	ldrh	r1, [r2, #0]
 80019a6:	428b      	cmp	r3, r1
 80019a8:	d202      	bcs.n	80019b0 <add_sample+0x54>
{cs_offset = ((&cs_channel)->avg)-25U;}
 80019aa:	f1a3 0119 	sub.w	r1, r3, #25
 80019ae:	8011      	strh	r1, [r2, #0]
}

//short detection
if(((system_flags & ADC_INIT_FLAG) == 0U)){
if(((((&cs_channel)->avg)-cs_offset) > (i_target + (CURRENT_HYS)))){
 80019b0:	8812      	ldrh	r2, [r2, #0]
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <add_sample+0x174>)
 80019b6:	8812      	ldrh	r2, [r2, #0]
 80019b8:	3219      	adds	r2, #25
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d92e      	bls.n	8001a1c <add_sample+0xc0>
if((((&ov_channel)-> avg) < EXP_OUT_VOLTAGE))
 80019be:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <add_sample+0x178>)
 80019c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019c6:	d211      	bcs.n	80019ec <add_sample+0x90>
{

	lockout_mode();
 80019c8:	f000 fd76 	bl	80024b8 <lockout_mode>
	system_flags |= POWER_WIRE_ERR_FLAG;
 80019cc:	6823      	ldr	r3, [r4, #0]

	if((system_flags & POWER_WIRE_ERR_FLAG) == 0U)
	{wire_error_count += 1U; }
    if(system_flags & START_UP_FLAG)
 80019ce:	0519      	lsls	r1, r3, #20
    {
    system_flags &= ~(START_UP_FLAG);
 80019d0:	bf41      	itttt	mi
 80019d2:	f423 6300 	bicmi.w	r3, r3, #2048	; 0x800
 80019d6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80019da:	6023      	strmi	r3, [r4, #0]
    start_up_flags &= 0U;
    start_up_flags |=POWER_SHORT_FLAG;
 80019dc:	4b3e      	ldrmi	r3, [pc, #248]	; (8001ad8 <add_sample+0x17c>)
	system_flags |= POWER_WIRE_ERR_FLAG;
 80019de:	bf55      	itete	pl
 80019e0:	f443 5380 	orrpl.w	r3, r3, #4096	; 0x1000
    start_up_flags |=POWER_SHORT_FLAG;
 80019e4:	f44f 7280 	movmi.w	r2, #256	; 0x100
	system_flags |= POWER_WIRE_ERR_FLAG;
 80019e8:	6023      	strpl	r3, [r4, #0]
    start_up_flags |=POWER_SHORT_FLAG;
 80019ea:	601a      	strmi	r2, [r3, #0]
    }

}

if(((&iv_channel)->avg) < (EXP_IN_VOLTAGE))
 80019ec:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <add_sample+0x180>)
 80019ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019f0:	f240 736b 	movw	r3, #1899	; 0x76b
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d811      	bhi.n	8001a1c <add_sample+0xc0>
{
	lockout_mode();
 80019f8:	f000 fd5e 	bl	80024b8 <lockout_mode>
	system_flags |= POWER_WIRE_ERR_FLAG;
 80019fc:	6823      	ldr	r3, [r4, #0]
	if((system_flags & POWER_WIRE_ERR_FLAG) == 0U)
	{wire_error_count += 1U;}
 	if(system_flags & START_UP_FLAG)
 80019fe:	051a      	lsls	r2, r3, #20
    {
    system_flags &= ~(START_UP_FLAG);
 8001a00:	bf41      	itttt	mi
 8001a02:	f423 6300 	bicmi.w	r3, r3, #2048	; 0x800
 8001a06:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001a0a:	6023      	strmi	r3, [r4, #0]
    start_up_flags &= 0U;
    start_up_flags |=POWER_SHORT_FLAG;
 8001a0c:	4b32      	ldrmi	r3, [pc, #200]	; (8001ad8 <add_sample+0x17c>)
	system_flags |= POWER_WIRE_ERR_FLAG;
 8001a0e:	bf55      	itete	pl
 8001a10:	f443 5380 	orrpl.w	r3, r3, #4096	; 0x1000
    start_up_flags |=POWER_SHORT_FLAG;
 8001a14:	f44f 7280 	movmi.w	r2, #256	; 0x100
	system_flags |= POWER_WIRE_ERR_FLAG;
 8001a18:	6023      	strpl	r3, [r4, #0]
    start_up_flags |=POWER_SHORT_FLAG;
 8001a1a:	601a      	strmi	r2, [r3, #0]

}

}}

if((ex_sample_count > 100U) && (in_sample_count > 100U))
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <add_sample+0x184>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b64      	cmp	r3, #100	; 0x64
 8001a22:	d907      	bls.n	8001a34 <add_sample+0xd8>
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <add_sample+0x188>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b64      	cmp	r3, #100	; 0x64
{system_flags &= ~(TEMP_INIT_FLAG);}
 8001a2a:	bf82      	ittt	hi
 8001a2c:	6823      	ldrhi	r3, [r4, #0]
 8001a2e:	f023 0310 	bichi.w	r3, r3, #16
 8001a32:	6023      	strhi	r3, [r4, #0]


if((cs_sample_count > 10000U) && (ov_sample_count > 10000U) && (iv_sample_count > 10000U))
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <add_sample+0x164>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d939      	bls.n	8001ab4 <add_sample+0x158>
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <add_sample+0x18c>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d935      	bls.n	8001ab4 <add_sample+0x158>
 8001a48:	4a28      	ldr	r2, [pc, #160]	; (8001aec <add_sample+0x190>)
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d931      	bls.n	8001ab4 <add_sample+0x158>
{
system_flags &= ~(ADC_INIT_FLAG);
if(cs_offset == 0U)
 8001a50:	491e      	ldr	r1, [pc, #120]	; (8001acc <add_sample+0x170>)
system_flags &= ~(ADC_INIT_FLAG);
 8001a52:	6823      	ldr	r3, [r4, #0]
if(cs_offset == 0U)
 8001a54:	880a      	ldrh	r2, [r1, #0]
system_flags &= ~(ADC_INIT_FLAG);
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6023      	str	r3, [r4, #0]
if(cs_offset == 0U)
 8001a5c:	2a00      	cmp	r2, #0
 8001a5e:	d129      	bne.n	8001ab4 <add_sample+0x158>
{
cs_offset = (((&cs_channel)->avg)-25U);
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <add_sample+0x168>)
 8001a62:	6e52      	ldr	r2, [r2, #100]	; 0x64
system_flags |= START_UP_FLAG;
 8001a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
cs_offset = (((&cs_channel)->avg)-25U);
 8001a68:	3a19      	subs	r2, #25
 8001a6a:	800a      	strh	r2, [r1, #0]
system_flags |= START_UP_FLAG;
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	bd10      	pop	{r4, pc}
ov_sample_count++;
 8001a70:	491d      	ldr	r1, [pc, #116]	; (8001ae8 <add_sample+0x18c>)
 8001a72:	680a      	ldr	r2, [r1, #0]
 8001a74:	3201      	adds	r2, #1
 8001a76:	600a      	str	r2, [r1, #0]
((&ov_channel)->new_samp) = num;
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <add_sample+0x178>)
 8001a7a:	e786      	b.n	800198a <add_sample+0x2e>
iv_sample_count++;
 8001a7c:	491b      	ldr	r1, [pc, #108]	; (8001aec <add_sample+0x190>)
 8001a7e:	680a      	ldr	r2, [r1, #0]
 8001a80:	3201      	adds	r2, #1
 8001a82:	600a      	str	r2, [r1, #0]
((&iv_channel)->new_samp) = num;
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <add_sample+0x180>)
 8001a86:	e780      	b.n	800198a <add_sample+0x2e>
switch(inj_conversion_channel)
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <add_sample+0x194>)
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d002      	beq.n	8001a96 <add_sample+0x13a>
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d009      	beq.n	8001aa8 <add_sample+0x14c>
 8001a94:	bd10      	pop	{r4, pc}
ex_sample_count++;
 8001a96:	4c12      	ldr	r4, [pc, #72]	; (8001ae0 <add_sample+0x184>)
 8001a98:	6821      	ldr	r1, [r4, #0]
 8001a9a:	3101      	adds	r1, #1
 8001a9c:	6021      	str	r1, [r4, #0]
((&ex_temp)->new_samp) = num;
 8001a9e:	4915      	ldr	r1, [pc, #84]	; (8001af4 <add_sample+0x198>)
((&in_temp)->new_samp) = num;
 8001aa0:	6688      	str	r0, [r1, #104]	; 0x68
inj_conversion_channel++;
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e773      	b.n	8001990 <add_sample+0x34>
in_sample_count++;
 8001aa8:	4c0e      	ldr	r4, [pc, #56]	; (8001ae4 <add_sample+0x188>)
 8001aaa:	6821      	ldr	r1, [r4, #0]
 8001aac:	3101      	adds	r1, #1
 8001aae:	6021      	str	r1, [r4, #0]
((&in_temp)->new_samp) = num;
 8001ab0:	4911      	ldr	r1, [pc, #68]	; (8001af8 <add_sample+0x19c>)
 8001ab2:	e7f5      	b.n	8001aa0 <add_sample+0x144>
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200006fc 	.word	0x200006fc
 8001abc:	200005dc 	.word	0x200005dc
 8001ac0:	20000768 	.word	0x20000768
 8001ac4:	20000564 	.word	0x20000564
 8001ac8:	200005ec 	.word	0x200005ec
 8001acc:	2000071c 	.word	0x2000071c
 8001ad0:	20000680 	.word	0x20000680
 8001ad4:	20000480 	.word	0x20000480
 8001ad8:	20000704 	.word	0x20000704
 8001adc:	20000684 	.word	0x20000684
 8001ae0:	20000678 	.word	0x20000678
 8001ae4:	200005f0 	.word	0x200005f0
 8001ae8:	20000714 	.word	0x20000714
 8001aec:	200005e0 	.word	0x200005e0
 8001af0:	200006f4 	.word	0x200006f4
 8001af4:	20000600 	.word	0x20000600
 8001af8:	200004f0 	.word	0x200004f0

08001afc <dc_search>:
uart1_transmit(&prompt);

}

uint8_t dc_search(STRING* cmd)
{
 8001afc:	b508      	push	{r3, lr}
uint8_t ones;
uint8_t tens;
uint8_t new_duty;

if(((cmd)->length) != 4U)
 8001afe:	7803      	ldrb	r3, [r0, #0]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d118      	bne.n	8001b36 <dc_search+0x3a>
{return 0U;}


if( (((cmd)->string)[0U]) != 'd' )
 8001b04:	7843      	ldrb	r3, [r0, #1]
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d115      	bne.n	8001b36 <dc_search+0x3a>
{return 0U;}
if( (((cmd)->string)[1U]) != 'c' )
 8001b0a:	7883      	ldrb	r3, [r0, #2]
 8001b0c:	2b63      	cmp	r3, #99	; 0x63
 8001b0e:	d112      	bne.n	8001b36 <dc_search+0x3a>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001b10:	78c3      	ldrb	r3, [r0, #3]
 8001b12:	3b30      	subs	r3, #48	; 0x30
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	d80d      	bhi.n	8001b36 <dc_search+0x3a>
{tens = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001b1a:	7900      	ldrb	r0, [r0, #4]
 8001b1c:	3830      	subs	r0, #48	; 0x30
 8001b1e:	b2c0      	uxtb	r0, r0
 8001b20:	2809      	cmp	r0, #9
 8001b22:	d808      	bhi.n	8001b36 <dc_search+0x3a>
{ones = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

new_duty = (tens*10) + ones;
 8001b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b28:	eb00 0043 	add.w	r0, r0, r3, lsl #1

set_duty_cycle(new_duty);
 8001b2c:	b2c0      	uxtb	r0, r0
 8001b2e:	f000 fd95 	bl	800265c <set_duty_cycle>

return 1U;
 8001b32:	2001      	movs	r0, #1
 8001b34:	bd08      	pop	{r3, pc}
{return 0U;}
 8001b36:	2000      	movs	r0, #0

}
 8001b38:	bd08      	pop	{r3, pc}
	...

08001b3c <current_decode>:


uint8_t current_decode(STRING* cmd)
{
 8001b3c:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_current;

if(((cmd)->length) != 6U)
 8001b3e:	7803      	ldrb	r3, [r0, #0]
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d133      	bne.n	8001bac <current_decode+0x70>
{return 0U;}


if( (((cmd)->string)[0U]) != 'i' )
 8001b44:	7843      	ldrb	r3, [r0, #1]
 8001b46:	2b69      	cmp	r3, #105	; 0x69
 8001b48:	d130      	bne.n	8001bac <current_decode+0x70>
{return 0U;}
if( (((cmd)->string)[1U]) != 's' )
 8001b4a:	7883      	ldrb	r3, [r0, #2]
 8001b4c:	2b73      	cmp	r3, #115	; 0x73
 8001b4e:	d12d      	bne.n	8001bac <current_decode+0x70>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001b50:	78c3      	ldrb	r3, [r0, #3]
 8001b52:	3b30      	subs	r3, #48	; 0x30
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	2a09      	cmp	r2, #9
 8001b58:	d828      	bhi.n	8001bac <current_decode+0x70>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001b5a:	7904      	ldrb	r4, [r0, #4]
 8001b5c:	3c30      	subs	r4, #48	; 0x30
 8001b5e:	b2e2      	uxtb	r2, r4
 8001b60:	2a09      	cmp	r2, #9
 8001b62:	d823      	bhi.n	8001bac <current_decode+0x70>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001b64:	7942      	ldrb	r2, [r0, #5]
 8001b66:	3a30      	subs	r2, #48	; 0x30
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	2a09      	cmp	r2, #9
 8001b6c:	d81e      	bhi.n	8001bac <current_decode+0x70>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001b6e:	7981      	ldrb	r1, [r0, #6]
 8001b70:	3930      	subs	r1, #48	; 0x30
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	2909      	cmp	r1, #9
 8001b76:	d819      	bhi.n	8001bac <current_decode+0x70>
else
{return 0U;}



new_current = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001b78:	2064      	movs	r0, #100	; 0x64
 8001b7a:	4344      	muls	r4, r0
 8001b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b80:	fb00 4303 	mla	r3, r0, r3, r4
 8001b84:	440b      	add	r3, r1
 8001b86:	210a      	movs	r1, #10
 8001b88:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_current > DEFAULT_MAX_CURRENT)
 8001b8c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <current_decode+0x74>)
{hs_i_target = DEFAULT_MAX_CURRENT;}
 8001b92:	bf86      	itte	hi
 8001b94:	f44f 6116 	movhi.w	r1, #2400	; 0x960
 8001b98:	8011      	strhhi	r1, [r2, #0]
else
{hs_i_target = new_current;}
 8001b9a:	8013      	strhls	r3, [r2, #0]

if((system_flags & THERMAL_CON_FLAG) == 0U)
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <current_decode+0x78>)
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	05d2      	lsls	r2, r2, #23
 8001ba2:	d401      	bmi.n	8001ba8 <current_decode+0x6c>
{i_target = new_current;}
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <current_decode+0x7c>)
 8001ba6:	8013      	strh	r3, [r2, #0]

return 1U;
 8001ba8:	2001      	movs	r0, #1

}
 8001baa:	bd10      	pop	{r4, pc}
{return 0U;}
 8001bac:	2000      	movs	r0, #0
 8001bae:	bd10      	pop	{r4, pc}
 8001bb0:	2000055c 	.word	0x2000055c
 8001bb4:	200005ec 	.word	0x200005ec
 8001bb8:	20000680 	.word	0x20000680

08001bbc <voltage_decode>:


uint8_t voltage_decode(STRING* cmd)
{
 8001bbc:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_voltage;

if(((cmd)->length) != 6U)
 8001bbe:	7803      	ldrb	r3, [r0, #0]
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d12c      	bne.n	8001c1e <voltage_decode+0x62>
{return 0U;}


if( (((cmd)->string)[0U]) != 'v' )
 8001bc4:	7843      	ldrb	r3, [r0, #1]
 8001bc6:	2b76      	cmp	r3, #118	; 0x76
 8001bc8:	d129      	bne.n	8001c1e <voltage_decode+0x62>
{return 0U;}
if( (((cmd)->string)[1U]) != 's' )
 8001bca:	7883      	ldrb	r3, [r0, #2]
 8001bcc:	2b73      	cmp	r3, #115	; 0x73
 8001bce:	d126      	bne.n	8001c1e <voltage_decode+0x62>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001bd0:	78c3      	ldrb	r3, [r0, #3]
 8001bd2:	3b30      	subs	r3, #48	; 0x30
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	2a09      	cmp	r2, #9
 8001bd8:	d821      	bhi.n	8001c1e <voltage_decode+0x62>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001bda:	7904      	ldrb	r4, [r0, #4]
 8001bdc:	3c30      	subs	r4, #48	; 0x30
 8001bde:	b2e2      	uxtb	r2, r4
 8001be0:	2a09      	cmp	r2, #9
 8001be2:	d81c      	bhi.n	8001c1e <voltage_decode+0x62>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001be4:	7942      	ldrb	r2, [r0, #5]
 8001be6:	3a30      	subs	r2, #48	; 0x30
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	2a09      	cmp	r2, #9
 8001bec:	d817      	bhi.n	8001c1e <voltage_decode+0x62>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001bee:	7981      	ldrb	r1, [r0, #6]
 8001bf0:	3930      	subs	r1, #48	; 0x30
 8001bf2:	b2c9      	uxtb	r1, r1
 8001bf4:	2909      	cmp	r1, #9
 8001bf6:	d812      	bhi.n	8001c1e <voltage_decode+0x62>
else
{return 0U;}



new_voltage = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001bf8:	2064      	movs	r0, #100	; 0x64
 8001bfa:	4344      	muls	r4, r0
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	fb00 4303 	mla	r3, r0, r3, r4
 8001c04:	440b      	add	r3, r1
 8001c06:	210a      	movs	r1, #10
 8001c08:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_voltage > DEFAULT_MAX_VOLTAGE)
 8001c0c:	f640 4199 	movw	r1, #3225	; 0xc99
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <voltage_decode+0x68>)
 8001c12:	428b      	cmp	r3, r1
{v_ovp = DEFAULT_MAX_VOLTAGE;}
 8001c14:	bf8c      	ite	hi
 8001c16:	8011      	strhhi	r1, [r2, #0]
else
{v_ovp = new_voltage;}
 8001c18:	8013      	strhls	r3, [r2, #0]


return 1U;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	bd10      	pop	{r4, pc}
{return 0U;}
 8001c1e:	2000      	movs	r0, #0

}
 8001c20:	bd10      	pop	{r4, pc}
 8001c22:	bf00      	nop
 8001c24:	200005fe 	.word	0x200005fe

08001c28 <exp_voltage_decode>:

uint8_t exp_voltage_decode(STRING* cmd)
{
 8001c28:	b510      	push	{r4, lr}
uint8_t tens;
uint32_t hundreds;
uint32_t thousands;
uint32_t new_voltage;

if(((cmd)->length) != 6U)
 8001c2a:	7803      	ldrb	r3, [r0, #0]
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d12c      	bne.n	8001c8a <exp_voltage_decode+0x62>
{return 0U;}


if( (((cmd)->string)[0U]) != 'e' )
 8001c30:	7843      	ldrb	r3, [r0, #1]
 8001c32:	2b65      	cmp	r3, #101	; 0x65
 8001c34:	d129      	bne.n	8001c8a <exp_voltage_decode+0x62>
{return 0U;}
if( (((cmd)->string)[1U]) != 'v' )
 8001c36:	7883      	ldrb	r3, [r0, #2]
 8001c38:	2b76      	cmp	r3, #118	; 0x76
 8001c3a:	d126      	bne.n	8001c8a <exp_voltage_decode+0x62>
{return 0U;}

if( ((((cmd)->string)[2U]) > 47U) && ((((cmd)->string)[2U]) < 58U ) )
 8001c3c:	78c3      	ldrb	r3, [r0, #3]
 8001c3e:	3b30      	subs	r3, #48	; 0x30
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	2a09      	cmp	r2, #9
 8001c44:	d821      	bhi.n	8001c8a <exp_voltage_decode+0x62>
{thousands = (((cmd)->string)[2U]) - 48U; }
else
{return 0U;}

if( ((((cmd)->string)[3U]) > 47U) && ((((cmd)->string)[3U]) < 58U ) )
 8001c46:	7904      	ldrb	r4, [r0, #4]
 8001c48:	3c30      	subs	r4, #48	; 0x30
 8001c4a:	b2e2      	uxtb	r2, r4
 8001c4c:	2a09      	cmp	r2, #9
 8001c4e:	d81c      	bhi.n	8001c8a <exp_voltage_decode+0x62>
{hundreds = (((cmd)->string)[3U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[4U]) > 47U) && ((((cmd)->string)[4U]) < 58U ) )
 8001c50:	7942      	ldrb	r2, [r0, #5]
 8001c52:	3a30      	subs	r2, #48	; 0x30
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	2a09      	cmp	r2, #9
 8001c58:	d817      	bhi.n	8001c8a <exp_voltage_decode+0x62>
{tens = (((cmd)->string)[4U]) - 48U;}
else
{return 0U;}

if( ((((cmd)->string)[5U]) > 47U) && ((((cmd)->string)[5U]) < 58U ) )
 8001c5a:	7981      	ldrb	r1, [r0, #6]
 8001c5c:	3930      	subs	r1, #48	; 0x30
 8001c5e:	b2c9      	uxtb	r1, r1
 8001c60:	2909      	cmp	r1, #9
 8001c62:	d812      	bhi.n	8001c8a <exp_voltage_decode+0x62>
else
{return 0U;}



new_voltage = (thousands*1000)+(hundreds * 100) + (tens*10) + ones;
 8001c64:	2064      	movs	r0, #100	; 0x64
 8001c66:	4344      	muls	r4, r0
 8001c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6c:	fb00 4303 	mla	r3, r0, r3, r4
 8001c70:	440b      	add	r3, r1
 8001c72:	210a      	movs	r1, #10
 8001c74:	fb11 3302 	smlabb	r3, r1, r2, r3

if(new_voltage > DEFAULT_MAX_VOLTAGE)
 8001c78:	f640 4199 	movw	r1, #3225	; 0xc99
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <exp_voltage_decode+0x68>)
 8001c7e:	428b      	cmp	r3, r1
{exp_ov = DEFAULT_MAX_VOLTAGE;}
 8001c80:	bf8c      	ite	hi
 8001c82:	8011      	strhhi	r1, [r2, #0]
else
{exp_ov = new_voltage;}
 8001c84:	8013      	strhls	r3, [r2, #0]


return 1U;
 8001c86:	2001      	movs	r0, #1
 8001c88:	bd10      	pop	{r4, pc}
{return 0U;}
 8001c8a:	2000      	movs	r0, #0

}
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop
 8001c90:	200005fc 	.word	0x200005fc

08001c94 <flagclear>:



void flagclear(void)
{
system_flags &= ~(ADC_CONV_FLAG);
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <flagclear+0x10>)
uart1_transmit(&money);
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <flagclear+0x14>)
system_flags &= ~(ADC_CONV_FLAG);
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 8001ca0:	f000 bd3a 	b.w	8002718 <uart1_transmit>
 8001ca4:	200005ec 	.word	0x200005ec
 8001ca8:	200002f7 	.word	0x200002f7

08001cac <tempreport>:
}


void tempreport(void)
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
	int32_t temp;
	uart1_transmit(&capE);
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <tempreport+0x40>)
	temp = (&ex_temp)->avg;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001cb0:	4d0f      	ldr	r5, [pc, #60]	; (8001cf0 <tempreport+0x44>)
	uart1_transmit(&cli_return);
 8001cb2:	4c10      	ldr	r4, [pc, #64]	; (8001cf4 <tempreport+0x48>)
	uart1_transmit(&capE);
 8001cb4:	f000 fd30 	bl	8002718 <uart1_transmit>
	temp = (&ex_temp)->avg;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <tempreport+0x4c>)
	convert_to_ascii(temp);
 8001cba:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001cbc:	f7ff fd62 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f000 fd29 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f000 fd26 	bl	8002718 <uart1_transmit>

	uart1_transmit(&capI);
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <tempreport+0x50>)
 8001cce:	f000 fd23 	bl	8002718 <uart1_transmit>
	temp = (&in_temp)->avg;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <tempreport+0x54>)
	convert_to_ascii(temp);
 8001cd4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001cd6:	f7ff fd55 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f000 fd1c 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ce0:	4620      	mov	r0, r4

}
 8001ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 8001ce6:	f000 bd17 	b.w	8002718 <uart1_transmit>
 8001cea:	bf00      	nop
 8001cec:	200000a5 	.word	0x200000a5
 8001cf0:	20000746 	.word	0x20000746
 8001cf4:	20000108 	.word	0x20000108
 8001cf8:	20000600 	.word	0x20000600
 8001cfc:	200000c6 	.word	0x200000c6
 8001d00:	200004f0 	.word	0x200004f0

08001d04 <tim1report>:

void tim1report(void)
{
 8001d04:	b510      	push	{r4, lr}
	uint32_t temp;

	temp = ((TIM1)->ARR);
 8001d06:	4c31      	ldr	r4, [pc, #196]	; (8001dcc <tim1report+0xc8>)
 8001d08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	convert_to_ascii(temp);
 8001d0a:	f7ff fd3b 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d0e:	4830      	ldr	r0, [pc, #192]	; (8001dd0 <tim1report+0xcc>)
 8001d10:	f000 fd02 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d14:	482f      	ldr	r0, [pc, #188]	; (8001dd4 <tim1report+0xd0>)
 8001d16:	f000 fcff 	bl	8002718 <uart1_transmit>


	temp = ((TIM1)->CCR1);
 8001d1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
	convert_to_ascii(temp);
 8001d1c:	f7ff fd32 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d20:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <tim1report+0xcc>)
 8001d22:	f000 fcf9 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d26:	482b      	ldr	r0, [pc, #172]	; (8001dd4 <tim1report+0xd0>)
 8001d28:	f000 fcf6 	bl	8002718 <uart1_transmit>

    temp = ((TIM1)->CCR3);
 8001d2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	convert_to_ascii(temp);
 8001d2e:	f7ff fd29 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d32:	4827      	ldr	r0, [pc, #156]	; (8001dd0 <tim1report+0xcc>)
 8001d34:	f000 fcf0 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d38:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <tim1report+0xd0>)
 8001d3a:	f000 fced 	bl	8002718 <uart1_transmit>


	temp = ((TIM1)->SR);
 8001d3e:	6920      	ldr	r0, [r4, #16]
	convert_to_ascii(temp);
 8001d40:	f7ff fd20 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d44:	4822      	ldr	r0, [pc, #136]	; (8001dd0 <tim1report+0xcc>)
 8001d46:	f000 fce7 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d4a:	4822      	ldr	r0, [pc, #136]	; (8001dd4 <tim1report+0xd0>)
 8001d4c:	f000 fce4 	bl	8002718 <uart1_transmit>

	temp = ((TIM1)->CCMR1);
 8001d50:	69a0      	ldr	r0, [r4, #24]
	convert_to_ascii(temp);
 8001d52:	f7ff fd17 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d56:	481e      	ldr	r0, [pc, #120]	; (8001dd0 <tim1report+0xcc>)
 8001d58:	f000 fcde 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d5c:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <tim1report+0xd0>)
 8001d5e:	f000 fcdb 	bl	8002718 <uart1_transmit>

	temp = ((TIM1)->CCMR2);
 8001d62:	69e0      	ldr	r0, [r4, #28]
	convert_to_ascii(temp);
 8001d64:	f7ff fd0e 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <tim1report+0xcc>)
 8001d6a:	f000 fcd5 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d6e:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <tim1report+0xd0>)
 8001d70:	f000 fcd2 	bl	8002718 <uart1_transmit>


	temp = ((TIM1)->CCMR1);
 8001d74:	69a0      	ldr	r0, [r4, #24]
	convert_to_ascii(temp);
 8001d76:	f7ff fd05 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d7a:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <tim1report+0xcc>)
 8001d7c:	f000 fccc 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d80:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <tim1report+0xd0>)
 8001d82:	f000 fcc9 	bl	8002718 <uart1_transmit>

	temp = ((TIM1)->CR1);
 8001d86:	6820      	ldr	r0, [r4, #0]
	convert_to_ascii(temp);
 8001d88:	f7ff fcfc 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <tim1report+0xcc>)
 8001d8e:	f000 fcc3 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <tim1report+0xd0>)
 8001d94:	f000 fcc0 	bl	8002718 <uart1_transmit>

	temp = mode_check();
 8001d98:	f000 fc16 	bl	80025c8 <mode_check>

	switch(temp)
 8001d9c:	3801      	subs	r0, #1
 8001d9e:	2803      	cmp	r0, #3
 8001da0:	d811      	bhi.n	8001dc6 <tim1report+0xc2>
 8001da2:	e8df f000 	tbb	[pc, r0]
 8001da6:	0a02      	.short	0x0a02
 8001da8:	0e0c      	.short	0x0e0c
	{
	case LOCKOUT_MODE:uart1_transmit(&lock); break;
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <tim1report+0xd4>)
	case PASSTHRU_MODE:uart1_transmit(&pass); break;
	case BOOST_MODE:uart1_transmit(&boost); break;
	case BUCK_MODE:uart1_transmit(&buck); break;
	default:uart1_transmit(&cp1); break;
 8001dac:	f000 fcb4 	bl	8002718 <uart1_transmit>
	}

	uart1_transmit(&cli_return);
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <tim1report+0xd0>)
}
 8001db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uart1_transmit(&cli_return);
 8001db6:	f000 bcaf 	b.w	8002718 <uart1_transmit>
	case PASSTHRU_MODE:uart1_transmit(&pass); break;
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <tim1report+0xd8>)
 8001dbc:	e7f6      	b.n	8001dac <tim1report+0xa8>
	case BOOST_MODE:uart1_transmit(&boost); break;
 8001dbe:	4808      	ldr	r0, [pc, #32]	; (8001de0 <tim1report+0xdc>)
 8001dc0:	e7f4      	b.n	8001dac <tim1report+0xa8>
	case BUCK_MODE:uart1_transmit(&buck); break;
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <tim1report+0xe0>)
 8001dc4:	e7f2      	b.n	8001dac <tim1report+0xa8>
	default:uart1_transmit(&cp1); break;
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <tim1report+0xe4>)
 8001dc8:	e7f0      	b.n	8001dac <tim1report+0xa8>
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	20000746 	.word	0x20000746
 8001dd4:	20000108 	.word	0x20000108
 8001dd8:	200002d6 	.word	0x200002d6
 8001ddc:	20000328 	.word	0x20000328
 8001de0:	20000042 	.word	0x20000042
 8001de4:	20000063 	.word	0x20000063
 8001de8:	2000014a 	.word	0x2000014a

08001dec <voltreport>:

void voltreport(void)
{
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t temp;


	uart1_transmit(&capC);
 8001dee:	4f1d      	ldr	r7, [pc, #116]	; (8001e64 <voltreport+0x78>)
	temp = (cs_channel.avg- cs_offset);
 8001df0:	4e1d      	ldr	r6, [pc, #116]	; (8001e68 <voltreport+0x7c>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001df2:	4d1e      	ldr	r5, [pc, #120]	; (8001e6c <voltreport+0x80>)
	uart1_transmit(&cli_return);
 8001df4:	4c1e      	ldr	r4, [pc, #120]	; (8001e70 <voltreport+0x84>)
	uart1_transmit(&capC);
 8001df6:	4638      	mov	r0, r7
 8001df8:	f000 fc8e 	bl	8002718 <uart1_transmit>
	temp = (cs_channel.avg- cs_offset);
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <voltreport+0x88>)
 8001dfe:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8001e00:	881b      	ldrh	r3, [r3, #0]
	convert_to_ascii(temp);
 8001e02:	1ac0      	subs	r0, r0, r3
 8001e04:	f7ff fcbe 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f000 fc85 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 fc82 	bl	8002718 <uart1_transmit>


	uart1_transmit(&capC);
 8001e14:	4638      	mov	r0, r7
 8001e16:	f000 fc7f 	bl	8002718 <uart1_transmit>
	temp = (cs_channel.avg);
	convert_to_ascii(temp);
 8001e1a:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8001e1c:	f7ff fcb2 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e20:	4628      	mov	r0, r5
 8001e22:	f000 fc79 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f000 fc76 	bl	8002718 <uart1_transmit>



	uart1_transmit(&capO);
 8001e2c:	4812      	ldr	r0, [pc, #72]	; (8001e78 <voltreport+0x8c>)
 8001e2e:	f000 fc73 	bl	8002718 <uart1_transmit>
	temp = ov_channel.avg;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <voltreport+0x90>)
	convert_to_ascii(temp);
 8001e34:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001e36:	f7ff fca5 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f000 fc6c 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e40:	4620      	mov	r0, r4
 8001e42:	f000 fc69 	bl	8002718 <uart1_transmit>

	uart1_transmit(&capI);
 8001e46:	480e      	ldr	r0, [pc, #56]	; (8001e80 <voltreport+0x94>)
 8001e48:	f000 fc66 	bl	8002718 <uart1_transmit>
	temp = iv_channel.avg;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <voltreport+0x98>)
	convert_to_ascii(temp);
 8001e4e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001e50:	f7ff fc98 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e54:	4628      	mov	r0, r5
 8001e56:	f000 fc5f 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e5a:	4620      	mov	r0, r4
}
 8001e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	uart1_transmit(&cli_return);
 8001e60:	f000 bc5a 	b.w	8002718 <uart1_transmit>
 8001e64:	20000084 	.word	0x20000084
 8001e68:	20000564 	.word	0x20000564
 8001e6c:	20000746 	.word	0x20000746
 8001e70:	20000108 	.word	0x20000108
 8001e74:	2000071c 	.word	0x2000071c
 8001e78:	200000e7 	.word	0x200000e7
 8001e7c:	20000480 	.word	0x20000480
 8001e80:	200000c6 	.word	0x200000c6
 8001e84:	20000684 	.word	0x20000684

08001e88 <timereport>:

void timereport(void)
{
 8001e88:	b570      	push	{r4, r5, r6, lr}
	uint32_t temp;

	temp = (((system_time)->time_nums)[ticks]);
 8001e8a:	4e1b      	ldr	r6, [pc, #108]	; (8001ef8 <timereport+0x70>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001e8c:	4d1b      	ldr	r5, [pc, #108]	; (8001efc <timereport+0x74>)
	temp = (((system_time)->time_nums)[ticks]);
 8001e8e:	6833      	ldr	r3, [r6, #0]
	uart1_transmit(&cli_return);
 8001e90:	4c1b      	ldr	r4, [pc, #108]	; (8001f00 <timereport+0x78>)
	convert_to_ascii(temp);
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f7ff fc76 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001e98:	4628      	mov	r0, r5
 8001e9a:	f000 fc3d 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f000 fc3a 	bl	8002718 <uart1_transmit>

	temp = (((system_time)->time_nums)[millis]);
 8001ea4:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8001ea6:	6858      	ldr	r0, [r3, #4]
 8001ea8:	f7ff fc6c 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 fc33 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 fc30 	bl	8002718 <uart1_transmit>

	temp = (((system_time)->time_nums)[seconds]);
 8001eb8:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	f7ff fc62 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f000 fc29 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f000 fc26 	bl	8002718 <uart1_transmit>

	temp = (((system_time)->time_nums)[minutes]);
 8001ecc:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8001ece:	68d8      	ldr	r0, [r3, #12]
 8001ed0:	f7ff fc58 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f000 fc1f 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001eda:	4620      	mov	r0, r4
 8001edc:	f000 fc1c 	bl	8002718 <uart1_transmit>

	temp = (((system_time)->time_nums)[hours]);
 8001ee0:	6833      	ldr	r3, [r6, #0]
	convert_to_ascii(temp);
 8001ee2:	6918      	ldr	r0, [r3, #16]
 8001ee4:	f7ff fc4e 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f000 fc15 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001eee:	4620      	mov	r0, r4
}
 8001ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart1_transmit(&cli_return);
 8001ef4:	f000 bc10 	b.w	8002718 <uart1_transmit>
 8001ef8:	200006f8 	.word	0x200006f8
 8001efc:	20000746 	.word	0x20000746
 8001f00:	20000108 	.word	0x20000108

08001f04 <bankreport>:


void bankreport(void)
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	uart1_transmit(&capC);
 8001f06:	4815      	ldr	r0, [pc, #84]	; (8001f5c <bankreport+0x58>)
	temp = cs_sample_count;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001f08:	4d15      	ldr	r5, [pc, #84]	; (8001f60 <bankreport+0x5c>)
	uart1_transmit(&cli_return);
 8001f0a:	4c16      	ldr	r4, [pc, #88]	; (8001f64 <bankreport+0x60>)
	uart1_transmit(&capC);
 8001f0c:	f000 fc04 	bl	8002718 <uart1_transmit>
	temp = cs_sample_count;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <bankreport+0x64>)
	convert_to_ascii(temp);
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f7ff fc36 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 fbfd 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f000 fbfa 	bl	8002718 <uart1_transmit>

	uart1_transmit(&capO);
 8001f24:	4811      	ldr	r0, [pc, #68]	; (8001f6c <bankreport+0x68>)
 8001f26:	f000 fbf7 	bl	8002718 <uart1_transmit>
	temp = ov_sample_count;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <bankreport+0x6c>)
	convert_to_ascii(temp);
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f7ff fc29 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f32:	4628      	mov	r0, r5
 8001f34:	f000 fbf0 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 fbed 	bl	8002718 <uart1_transmit>

	uart1_transmit(&capI);
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <bankreport+0x70>)
 8001f40:	f000 fbea 	bl	8002718 <uart1_transmit>
	temp = iv_sample_count;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <bankreport+0x74>)
	convert_to_ascii(temp);
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	f7ff fc1c 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f000 fbe3 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f52:	4620      	mov	r0, r4

}
 8001f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 8001f58:	f000 bbde 	b.w	8002718 <uart1_transmit>
 8001f5c:	20000084 	.word	0x20000084
 8001f60:	20000746 	.word	0x20000746
 8001f64:	20000108 	.word	0x20000108
 8001f68:	20000768 	.word	0x20000768
 8001f6c:	200000e7 	.word	0x200000e7
 8001f70:	20000714 	.word	0x20000714
 8001f74:	200000c6 	.word	0x200000c6
 8001f78:	200005e0 	.word	0x200005e0

08001f7c <flagreport>:


void flagreport(void)
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	temp = system_flags;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <flagreport+0x70>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8001f80:	4d1b      	ldr	r5, [pc, #108]	; (8001ff0 <flagreport+0x74>)
	uart1_transmit(&cli_return);
 8001f82:	4c1c      	ldr	r4, [pc, #112]	; (8001ff4 <flagreport+0x78>)
	convert_to_ascii(temp);
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	f7ff fbfd 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f000 fbc4 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f000 fbc1 	bl	8002718 <uart1_transmit>

	temp = adc_conversion_channel;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <flagreport+0x7c>)
	convert_to_ascii(temp);
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f7ff fbf3 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f000 fbba 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f000 fbb7 	bl	8002718 <uart1_transmit>


	temp = hs_i_target;
	convert_to_ascii(temp);
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <flagreport+0x80>)
 8001fac:	8818      	ldrh	r0, [r3, #0]
 8001fae:	f7ff fbe9 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f000 fbb0 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 fbad 	bl	8002718 <uart1_transmit>

	temp = th_i_target;
	convert_to_ascii(temp);
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <flagreport+0x84>)
 8001fc0:	8818      	ldrh	r0, [r3, #0]
 8001fc2:	f7ff fbdf 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	f000 fba6 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f000 fba3 	bl	8002718 <uart1_transmit>

	temp = i_target;
	convert_to_ascii(temp);
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <flagreport+0x88>)
 8001fd4:	8818      	ldrh	r0, [r3, #0]
 8001fd6:	f7ff fbd5 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f000 fb9c 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8001fe0:	4620      	mov	r0, r4


}
 8001fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 8001fe6:	f000 bb97 	b.w	8002718 <uart1_transmit>
 8001fea:	bf00      	nop
 8001fec:	200005ec 	.word	0x200005ec
 8001ff0:	20000746 	.word	0x20000746
 8001ff4:	20000108 	.word	0x20000108
 8001ff8:	200005dc 	.word	0x200005dc
 8001ffc:	2000055c 	.word	0x2000055c
 8002000:	20000744 	.word	0x20000744
 8002004:	20000680 	.word	0x20000680

08002008 <convreport>:

void convreport(void)
{
 8002008:	b538      	push	{r3, r4, r5, lr}
	uint32_t temp;
	temp = conversion_count;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <convreport+0x48>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 800200c:	4d11      	ldr	r5, [pc, #68]	; (8002054 <convreport+0x4c>)
	convert_to_ascii(temp);
 800200e:	6818      	ldr	r0, [r3, #0]
	uart1_transmit(&cli_return);
 8002010:	4c11      	ldr	r4, [pc, #68]	; (8002058 <convreport+0x50>)
	convert_to_ascii(temp);
 8002012:	f7ff fbb7 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002016:	4628      	mov	r0, r5
 8002018:	f000 fb7e 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 800201c:	4620      	mov	r0, r4
 800201e:	f000 fb7b 	bl	8002718 <uart1_transmit>

	temp = avg_count;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <convreport+0x54>)
	convert_to_ascii(temp);
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	f7ff fbad 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800202a:	4628      	mov	r0, r5
 800202c:	f000 fb74 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002030:	4620      	mov	r0, r4
 8002032:	f000 fb71 	bl	8002718 <uart1_transmit>

	temp = ((ADC1)->SQR1);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <convreport+0x58>)
 8002038:	6b18      	ldr	r0, [r3, #48]	; 0x30
	convert_to_ascii(temp);
 800203a:	f7ff fba3 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800203e:	4628      	mov	r0, r5
 8002040:	f000 fb6a 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002044:	4620      	mov	r0, r4



}
 8002046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 800204a:	f000 bb65 	b.w	8002718 <uart1_transmit>
 800204e:	bf00      	nop
 8002050:	200006fc 	.word	0x200006fc
 8002054:	20000746 	.word	0x20000746
 8002058:	20000108 	.word	0x20000108
 800205c:	2000073c 	.word	0x2000073c
 8002060:	50040000 	.word	0x50040000

08002064 <tbankreport>:

void tbankreport(void)
{
 8002064:	b538      	push	{r3, r4, r5, lr}

	uint32_t temp;

	uart1_transmit(&capE);
 8002066:	480f      	ldr	r0, [pc, #60]	; (80020a4 <tbankreport+0x40>)
	temp = ex_sample_count;
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8002068:	4d0f      	ldr	r5, [pc, #60]	; (80020a8 <tbankreport+0x44>)
	uart1_transmit(&cli_return);
 800206a:	4c10      	ldr	r4, [pc, #64]	; (80020ac <tbankreport+0x48>)
	uart1_transmit(&capE);
 800206c:	f000 fb54 	bl	8002718 <uart1_transmit>
	temp = ex_sample_count;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <tbankreport+0x4c>)
	convert_to_ascii(temp);
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	f7ff fb86 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002078:	4628      	mov	r0, r5
 800207a:	f000 fb4d 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 800207e:	4620      	mov	r0, r4
 8002080:	f000 fb4a 	bl	8002718 <uart1_transmit>

	uart1_transmit(&capI);
 8002084:	480b      	ldr	r0, [pc, #44]	; (80020b4 <tbankreport+0x50>)
 8002086:	f000 fb47 	bl	8002718 <uart1_transmit>
	temp = in_sample_count;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <tbankreport+0x54>)
	convert_to_ascii(temp);
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f7ff fb79 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002092:	4628      	mov	r0, r5
 8002094:	f000 fb40 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002098:	4620      	mov	r0, r4
}
 800209a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart1_transmit(&cli_return);
 800209e:	f000 bb3b 	b.w	8002718 <uart1_transmit>
 80020a2:	bf00      	nop
 80020a4:	200000a5 	.word	0x200000a5
 80020a8:	20000746 	.word	0x20000746
 80020ac:	20000108 	.word	0x20000108
 80020b0:	20000678 	.word	0x20000678
 80020b4:	200000c6 	.word	0x200000c6
 80020b8:	200005f0 	.word	0x200005f0

080020bc <stupreport>:

void stupreport(void)
{
 80020bc:	b508      	push	{r3, lr}
	uint32_t temp;

	temp = start_up_flags;
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <stupreport+0x1c>)
	convert_to_ascii(temp);
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	f7ff fb5f 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <stupreport+0x20>)
 80020c8:	f000 fb26 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <stupreport+0x24>)

}
 80020ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart1_transmit(&cli_return);
 80020d2:	f000 bb21 	b.w	8002718 <uart1_transmit>
 80020d6:	bf00      	nop
 80020d8:	20000704 	.word	0x20000704
 80020dc:	20000746 	.word	0x20000746
 80020e0:	20000108 	.word	0x20000108

080020e4 <dacreport>:

void dacreport(void)
{
 80020e4:	b508      	push	{r3, lr}
	uint32_t temp;

	temp = ((DAC)->DOR2);
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <dacreport+0x1c>)
 80020e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
	convert_to_ascii(temp);
 80020ea:	f7ff fb4b 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <dacreport+0x20>)
 80020f0:	f000 fb12 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <dacreport+0x24>)


}
 80020f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart1_transmit(&cli_return);
 80020fa:	f000 bb0d 	b.w	8002718 <uart1_transmit>
 80020fe:	bf00      	nop
 8002100:	40007400 	.word	0x40007400
 8002104:	20000746 	.word	0x20000746
 8002108:	20000108 	.word	0x20000108

0800210c <adcreport>:

void adcreport(void)
{
 800210c:	b570      	push	{r4, r5, r6, lr}

	uint32_t temp;

	temp = ((ADC1)->TR1)&0x0000FFFF;
 800210e:	4e15      	ldr	r6, [pc, #84]	; (8002164 <adcreport+0x58>)
	convert_to_ascii(temp);
	uart1_transmit(&num_hold);
 8002110:	4d15      	ldr	r5, [pc, #84]	; (8002168 <adcreport+0x5c>)
	temp = ((ADC1)->TR1)&0x0000FFFF;
 8002112:	6a30      	ldr	r0, [r6, #32]
	uart1_transmit(&cli_return);
 8002114:	4c15      	ldr	r4, [pc, #84]	; (800216c <adcreport+0x60>)
	convert_to_ascii(temp);
 8002116:	b280      	uxth	r0, r0
 8002118:	f7ff fb34 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 800211c:	4628      	mov	r0, r5
 800211e:	f000 fafb 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002122:	4620      	mov	r0, r4
 8002124:	f000 faf8 	bl	8002718 <uart1_transmit>

	temp = (((ADC1)->TR1)>>16U)&0x0000FFFF;
 8002128:	6a30      	ldr	r0, [r6, #32]
	convert_to_ascii(temp);
 800212a:	0c00      	lsrs	r0, r0, #16
 800212c:	f7ff fb2a 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002130:	4628      	mov	r0, r5
 8002132:	f000 faf1 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002136:	4620      	mov	r0, r4
 8002138:	f000 faee 	bl	8002718 <uart1_transmit>

	temp = (((ADC1)->CFGR));
 800213c:	68f0      	ldr	r0, [r6, #12]
	convert_to_ascii(temp);
 800213e:	f7ff fb21 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002142:	4628      	mov	r0, r5
 8002144:	f000 fae8 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 8002148:	4620      	mov	r0, r4
 800214a:	f000 fae5 	bl	8002718 <uart1_transmit>

	temp = (((ADC1)->ISR));
 800214e:	6830      	ldr	r0, [r6, #0]
	convert_to_ascii(temp);
 8002150:	f7ff fb18 	bl	8001784 <convert_to_ascii>
	uart1_transmit(&num_hold);
 8002154:	4628      	mov	r0, r5
 8002156:	f000 fadf 	bl	8002718 <uart1_transmit>
	uart1_transmit(&cli_return);
 800215a:	4620      	mov	r0, r4



}
 800215c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uart1_transmit(&cli_return);
 8002160:	f000 bada 	b.w	8002718 <uart1_transmit>
 8002164:	50040000 	.word	0x50040000
 8002168:	20000746 	.word	0x20000746
 800216c:	20000108 	.word	0x20000108

08002170 <system_ins_search>:
{
 8002170:	b510      	push	{r4, lr}
 8002172:	4604      	mov	r4, r0
uart1_transmit(&cli_return);
 8002174:	4878      	ldr	r0, [pc, #480]	; (8002358 <system_ins_search+0x1e8>)
 8002176:	f000 facf 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&timrpt))
 800217a:	4978      	ldr	r1, [pc, #480]	; (800235c <system_ins_search+0x1ec>)
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff fb3f 	bl	8001800 <string_compare>
 8002182:	b108      	cbz	r0, 8002188 <system_ins_search+0x18>
{tim1report();}
 8002184:	f7ff fdbe 	bl	8001d04 <tim1report>
if(string_compare(cmd,&voltrpt))
 8002188:	4975      	ldr	r1, [pc, #468]	; (8002360 <system_ins_search+0x1f0>)
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff fb38 	bl	8001800 <string_compare>
 8002190:	b108      	cbz	r0, 8002196 <system_ins_search+0x26>
{voltreport();}
 8002192:	f7ff fe2b 	bl	8001dec <voltreport>
if(string_compare(cmd,&timerpt))
 8002196:	4973      	ldr	r1, [pc, #460]	; (8002364 <system_ins_search+0x1f4>)
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff fb31 	bl	8001800 <string_compare>
 800219e:	b108      	cbz	r0, 80021a4 <system_ins_search+0x34>
{timereport();}
 80021a0:	f7ff fe72 	bl	8001e88 <timereport>
if(string_compare(cmd,&bankrpt))
 80021a4:	4970      	ldr	r1, [pc, #448]	; (8002368 <system_ins_search+0x1f8>)
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7ff fb2a 	bl	8001800 <string_compare>
 80021ac:	b108      	cbz	r0, 80021b2 <system_ins_search+0x42>
{bankreport();}
 80021ae:	f7ff fea9 	bl	8001f04 <bankreport>
if(string_compare(cmd,&tbankrpt))
 80021b2:	496e      	ldr	r1, [pc, #440]	; (800236c <system_ins_search+0x1fc>)
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff fb23 	bl	8001800 <string_compare>
 80021ba:	b108      	cbz	r0, 80021c0 <system_ins_search+0x50>
{tbankreport();}
 80021bc:	f7ff ff52 	bl	8002064 <tbankreport>
if(string_compare(cmd,&flagrpt))
 80021c0:	496b      	ldr	r1, [pc, #428]	; (8002370 <system_ins_search+0x200>)
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff fb1c 	bl	8001800 <string_compare>
 80021c8:	b108      	cbz	r0, 80021ce <system_ins_search+0x5e>
{flagreport();}
 80021ca:	f7ff fed7 	bl	8001f7c <flagreport>
if(string_compare(cmd,&stuprpt))
 80021ce:	4969      	ldr	r1, [pc, #420]	; (8002374 <system_ins_search+0x204>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fb15 	bl	8001800 <string_compare>
 80021d6:	b108      	cbz	r0, 80021dc <system_ins_search+0x6c>
{stupreport();}
 80021d8:	f7ff ff70 	bl	80020bc <stupreport>
if(string_compare(cmd,&adc))
 80021dc:	4966      	ldr	r1, [pc, #408]	; (8002378 <system_ins_search+0x208>)
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff fb0e 	bl	8001800 <string_compare>
 80021e4:	b108      	cbz	r0, 80021ea <system_ins_search+0x7a>
{adcreport();}
 80021e6:	f7ff ff91 	bl	800210c <adcreport>
if(string_compare(cmd,&flagclr))
 80021ea:	4964      	ldr	r1, [pc, #400]	; (800237c <system_ins_search+0x20c>)
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7ff fb07 	bl	8001800 <string_compare>
 80021f2:	b108      	cbz	r0, 80021f8 <system_ins_search+0x88>
{flagclear();}
 80021f4:	f7ff fd4e 	bl	8001c94 <flagclear>
if(string_compare(cmd,&convrpt))
 80021f8:	4961      	ldr	r1, [pc, #388]	; (8002380 <system_ins_search+0x210>)
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff fb00 	bl	8001800 <string_compare>
 8002200:	b108      	cbz	r0, 8002206 <system_ins_search+0x96>
{convreport();}
 8002202:	f7ff ff01 	bl	8002008 <convreport>
if(string_compare(cmd,&temprpt))
 8002206:	495f      	ldr	r1, [pc, #380]	; (8002384 <system_ins_search+0x214>)
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff faf9 	bl	8001800 <string_compare>
 800220e:	b108      	cbz	r0, 8002214 <system_ins_search+0xa4>
{tempreport();}
 8002210:	f7ff fd4c 	bl	8001cac <tempreport>
if(string_compare(cmd,&dcp))
 8002214:	495c      	ldr	r1, [pc, #368]	; (8002388 <system_ins_search+0x218>)
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff faf2 	bl	8001800 <string_compare>
 800221c:	b128      	cbz	r0, 800222a <system_ins_search+0xba>
{duty_cycle_increment(1U);uart1_transmit(&money);}
 800221e:	2001      	movs	r0, #1
 8002220:	f000 f9d8 	bl	80025d4 <duty_cycle_increment>
 8002224:	4859      	ldr	r0, [pc, #356]	; (800238c <system_ins_search+0x21c>)
 8002226:	f000 fa77 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&buck))
 800222a:	4959      	ldr	r1, [pc, #356]	; (8002390 <system_ins_search+0x220>)
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff fae7 	bl	8001800 <string_compare>
 8002232:	b120      	cbz	r0, 800223e <system_ins_search+0xce>
{buck_mode();uart1_transmit(&money);}
 8002234:	f000 f924 	bl	8002480 <buck_mode>
 8002238:	4854      	ldr	r0, [pc, #336]	; (800238c <system_ins_search+0x21c>)
 800223a:	f000 fa6d 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&lock))
 800223e:	4955      	ldr	r1, [pc, #340]	; (8002394 <system_ins_search+0x224>)
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fadd 	bl	8001800 <string_compare>
 8002246:	b120      	cbz	r0, 8002252 <system_ins_search+0xe2>
{lockout_mode();uart1_transmit(&money);}
 8002248:	f000 f936 	bl	80024b8 <lockout_mode>
 800224c:	484f      	ldr	r0, [pc, #316]	; (800238c <system_ins_search+0x21c>)
 800224e:	f000 fa63 	bl	8002718 <uart1_transmit>
if(dc_search(cmd))
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fc52 	bl	8001afc <dc_search>
 8002258:	b110      	cbz	r0, 8002260 <system_ins_search+0xf0>
{uart1_transmit(&money);}
 800225a:	484c      	ldr	r0, [pc, #304]	; (800238c <system_ins_search+0x21c>)
 800225c:	f000 fa5c 	bl	8002718 <uart1_transmit>
if(current_decode(cmd))
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff fc6b 	bl	8001b3c <current_decode>
 8002266:	b110      	cbz	r0, 800226e <system_ins_search+0xfe>
{uart1_transmit(&money);}
 8002268:	4848      	ldr	r0, [pc, #288]	; (800238c <system_ins_search+0x21c>)
 800226a:	f000 fa55 	bl	8002718 <uart1_transmit>
if(voltage_decode(cmd))
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff fca4 	bl	8001bbc <voltage_decode>
 8002274:	b110      	cbz	r0, 800227c <system_ins_search+0x10c>
{uart1_transmit(&money);}
 8002276:	4845      	ldr	r0, [pc, #276]	; (800238c <system_ins_search+0x21c>)
 8002278:	f000 fa4e 	bl	8002718 <uart1_transmit>
if(exp_voltage_decode(cmd))
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fcd3 	bl	8001c28 <exp_voltage_decode>
 8002282:	b110      	cbz	r0, 800228a <system_ins_search+0x11a>
{uart1_transmit(&money);}
 8002284:	4841      	ldr	r0, [pc, #260]	; (800238c <system_ins_search+0x21c>)
 8002286:	f000 fa47 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&dacup))
 800228a:	4943      	ldr	r1, [pc, #268]	; (8002398 <system_ins_search+0x228>)
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff fab7 	bl	8001800 <string_compare>
 8002292:	b128      	cbz	r0, 80022a0 <system_ins_search+0x130>
{dac_up(200U);uart1_transmit(&money);}
 8002294:	20c8      	movs	r0, #200	; 0xc8
 8002296:	f7fe fd23 	bl	8000ce0 <dac_up>
 800229a:	483c      	ldr	r0, [pc, #240]	; (800238c <system_ins_search+0x21c>)
 800229c:	f000 fa3c 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&dacdn))
 80022a0:	493e      	ldr	r1, [pc, #248]	; (800239c <system_ins_search+0x22c>)
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff faac 	bl	8001800 <string_compare>
 80022a8:	b128      	cbz	r0, 80022b6 <system_ins_search+0x146>
{dac_down(200U);uart1_transmit(&money);}
 80022aa:	20c8      	movs	r0, #200	; 0xc8
 80022ac:	f7fe fd32 	bl	8000d14 <dac_down>
 80022b0:	4836      	ldr	r0, [pc, #216]	; (800238c <system_ins_search+0x21c>)
 80022b2:	f000 fa31 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&dacmn))
 80022b6:	493a      	ldr	r1, [pc, #232]	; (80023a0 <system_ins_search+0x230>)
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff faa1 	bl	8001800 <string_compare>
 80022be:	b128      	cbz	r0, 80022cc <system_ins_search+0x15c>
{dac_set(0U);uart1_transmit(&money);}
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fd3d 	bl	8000d40 <dac_set>
 80022c6:	4831      	ldr	r0, [pc, #196]	; (800238c <system_ins_search+0x21c>)
 80022c8:	f000 fa26 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&dacmx))
 80022cc:	4935      	ldr	r1, [pc, #212]	; (80023a4 <system_ins_search+0x234>)
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff fa96 	bl	8001800 <string_compare>
 80022d4:	b130      	cbz	r0, 80022e4 <system_ins_search+0x174>
{dac_set(4095U);uart1_transmit(&money);}
 80022d6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80022da:	f7fe fd31 	bl	8000d40 <dac_set>
 80022de:	482b      	ldr	r0, [pc, #172]	; (800238c <system_ins_search+0x21c>)
 80022e0:	f000 fa1a 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&dacrpt))
 80022e4:	4930      	ldr	r1, [pc, #192]	; (80023a8 <system_ins_search+0x238>)
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff fa8a 	bl	8001800 <string_compare>
 80022ec:	b108      	cbz	r0, 80022f2 <system_ins_search+0x182>
{dacreport();}
 80022ee:	f7ff fef9 	bl	80020e4 <dacreport>
if(string_compare(cmd,&drven))
 80022f2:	492e      	ldr	r1, [pc, #184]	; (80023ac <system_ins_search+0x23c>)
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff fa83 	bl	8001800 <string_compare>
 80022fa:	b150      	cbz	r0, 8002312 <system_ins_search+0x1a2>
start_up_flags &= 0U;
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <system_ins_search+0x240>)
uart1_transmit(&money);
 80022fe:	4823      	ldr	r0, [pc, #140]	; (800238c <system_ins_search+0x21c>)
start_up_flags &= 0U;
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
system_flags |= START_UP_FLAG;
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <system_ins_search+0x244>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230c:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 800230e:	f000 fa03 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&drvdis))
 8002312:	4929      	ldr	r1, [pc, #164]	; (80023b8 <system_ins_search+0x248>)
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff fa73 	bl	8001800 <string_compare>
 800231a:	b138      	cbz	r0, 800232c <system_ins_search+0x1bc>
system_flags &= ~(PMIC_ENABLE_FLAG);
 800231c:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <system_ins_search+0x244>)
uart1_transmit(&money);
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <system_ins_search+0x21c>)
system_flags &= ~(PMIC_ENABLE_FLAG);
 8002320:	6813      	ldr	r3, [r2, #0]
 8002322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002326:	6013      	str	r3, [r2, #0]
uart1_transmit(&money);
 8002328:	f000 f9f6 	bl	8002718 <uart1_transmit>
if(string_compare(cmd,&csrs))
 800232c:	4923      	ldr	r1, [pc, #140]	; (80023bc <system_ins_search+0x24c>)
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff fa66 	bl	8001800 <string_compare>
 8002334:	b138      	cbz	r0, 8002346 <system_ins_search+0x1d6>
{cs_offset = ((&cs_channel)->avg)-40U; uart1_transmit(&money);}
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <system_ins_search+0x250>)
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <system_ins_search+0x254>)
 800233a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <system_ins_search+0x21c>)
 800233e:	3b28      	subs	r3, #40	; 0x28
 8002340:	8013      	strh	r3, [r2, #0]
 8002342:	f000 f9e9 	bl	8002718 <uart1_transmit>
uart1_transmit(&cli_return);
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <system_ins_search+0x1e8>)
 8002348:	f000 f9e6 	bl	8002718 <uart1_transmit>
uart1_transmit(&prompt);
 800234c:	481e      	ldr	r0, [pc, #120]	; (80023c8 <system_ins_search+0x258>)
}
 800234e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
uart1_transmit(&prompt);
 8002352:	f000 b9e1 	b.w	8002718 <uart1_transmit>
 8002356:	bf00      	nop
 8002358:	20000108 	.word	0x20000108
 800235c:	200003ee 	.word	0x200003ee
 8002360:	2000040f 	.word	0x2000040f
 8002364:	200003cd 	.word	0x200003cd
 8002368:	20000021 	.word	0x20000021
 800236c:	2000038b 	.word	0x2000038b
 8002370:	200002b5 	.word	0x200002b5
 8002374:	2000036a 	.word	0x2000036a
 8002378:	20000000 	.word	0x20000000
 800237c:	20000294 	.word	0x20000294
 8002380:	20000129 	.word	0x20000129
 8002384:	200003ac 	.word	0x200003ac
 8002388:	20000231 	.word	0x20000231
 800238c:	200002f7 	.word	0x200002f7
 8002390:	20000063 	.word	0x20000063
 8002394:	200002d6 	.word	0x200002d6
 8002398:	20000210 	.word	0x20000210
 800239c:	2000018c 	.word	0x2000018c
 80023a0:	200001ad 	.word	0x200001ad
 80023a4:	200001ce 	.word	0x200001ce
 80023a8:	200001ef 	.word	0x200001ef
 80023ac:	20000273 	.word	0x20000273
 80023b0:	20000704 	.word	0x20000704
 80023b4:	200005ec 	.word	0x200005ec
 80023b8:	20000252 	.word	0x20000252
 80023bc:	2000016b 	.word	0x2000016b
 80023c0:	20000564 	.word	0x20000564
 80023c4:	2000071c 	.word	0x2000071c
 80023c8:	20000349 	.word	0x20000349

080023cc <system_management>:
{
 80023cc:	b508      	push	{r3, lr}
flags = uart1_get_flags();
 80023ce:	f000 fa07 	bl	80027e0 <uart1_get_flags>
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <system_management+0x2c>)
 80023d4:	7018      	strb	r0, [r3, #0]
if(flags & CMD_EXECUTE)
 80023d6:	0743      	lsls	r3, r0, #29
 80023d8:	d505      	bpl.n	80023e6 <system_management+0x1a>
cmd = cmd_execute();
 80023da:	f000 f9f5 	bl	80027c8 <cmd_execute>
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <system_management+0x30>)
 80023e0:	6018      	str	r0, [r3, #0]
system_ins_search(cmd);
 80023e2:	f7ff fec5 	bl	8002170 <system_ins_search>
if(th_i_target != i_target)
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <system_management+0x34>)
 80023e8:	881a      	ldrh	r2, [r3, #0]
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <system_management+0x38>)
 80023ec:	8819      	ldrh	r1, [r3, #0]
 80023ee:	4291      	cmp	r1, r2
{i_target = th_i_target;}
 80023f0:	bf18      	it	ne
 80023f2:	801a      	strhne	r2, [r3, #0]
 80023f4:	bd08      	pop	{r3, pc}
 80023f6:	bf00      	nop
 80023f8:	20000730 	.word	0x20000730
 80023fc:	2000076c 	.word	0x2000076c
 8002400:	20000744 	.word	0x20000744
 8002404:	20000680 	.word	0x20000680

08002408 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	490f      	ldr	r1, [pc, #60]	; (8002448 <SystemInit+0x40>)
 800240a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800240e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <SystemInit+0x44>)
 8002418:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800241a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002422:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800242a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800242e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002434:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800243c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800243e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002444:	608b      	str	r3, [r1, #8]
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00
 800244c:	40021000 	.word	0x40021000

08002450 <set_duty_cycle.part.0>:
if(dcn < 0U)
{return;}
if(dcn > 99U)
{return;}

	dc = dcn;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <set_duty_cycle.part.0+0x20>)
 8002452:	7018      	strb	r0, [r3, #0]
	dc_val = percent*dc;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <set_duty_cycle.part.0+0x24>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4358      	muls	r0, r3
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <set_duty_cycle.part.0+0x28>)
 800245c:	6018      	str	r0, [r3, #0]
	((TIM1)->CCR1) = ((dc_val));
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <set_duty_cycle.part.0+0x2c>)
 8002460:	6358      	str	r0, [r3, #52]	; 0x34
    ((TIM1)->CCR3) = (dc_val);
 8002462:	63d8      	str	r0, [r3, #60]	; 0x3c
    ((TIM1)->EGR) |= UG;
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000770 	.word	0x20000770
 8002474:	20000774 	.word	0x20000774
 8002478:	20000784 	.word	0x20000784
 800247c:	40012c00 	.word	0x40012c00

08002480 <buck_mode>:
		mode = BUCK_MODE;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <buck_mode+0x2c>)
 8002482:	2204      	movs	r2, #4
 8002484:	701a      	strb	r2, [r3, #0]
        ((TIM1)->CCR3) = dc_val;
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <buck_mode+0x30>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <buck_mode+0x34>)
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c
		((TIM1)->CCMR2) &= 0U;
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249a:	f042 0208 	orr.w	r2, r2, #8
 800249e:	61da      	str	r2, [r3, #28]
		((TIM1)->CCMR2) |= ((PWM_MODE_1)<<(BUCK_PWM_SHIFT));
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80024a6:	61da      	str	r2, [r3, #28]
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000778 	.word	0x20000778
 80024b0:	20000784 	.word	0x20000784
 80024b4:	40012c00 	.word	0x40012c00

080024b8 <lockout_mode>:
{
 80024b8:	b508      	push	{r3, lr}
	((TIM1)->CCMR2) &= 0U;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <lockout_mode+0x3c>)
 80024bc:	2000      	movs	r0, #0
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	61d8      	str	r0, [r3, #28]
	((TIM1)->CCMR2) |= (((LOW_MODE)<<(BUCK_PWM_SHIFT)));
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c8:	61da      	str	r2, [r3, #28]
    ((TIM1)->EGR) |= UG;
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <lockout_mode+0x40>)
 80024d4:	210a      	movs	r1, #10
 80024d6:	6011      	str	r1, [r2, #0]
	((TIM1)->CCMR2) |= (((LOW_MODE)<<(BUCK_EN_SHIFT)));
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	61da      	str	r2, [r3, #28]
    ((TIM1)->EGR) |= UG;
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	f7ff ffb2 	bl	8002450 <set_duty_cycle.part.0>
	mode = LOCKOUT_MODE;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <lockout_mode+0x44>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	bd08      	pop	{r3, pc}
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	20000780 	.word	0x20000780
 80024fc:	20000778 	.word	0x20000778

08002500 <pwm_unlock>:
{((GPIOA)->ODR)  |= ((1U)<<(GPIO_11_SHIFT));}
 8002500:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002504:	6953      	ldr	r3, [r2, #20]
 8002506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250a:	6153      	str	r3, [r2, #20]
 800250c:	4770      	bx	lr
	...

08002510 <tim1_enable>:
clk_freq = 80000U;
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <tim1_enable+0x9c>)
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <tim1_enable+0xa0>)
arr_val = clk_freq/(freq);
 8002514:	fbb3 f0f0 	udiv	r0, r3, r0
{
 8002518:	b570      	push	{r4, r5, r6, lr}
arr_val = clk_freq/(freq);
 800251a:	4d26      	ldr	r5, [pc, #152]	; (80025b4 <tim1_enable+0xa4>)
clk_freq = 80000U;
 800251c:	6013      	str	r3, [r2, #0]
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <tim1_enable+0xa8>)
arr_val = clk_freq/(freq);
 8002520:	6028      	str	r0, [r5, #0]
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 8002522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
((TIM1)->CCER) &= 0U;
 8002524:	4c25      	ldr	r4, [pc, #148]	; (80025bc <tim1_enable+0xac>)
((RCC)->APB2ENR) |= RCC_TIM1_ENABLE;
 8002526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252a:	661a      	str	r2, [r3, #96]	; 0x60
((RCC)->AHB2ENR) |= RCC_GPIOA_ENABLE;
 800252c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_10_DSHIFT)));
 800252e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
((RCC)->AHB2ENR) |= RCC_GPIOA_ENABLE;
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	64da      	str	r2, [r3, #76]	; 0x4c
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_10_DSHIFT)));
 8002538:	680b      	ldr	r3, [r1, #0]
 800253a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800253e:	600b      	str	r3, [r1, #0]
((GPIOA)->MODER) |= (((AF_MODE)<<(GPIO_10_DSHIFT)));
 8002540:	680b      	ldr	r3, [r1, #0]
 8002542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002546:	600b      	str	r3, [r1, #0]
((GPIOA)->MODER) &= (~((IN_MODE)<<(GPIO_11_DSHIFT)));
 8002548:	680b      	ldr	r3, [r1, #0]
 800254a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800254e:	600b      	str	r3, [r1, #0]
((GPIOA)->MODER) |= (((OUT_MODE)<<(GPIO_11_DSHIFT)));
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002556:	600b      	str	r3, [r1, #0]
pwm_unlock();
 8002558:	f7ff ffd2 	bl	8002500 <pwm_unlock>
(((GPIOA)->AFR)[1]) |= ((AF1)<<(GPIO_10_QSHIFT));
 800255c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	624b      	str	r3, [r1, #36]	; 0x24
((TIM1)->CCER) &= 0U;
 8002564:	2600      	movs	r6, #0
 8002566:	6a23      	ldr	r3, [r4, #32]
 8002568:	6226      	str	r6, [r4, #32]
lockout_mode();
 800256a:	f7ff ffa5 	bl	80024b8 <lockout_mode>
((TIM1)->ARR) = arr_val;
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	62e3      	str	r3, [r4, #44]	; 0x2c
percent = ((arr_val/100U)+1U);
 8002572:	2264      	movs	r2, #100	; 0x64
 8002574:	fbb3 f3f2 	udiv	r3, r3, r2
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <tim1_enable+0xb0>)
 800257a:	3301      	adds	r3, #1
 800257c:	6013      	str	r3, [r2, #0]
dc = 0;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <tim1_enable+0xb4>)
 8002580:	701e      	strb	r6, [r3, #0]
((TIM1)->CCER) |= ((1U)<<(CC3_SHIFT));
 8002582:	6a23      	ldr	r3, [r4, #32]
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6223      	str	r3, [r4, #32]
((TIM1)->CCMR1) |= (((1U)<<(CC1PE))|((1U)<<(CC2PE)));
 800258a:	69a2      	ldr	r2, [r4, #24]
 800258c:	f640 0108 	movw	r1, #2056	; 0x808
 8002590:	430a      	orrs	r2, r1
 8002592:	61a2      	str	r2, [r4, #24]
((TIM1)->CCMR2) |= (((1U)<<(CC3PE))|((1U)<<(CC4PE)));
 8002594:	69e3      	ldr	r3, [r4, #28]
 8002596:	430b      	orrs	r3, r1
 8002598:	61e3      	str	r3, [r4, #28]
((TIM1)->BDTR) |= MOE;
 800259a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	6463      	str	r3, [r4, #68]	; 0x44
((TIM1)->CR1) |= TIM1_ENABLE;
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6023      	str	r3, [r4, #0]
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	20000788 	.word	0x20000788
 80025b0:	00013880 	.word	0x00013880
 80025b4:	2000077c 	.word	0x2000077c
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	20000774 	.word	0x20000774
 80025c4:	20000770 	.word	0x20000770

080025c8 <mode_check>:
{return mode;}
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <mode_check+0x8>)
 80025ca:	7818      	ldrb	r0, [r3, #0]
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000778 	.word	0x20000778

080025d4 <duty_cycle_increment>:
dc_val+=step;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <duty_cycle_increment+0x30>)
dc = dc_val/percent;
 80025d6:	490c      	ldr	r1, [pc, #48]	; (8002608 <duty_cycle_increment+0x34>)
dc_val+=step;
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4410      	add	r0, r2
if(dc_val >= (arr_val - 10U))
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <duty_cycle_increment+0x38>)
dc_val+=step;
 80025de:	6018      	str	r0, [r3, #0]
if(dc_val >= (arr_val - 10U))
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	3a0a      	subs	r2, #10
 80025e4:	4290      	cmp	r0, r2
{dc_val = (arr_val - 10U);}
 80025e6:	bf28      	it	cs
 80025e8:	601a      	strcs	r2, [r3, #0]
dc = dc_val/percent;
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <duty_cycle_increment+0x3c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	700b      	strb	r3, [r1, #0]
if(mode == BUCK_MODE)
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <duty_cycle_increment+0x40>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b04      	cmp	r3, #4
{((TIM1)->CCR3) = (dc_val);}
 80025fc:	bf04      	itt	eq
 80025fe:	4b06      	ldreq	r3, [pc, #24]	; (8002618 <duty_cycle_increment+0x44>)
 8002600:	63da      	streq	r2, [r3, #60]	; 0x3c
 8002602:	4770      	bx	lr
 8002604:	20000784 	.word	0x20000784
 8002608:	20000770 	.word	0x20000770
 800260c:	2000077c 	.word	0x2000077c
 8002610:	20000774 	.word	0x20000774
 8002614:	20000778 	.word	0x20000778
 8002618:	40012c00 	.word	0x40012c00

0800261c <duty_cycle_decrement>:
    if(step >= dc_val)
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <duty_cycle_decrement+0x2c>)
    dc = dc_val/percent;
 800261e:	490b      	ldr	r1, [pc, #44]	; (800264c <duty_cycle_decrement+0x30>)
    if(step >= dc_val)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4282      	cmp	r2, r0
    {dc_val = 0U;}
 8002624:	bf94      	ite	ls
 8002626:	2200      	movls	r2, #0
    {dc_val -= step;}
 8002628:	1a12      	subhi	r2, r2, r0
 800262a:	601a      	str	r2, [r3, #0]
    dc = dc_val/percent;
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <duty_cycle_decrement+0x34>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	700b      	strb	r3, [r1, #0]
	if(mode == BUCK_MODE)
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <duty_cycle_decrement+0x38>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b04      	cmp	r3, #4
	{((TIM1)->CCR3) = (dc_val);}
 800263e:	bf04      	itt	eq
 8002640:	4b05      	ldreq	r3, [pc, #20]	; (8002658 <duty_cycle_decrement+0x3c>)
 8002642:	63da      	streq	r2, [r3, #60]	; 0x3c
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000784 	.word	0x20000784
 800264c:	20000770 	.word	0x20000770
 8002650:	20000774 	.word	0x20000774
 8002654:	20000778 	.word	0x20000778
 8002658:	40012c00 	.word	0x40012c00

0800265c <set_duty_cycle>:
if(dcn > 99U)
 800265c:	2863      	cmp	r0, #99	; 0x63
 800265e:	d801      	bhi.n	8002664 <set_duty_cycle+0x8>
 8002660:	f7ff bef6 	b.w	8002450 <set_duty_cycle.part.0>
 8002664:	4770      	bx	lr
	...

08002668 <uart1_enable>:
uint8_t debug;

void uart1_enable(void)
{
/*ENABLE THE USART RCC*/
((RCC)->APB2ENR) |= RCC_USART1_ENABLE;
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <uart1_enable+0x94>)
 800266a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
{
 8002670:	b510      	push	{r4, lr}
((RCC)->APB2ENR) |= RCC_USART1_ENABLE;
 8002672:	661a      	str	r2, [r3, #96]	; 0x60

/*ENABLE GPIOA RCC*/
((RCC)->AHB2ENR) |= RCC_GPIOB_ENABLE;
 8002674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	64da      	str	r2, [r3, #76]	; 0x4c

/*Set the PA9 PA10 to AF_MODE*/
((GPIOB)->MODER) &= (~((IN_MODE)<<(GPIO_6_DSHIFT)));
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <uart1_enable+0x98>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002684:	601a      	str	r2, [r3, #0]
((GPIOB)->MODER) |= ((AF_MODE)<<(GPIO_6_DSHIFT));
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800268c:	601a      	str	r2, [r3, #0]

((GPIOB)->MODER) &= (~((IN_MODE)<<(GPIO_7_DSHIFT)));
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002694:	601a      	str	r2, [r3, #0]
((GPIOB)->MODER) |= ((AF_MODE)<<(GPIO_7_DSHIFT));
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269c:	601a      	str	r2, [r3, #0]

(((GPIOB)->AFR)[0]) |= ((AF7)<<(GPIO_6_QSHIFT));
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
 80026a4:	621a      	str	r2, [r3, #32]
(((GPIOB)->AFR)[0]) |= ((AF7)<<(GPIO_7_QSHIFT));
 80026a6:	6a1a      	ldr	r2, [r3, #32]
 80026a8:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 80026ac:	621a      	str	r2, [r3, #32]



/*Enable Receiver Transmitter and Receiver Not Empty Interrupt*/
((USART1)->CR1) |= ((RXNE)|(RE)|TE);
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <uart1_enable+0x9c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 80026b6:	601a      	str	r2, [r3, #0]
/*Set Baud Rate to 115200*/
((USART1)->BRR) &= 0U;
 80026b8:	2100      	movs	r1, #0
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	60d9      	str	r1, [r3, #12]
((USART1)->BRR) |= BR_115;
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	f442 722d 	orr.w	r2, r2, #692	; 0x2b4
 80026c4:	f042 0202 	orr.w	r2, r2, #2
 80026c8:	60da      	str	r2, [r3, #12]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026ca:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <uart1_enable+0xa0>)
 80026cc:	2020      	movs	r0, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	2410      	movs	r4, #16
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d0:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	f882 4325 	strb.w	r4, [r2, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d8:	6050      	str	r0, [r2, #4]
NVIC_ClearPendingIRQ(USART1_IRQn);
NVIC_SetPriority(USART1_IRQn, 1U);
NVIC_EnableIRQ(USART1_IRQn);

/*Enable UART*/
((USART1)->CR1) |= UE;
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

((USART1)->TDR) = 17U;
 80026e2:	2211      	movs	r2, #17
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28

outi = 0U;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <uart1_enable+0xa4>)
debug = 0U;
uart_flags |= ((UART_STARTED)|(CMD_EXECUTE));
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <uart1_enable+0xa8>)
outi = 0U;
 80026ea:	7019      	strb	r1, [r3, #0]
debug = 0U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <uart1_enable+0xac>)
 80026ee:	7019      	strb	r1, [r3, #0]
uart_flags |= ((UART_STARTED)|(CMD_EXECUTE));
 80026f0:	7813      	ldrb	r3, [r2, #0]
 80026f2:	f043 0305 	orr.w	r3, r3, #5
 80026f6:	7013      	strb	r3, [r2, #0]
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	48000400 	.word	0x48000400
 8002704:	40013800 	.word	0x40013800
 8002708:	e000e100 	.word	0xe000e100
 800270c:	20000794 	.word	0x20000794
 8002710:	2000078c 	.word	0x2000078c
 8002714:	20000795 	.word	0x20000795

08002718 <uart1_transmit>:


void uart1_transmit(STRING* in)
{

	for(outi=0U; outi<((in)->length); outi++)
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <uart1_transmit+0x2c>)
 800271a:	2300      	movs	r3, #0
{
 800271c:	b530      	push	{r4, r5, lr}
	for(outi=0U; outi<((in)->length); outi++)
 800271e:	7013      	strb	r3, [r2, #0]
 8002720:	7805      	ldrb	r5, [r0, #0]
	{
	((USART1)->TDR) = (((in)->string)[outi]);
 8002722:	4c09      	ldr	r4, [pc, #36]	; (8002748 <uart1_transmit+0x30>)
	for(outi=0U; outi<((in)->length); outi++)
 8002724:	4619      	mov	r1, r3
 8002726:	429d      	cmp	r5, r3
 8002728:	d802      	bhi.n	8002730 <uart1_transmit+0x18>
 800272a:	b101      	cbz	r1, 800272e <uart1_transmit+0x16>
 800272c:	7013      	strb	r3, [r2, #0]
 800272e:	bd30      	pop	{r4, r5, pc}
	((USART1)->TDR) = (((in)->string)[outi]);
 8002730:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8002734:	8521      	strh	r1, [r4, #40]	; 0x28
	while((((USART1)->ISR) & TXE) == 0U)
 8002736:	69e1      	ldr	r1, [r4, #28]
 8002738:	0609      	lsls	r1, r1, #24
 800273a:	d5fc      	bpl.n	8002736 <uart1_transmit+0x1e>
 800273c:	3301      	adds	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2101      	movs	r1, #1
 8002742:	e7f0      	b.n	8002726 <uart1_transmit+0xe>
 8002744:	20000794 	.word	0x20000794
 8002748:	40013800 	.word	0x40013800

0800274c <uart1_buffer_char>:



void uart1_buffer_char(void)
{
uint8_t char_in = ((USART1)->RDR);
 800274c:	4819      	ldr	r0, [pc, #100]	; (80027b4 <uart1_buffer_char+0x68>)
 800274e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8002750:	b2db      	uxtb	r3, r3

if((char_in > 31U) && (char_in < 127U))
 8002752:	f1a3 0220 	sub.w	r2, r3, #32
 8002756:	2a5e      	cmp	r2, #94	; 0x5e
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
if((char_in > 31U) && (char_in < 127U))
 800275a:	d80d      	bhi.n	8002778 <uart1_buffer_char+0x2c>
{
((&current_input)->string)[((&current_input)->length)] = char_in;
 800275c:	4916      	ldr	r1, [pc, #88]	; (80027b8 <uart1_buffer_char+0x6c>)
 800275e:	780a      	ldrb	r2, [r1, #0]
 8002760:	188c      	adds	r4, r1, r2
((&current_input)->length)++;
 8002762:	3201      	adds	r2, #1
((&current_input)->string)[((&current_input)->length)] = char_in;
 8002764:	7063      	strb	r3, [r4, #1]
 8002766:	b29b      	uxth	r3, r3
((&current_input)->length)++;
 8002768:	700a      	strb	r2, [r1, #0]
((USART1)->TDR) = char_in;
 800276a:	8503      	strh	r3, [r0, #40]	; 0x28

uart_flags |= (CMD_EXECUTE);
}


((USART1)->ICR) |= (RXNE);
 800276c:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <uart1_buffer_char+0x68>)
 800276e:	6a13      	ldr	r3, [r2, #32]
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
if(char_in == 13U)
 8002778:	2b0d      	cmp	r3, #13
 800277a:	d1f7      	bne.n	800276c <uart1_buffer_char+0x20>
for(ui=0U; ui<((&current_input)->length); ui++)
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <uart1_buffer_char+0x6c>)
 800277e:	490f      	ldr	r1, [pc, #60]	; (80027bc <uart1_buffer_char+0x70>)
 8002780:	7815      	ldrb	r5, [r2, #0]
 8002782:	4c0f      	ldr	r4, [pc, #60]	; (80027c0 <uart1_buffer_char+0x74>)
 8002784:	2300      	movs	r3, #0
 8002786:	700b      	strb	r3, [r1, #0]
 8002788:	461e      	mov	r6, r3
 800278a:	b2df      	uxtb	r7, r3
 800278c:	3301      	adds	r3, #1
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	b2c0      	uxtb	r0, r0
 8002792:	4285      	cmp	r5, r0
 8002794:	d80a      	bhi.n	80027ac <uart1_buffer_char+0x60>
 8002796:	b106      	cbz	r6, 800279a <uart1_buffer_char+0x4e>
 8002798:	700f      	strb	r7, [r1, #0]
((&current_input)->length) = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	7013      	strb	r3, [r2, #0]
uart_flags |= (CMD_EXECUTE);
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <uart1_buffer_char+0x78>)
((&last_command)->length) = ((&current_input)->length);
 80027a0:	7025      	strb	r5, [r4, #0]
uart_flags |= (CMD_EXECUTE);
 80027a2:	7813      	ldrb	r3, [r2, #0]
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	7013      	strb	r3, [r2, #0]
 80027aa:	e7df      	b.n	800276c <uart1_buffer_char+0x20>
{(((&last_command)->string)[ui]) = (((&current_input)->string)[ui]);}
 80027ac:	5cd0      	ldrb	r0, [r2, r3]
 80027ae:	54e0      	strb	r0, [r4, r3]
 80027b0:	2601      	movs	r6, #1
 80027b2:	e7ea      	b.n	800278a <uart1_buffer_char+0x3e>
 80027b4:	40013800 	.word	0x40013800
 80027b8:	200007c4 	.word	0x200007c4
 80027bc:	200007e5 	.word	0x200007e5
 80027c0:	2000079c 	.word	0x2000079c
 80027c4:	2000078c 	.word	0x2000078c

080027c8 <cmd_execute>:
}


STRING* cmd_execute(void)
{
uart_flags &= (~(CMD_EXECUTE));
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <cmd_execute+0x10>)
return (&last_command);
}
 80027ca:	4804      	ldr	r0, [pc, #16]	; (80027dc <cmd_execute+0x14>)
uart_flags &= (~(CMD_EXECUTE));
 80027cc:	7813      	ldrb	r3, [r2, #0]
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	7013      	strb	r3, [r2, #0]
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	2000078c 	.word	0x2000078c
 80027dc:	2000079c 	.word	0x2000079c

080027e0 <uart1_get_flags>:


uint8_t uart1_get_flags(void)
{return uart_flags;}
 80027e0:	4b01      	ldr	r3, [pc, #4]	; (80027e8 <uart1_get_flags+0x8>)
 80027e2:	7818      	ldrb	r0, [r3, #0]
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	2000078c 	.word	0x2000078c

080027ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027f2:	e003      	b.n	80027fc <LoopCopyDataInit>

080027f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027fa:	3104      	adds	r1, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <LoopForever+0xa>)
	ldr	r3, =_edata
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002800:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002802:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002804:	d3f6      	bcc.n	80027f4 <CopyDataInit>
	ldr	r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002808:	e002      	b.n	8002810 <LoopFillZerobss>

0800280a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800280a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800280c:	f842 3b04 	str.w	r3, [r2], #4

08002810 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <LoopForever+0x16>)
	cmp	r2, r3
 8002812:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002814:	d3f9      	bcc.n	800280a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002816:	f7ff fdf7 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f000 f811 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281e:	f7fe fb47 	bl	8000eb0 <main>

08002822 <LoopForever>:

LoopForever:
    b LoopForever
 8002822:	e7fe      	b.n	8002822 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002824:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002828:	080028e8 	.word	0x080028e8
	ldr	r0, =_sdata
 800282c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002830:	20000434 	.word	0x20000434
	ldr	r2, =_sbss
 8002834:	20000434 	.word	0x20000434
	ldr	r3, = _ebss
 8002838:	200007e8 	.word	0x200007e8

0800283c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800283c:	e7fe      	b.n	800283c <CAN1_RX0_IRQHandler>
	...

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4e0d      	ldr	r6, [pc, #52]	; (8002878 <__libc_init_array+0x38>)
 8002844:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002846:	1ba4      	subs	r4, r4, r6
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	2500      	movs	r5, #0
 800284c:	42a5      	cmp	r5, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4e0b      	ldr	r6, [pc, #44]	; (8002880 <__libc_init_array+0x40>)
 8002852:	4c0c      	ldr	r4, [pc, #48]	; (8002884 <__libc_init_array+0x44>)
 8002854:	f000 f818 	bl	8002888 <_init>
 8002858:	1ba4      	subs	r4, r4, r6
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	2500      	movs	r5, #0
 800285e:	42a5      	cmp	r5, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002868:	4798      	blx	r3
 800286a:	3501      	adds	r5, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002872:	4798      	blx	r3
 8002874:	3501      	adds	r5, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	080028e0 	.word	0x080028e0
 800287c:	080028e0 	.word	0x080028e0
 8002880:	080028e0 	.word	0x080028e0
 8002884:	080028e4 	.word	0x080028e4

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
